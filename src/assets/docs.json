{
  "en": [
    {
      "language": "en",
      "route": "/docs/api#pagespy",
      "parent": "API",
      "title": "PageSpy",
      "content": "\nThe instance variable is named $pageSpy = new PageSpy(...)；\n\nconstructor()\n$pageSpy.updateRoomInfo()\n$pageSpy.abort()\nPageSpy.registerPlugin()\nPageSpy.pluginsWithOrder\n$pageSpy.version\n$pageSpy.config\n$pageSpy.socketStore\n$pageSpy.showPanel() \n"
    },
    {
      "language": "en",
      "route": "/docs/api#plugins",
      "parent": "API",
      "title": "Plugins",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/api#harbor",
      "parent": "API",
      "title": "DataHarborPlugin",
      "content": "\nThe instance variable is named $harbor = new DataHarborPlugin(...)；\n\nconstructor()\nOperate log manually\n$harbor.pause()\n$harbor.resume()\n$harbor.reharbor()\n"
    },
    {
      "language": "en",
      "route": "/docs/api#rrweb",
      "parent": "API",
      "title": "RRWebPlugin",
      "content": "\nThe instance variable is named $rrweb = new RRWebPlugin(...)；\n\nconstructor()\n"
    },
    {
      "language": "en",
      "route": "/docs/browser#online",
      "parent": "Browser",
      "title": "Take a try",
      "content": "\nClick to view the complete code: Codesandbox\n"
    },
    {
      "language": "en",
      "route": "/docs/browser#usage",
      "parent": "Browser",
      "title": "Access and Usage",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/browser#step-1",
      "parent": "Browser",
      "title": "Step 1",
      "content": "Load <script> in the client's project:<!-- PageSpy SDK -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/page-spy/index.min.js\"></script>\n\n<!-- Plugins (optional, but recommended) -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/data-harbor/index.min.js\"></script>\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/rrweb/index.min.js\"></script>\n"
    },
    {
      "language": "en",
      "route": "/docs/browser#step-2",
      "parent": "Browser",
      "title": "Step 2",
      "content": "Initialize PageSpy and the plugins. Both their initialization parameters provide optional configuration items for customizing the behavior of the SDK:  - **DataHarborPlugin**: PageSpy itself only supports _online mode_, meaning \"the client and the debugging side must be online simultaneously\" during debugging. DataHarborPlugin enables offline debugging for PageSpy. Click [Offline Log](./offline-log) to see more details;\n  - **RRWebPlugin**: Records user operation traces, using [rrweb](https://github.com/rrweb-io/rrweb/blob/master/guide.zh_CN.md) as the underlying technology. It's commonly used in conjunction with DataHarborPlugin.\n\n  You can also customize your own PageSpy by [developing plugins](./plugins)!\n</div>\n<script>\n  window.$harbor = new DataHarborPlugin();\n  window.$rrweb = new RRWebPlugin();\n\n  [window.$harbor, window.$rrweb].forEach(p => {\n    PageSpy.registerPlugin(p)\n  })\n\n  window.$pageSpy = new PageSpy();\n</script>\nThat's the complete process to integrate PageSpy into a browser project.Once integrated, click on the top menu Debugging to use it!"
    },
    {
      "language": "en",
      "route": "/docs/browser#framework",
      "parent": "Browser",
      "title": "Integrate within frameworks? ",
      "content": "PageSpy has published integration guides for all popular frameworks on the CodeSandbox platform. You can experience them online:\nReact：CodeSandbox - PageSpy in React\nVue：CodeSandbox - PageSpy in Vue\nSvelte：CodeSandbox - PageSpy in Svelte\nAngular：CodeSandbox - PageSpy in Angular\nNextjs：CodeSandbox - PageSpy in Nextjs\nNuxtjs：CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "en",
      "route": "/docs/browser#browser-extension",
      "parent": "Browser",
      "title": "Using the Browser Extension",
      "content": "PageSpy provides a browser extension that allows you to use PageSpy on any webpage without integrating any code!Yes, you read that right! With the PageSpy browser extension, you can debug almost any webpage. However, a few websites with strict CSP policies may prevent the extension from functioning properly."
    },
    {
      "language": "en",
      "route": "/docs/browser#install",
      "parent": "Browser",
      "title": "Install",
      "content": "Go to the Browser Extension repository and follow the README instructions to install it."
    },
    {
      "language": "en",
      "route": "/docs/browser#parameters",
      "parent": "Browser",
      "title": "Parameters",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-2-0",
      "parent": "Changelog",
      "title": "v2.2.0",
      "content": "\n🆕 O-Spy is now live on our official website! See details: https://github.com/HuolalaTech/page-spy-web/pull/315;\n🆕 Introducing the new @huolala-tech/page-spy-plugin-ospy plugin for offline recording;\n🟡 @huolala-tech/page-spy-plugin-whole-bundle is deprecated;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-1-3",
      "parent": "Changelog",
      "title": "v2.1.3",
      "content": "\n🐛 Add filter on the Network table in the replay page;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-1-2",
      "parent": "Changelog",
      "title": "v2.1.2",
      "content": "\n🆕 The rrwebPlayer panel on the replay page now supports basic selection operations.\n🆕 Support for viewing static resource requests on web pages. See details: https://github.com/HuolalaTech/page-spy-web/pull/309.\n🐛 Fix an issue in the browser SDK where operation time range logs would cause errors. See details: https://github.com/HuolalaTech/page-spy/pull/131.\n🐛 Fix an issue in the browser SDK where asynchronous copying could fail. See details: https://github.com/HuolalaTech/page-spy/pull/130.\n🐛 Fix the uni.request return value issue. See details: https://github.com/HuolalaTech/page-spy-web/issues/306.\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-1-1",
      "parent": "Changelog",
      "title": "v2.1.1",
      "content": "\n🆕 The browser-side SDK now supports gesture-based activation. See use guide:\nnew PageSpy({\n  ...,\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-1-0",
      "parent": "Changelog",
      "title": "v2.1.0",
      "content": "\n🆕 Refactor WholeBundlePlugin and updated the Replay Lab page on the official website. See details: https://github.com/HuolalaTech/page-spy/pull/125, https://github.com/HuolalaTech/page-spy-web/pull/304;\n🆕 Optimize the function for locating the source code. See details: https://github.com/HuolalaTech/page-spy-web/pull/300;\n🆕 Add System panel for mini-programs: https://github.com/HuolalaTech/page-spy/pull/123, https://github.com/HuolalaTech/page-spy-web/pull/299;\n🆕 Optimized compatibility of the offline logging feature for mini programs: https://github.com/HuolalaTech/page-spy/pull/127;\n🆕 Add position cache for floating ball: https://github.com/HuolalaTech/page-spy/pull/126;\n🆕 Add CSS feature detection in browser SDK: https://github.com/HuolalaTech/page-spy/pull/128;\n🐛 Fixed some issues.\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-0-2",
      "parent": "Changelog",
      "title": "v2.0.2",
      "content": "\n🐛 Fixed the issue where the default value of DataHarborPlugin caused download failure.\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-0-1",
      "parent": "Changelog",
      "title": "v2.0.1",
      "content": "\n🆕 DataHarborPlugin add onAfterUpload param to custom behavior after upload。See details: https://github.com/HuolalaTech/page-spy/pull/119;\n🐛 Fix some issues. See details: https://github.com/HuolalaTech/page-spy/pull/118 / https://github.com/HuolalaTech/page-spy/pull/120;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v2-0-0",
      "parent": "Changelog",
      "title": "v2.0.0",
      "content": "\n🆕 Revamped browser-side modal with support for custom theme colors and branding. Added a time-range log selector and a notes field. See details: https://github.com/HuolalaTech/page-spy/pull/113\n🆕 Added a method for mini-programs to trigger a modal displaying PageSpy information, with support for uploading offline logs. See details: https://github.com/HuolalaTech/page-spy/pull/112\n🐛 Fixed some issues.\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-9-6",
      "parent": "Changelog",
      "title": "v1.9.6",
      "content": "\n🆕 DataHarborPlugin added a new prototype method. See details: https://github.com/HuolalaTech/page-spy/pull/110;\n\n$harbor.pause(): Pause recording;\n$harbor.resume(): Resume recording, corresponding to pause();\n$harbor.reharbor(): Clear the recorded data and remakes it.\n\n\n🆕 Add new prompt for \"Object cannot be expanded\" on the replay page;\n🐛 Fixed the display of application/x-www-form-urlencoded payload. See details: https://github.com/HuolalaTech/page-spy-web/issues/267;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-9-5",
      "parent": "Changelog",
      "title": "v1.9.5",
      "content": "\n🆕 Add DockerHub image: https://hub.docker.com/r/huolalatech/page-spy-web;\n🆕 Support deploy with Baota and add deploy guide；\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-9-4",
      "parent": "Changelog",
      "title": "v1.9.4",
      "content": "\n🐛 Fix some issues;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-9-3",
      "parent": "Changelog",
      "title": "v1.9.3",
      "content": "\n🆕 The Network panel now supports keyword filtering. View details: https://github.com/HuolalaTech/page-spy-web/pull/262 ;\n🆕 The Console panel of the log replay page supports scroll following, optimize message notification. See details: https://github.com/HuolalaTech/page-spy-web/pull/264 ;\n🐛 SDK optimizes error messages for ErrorPlugin;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-9-2",
      "parent": "Changelog",
      "title": "v1.9.2",
      "content": "\n\nThe init parameters now include a dataProcessor option for filtering or processing data. See details: https://github.com/HuolalaTech/page-spy/pull/106;\n\nwindow.$pageSpy = new PageSpy({\n  ...,\n  dataProcessor: {\n    console: (data) => {\n      // log will be ignored if the content includes 'secret'\n      if (data.logs.some(i => typeof i === 'string' && i.includes('secret'))) return false;\n    },\n    network: (data) => {\n      // ignore metric requests\n      if (/(sentry|metric|collect)/.test(data.url)) return false\n    },,\n    storage: (data) => {\n      // change the cookie to \"******\" if the name starts with _\n      if (data.type === \"cookie\" && data.action === \"get\") {\n        data.data.forEach((i) => {\n          if (i.name.startsWith(\"_\")) {\n            i.value = \"*******\";\n          }\n        });\n      }\n    },\n  },\n});\n\n\n\n\n🆕 Adjusted the uploaded log data, see details: https://github.com/HuolalaTech/page-spy/pull/107;\n\n\n🆕 Interaction adjustments:\n\nClicking on the log replay progress bar now maintains the playback state. See details: https://github.com/HuolalaTech/page-spy-web/pull/258;\nThe table header supports dragging, see details: https://github.com/HuolalaTech/page-spy-web/pull/257;\nAdded support for recognizing the Huawei browser, see details: https://github.com/HuolalaTech/page-spy-web/pull/256;\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-9-1",
      "parent": "Changelog",
      "title": "v1.9.1",
      "content": "\n\n🆕 Added the serializeData: boolean option to the instantiation parameters, which specifies whether the SDK is allowed to serialize non-primitive data types when collecting offline data. Default is false. For more details, see: https://github.com/HuolalaTech/page-spy/pull/103.\nWhen enabled, data printed in the console can be expanded and viewed in the replay panel. Usage:\nwindow.$pageSpy = new PageSpy({\n  ...\n  // Note that serialization may have side effects, so it is disabled by default for safety;\n  serializeData: true\n})\n\n\n\n🆕 Optimized information display in the Network panel. For more details, see: https://github.com/HuolalaTech/page-spy-web/pull/239;\n\n\n🆕 The replay panel now supports canvas content. For more details, see: https://github.com/HuolalaTech/page-spy-web/pull/238;\n\n\n🆕 The left-side player during playback now shows \"click\" actions. The progress bar now only shows clicks and errors, with other data activities notified through the Tab. For more details, see: https://github.com/HuolalaTech/page-spy-web/pull/247;\n\n\n🐛 Fixed the interaction of the replay log list. For more details, see: https://github.com/HuolalaTech/page-spy-web/pull/242;\n\n\n🐛 Fixed several issues:\n\nServer-side cross-origin configuration not taking effect;\nSlow log deletion speed on the server side;\nOffline logs now record the full lifecycle of network requests;\nFormatted file names for SDK downloads;\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-9-0",
      "parent": "Changelog",
      "title": "v1.9.0",
      "content": "\n🆕 All brand new document page;\n🆕 The ability to dynamically execute code has been extracted from the mini-program SDK and encapsulated into an independent plugin, @huolala-tech/page-spy-plugin-mp-eval, in order to minimize the impact on the review process for mini-programs;\n🆕 Support miniprogram feature that transfer request payload to query string in GET request: https://github.com/HuolalaTech/page-spy-web/issues/199;\n🐛 Fix compatibility issue of getAccountInfoSync in miniprogram SDK: https://github.com/HuolalaTech/page-spy-web/issues/213;\n🐛 Fix type declaration of updateRoomInfo in miniprogram SDK: https://github.com/HuolalaTech/page-spy-web/issues/213;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-10",
      "parent": "Changelog",
      "title": "v1.8.10",
      "content": "This update primarily focuses on optimizing the \"Error Source Code Location\" feature. Specific changes include:\n🆕 Enhanced error source code location support in the \"Log Replay\" page;\n🆕 Added support for locating source code in console.xxx(Error) logs, in addition to captured errors. Details can be viewed in https://github.com/HuolalaTech/page-spy-web/pull/212;\n🆕 Provided an option to configure tab characters (\\t) in source code, allowing users to set 1 tab = N spaces;\n🐛 Fixed interaction issues with the logo. Details in https://github.com/HuolalaTech/page-spy-web/issues/211;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-9",
      "parent": "Changelog",
      "title": "v1.8.9",
      "content": "\n🆕 Support for debugging React Native applications, related https://github.com/HuolalaTech/page-spy-web/pull/190;\n🆕 Support for debugging HarmonyOS applications, related https://github.com/HuolalaTech/page-spy-web/pull/191 / https://github.com/HuolalaTech/page-spy/pull/88;\n🆕 Web applications now support viewing EventSource request and response data, with an optimized network panel layout, related https://github.com/HuolalaTech/page-spy-web/pull/206 / https://github.com/HuolalaTech/page-spy-web/issues/202 / https://github.com/HuolalaTech/page-spy-web/issues/183;\n🆕 Improved message types for faster debugging interface response, related https://github.com/HuolalaTech/page-spy-web/pull/201;\n🆕 Room list page now limits the display to a maximum of 30 panels, related https://github.com/HuolalaTech/page-spy-web/pull/204;\n🐛 Fixed several issues, related https://github.com/HuolalaTech/page-spy-web/issues/205 / https://github.com/HuolalaTech/page-spy/pull/95;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-8",
      "parent": "Changelog",
      "title": "v1.8.8",
      "content": "\n🆕 Refactor the \"/replay\" page, making interactions smoother when playing back long and large offline log data, see https://github.com/HuolalaTech/page-spy-web/pull/186;\n🆕 Adapted for \"UniApp packaged as a native App\", see https://github.com/HuolalaTech/page-spy-web/pull/197;\n🐛 Fixed an issue where a circual-reference in request headers caused the Network plugin to malfunction, see https://github.com/HuolalaTech/page-spy-web/pull/193;\n🐛 Fixed the display of HTML tags on the Page panel, see https://github.com/HuolalaTech/page-spy-web/pull/196;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-7",
      "parent": "Changelog",
      "title": "v1.8.7",
      "content": "\n🆕 The SDK doesn't send message until the developer enter room, see https://github.com/HuolalaTech/page-spy/pull/84;\n🐛 Fix the issue where reconnection after connection timeout;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-6",
      "parent": "Changelog",
      "title": "v1.8.6",
      "content": "\n\n🆕 After disconnection, the SDK will exponentially retry establishing connection, with a maximum interval not exceeding (1.5 ** 4 * 2000)ms, see https://github.com/HuolalaTech/page-spy/pull/78;\n\n\n🆕 The SDK instantiation adds a new parameter useSecret, with a default value of false. When set to true, the SDK will generate a 6-digit random password for the room. The debugging terminal needs to know the client password before entering the debugging room, see https://github.com/HuolalaTech/page-spy/pull/78;\n\n\n🆕 Support for dynamically updating the title / project parameters by using window.$pageSpy.updateRoomInfo({ title: 'xxx', project: 'xxx' }), see https://github.com/HuolalaTech/page-spy/pull/78;\n\n\n🆕 After dragging the floating ball rendered by the browser SDK to the top, bottom, left, or right side, it will automatically retract, see https://github.com/HuolalaTech/page-spy/pull/80;\n\n\n🆕 Support for get uploaded url, see https://github.com/HuolalaTech/page-spy/pull/81:\nwindow.$harbor = new DataHarborPlugin()\nPageSpy.registerPlugin(window.$harbor)\n\nasync function uploadLogManually() {\n  const debugUrl = await window.$harbor.onOfflineLog('upload')\n  console.log({ debugUrl })\n}\n\n\n\n🆕 The page-spy-api no longer serializes data, resulting in a significant performance improvement;\n\n\n🐛 fix some problems, see: https://github.com/HuolalaTech/page-spy-web/issues/172, https://github.com/HuolalaTech/page-spy/pull/79;\n\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-5",
      "parent": "Changelog",
      "title": "v1.8.5",
      "content": "\n🆕 remove the unsupported arch binary;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-4",
      "parent": "Changelog",
      "title": "v1.8.4",
      "content": "\n🆕 Optimize the message cache , see https://github.com/HuolalaTech/page-spy-web/issues/169\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-3",
      "parent": "Changelog",
      "title": "v1.8.3",
      "content": "\n\n🆕 Support debug Taro miniprogram, see @huolala-tech/page-spy-taro;\n\n\n🆕 Support debug HarmonyOS App, see @huolala/page-spy-harmony;\n\nDeveloped based on OpenHarmony API 9.\n\n\n\n🐛 Fix response loss when an error occurs in NetworkPlugin\n\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-2",
      "parent": "Changelog",
      "title": "v1.8.2",
      "content": "\n🐛 Fixed the issue where the npm package from the 1.8.0 and 1.8.1 version couldn't be installed on certain system architectures;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-1",
      "parent": "Changelog",
      "title": "v1.8.1",
      "content": "\n🆕 Added pre-submission reminders to the mini-program integration documentation;\n🆕 Log replay page: Progress bar displays aggregated activity events.\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#v1-8-0",
      "parent": "Changelog",
      "title": "v1.8.0",
      "content": "\n🆕 DataHarborPlugin now supports uploading offline logs, and the debugging end has added a https://<your-pagespy-host>/#/log-list page;\n🆕 Enhanced functionality on the offline log replay page, supporting layout adjustment via drag-and-drop and playback speed adjustment;\n🆕 The mini-program now supports sending code for remote execution on the client side;\n"
    },
    {
      "language": "en",
      "route": "/docs/changelog#More---",
      "parent": "Changelog",
      "title": "More...",
      "content": "For earlier release details, please visit the Release page."
    },
    {
      "language": "en",
      "route": "/docs/data-harbor#api",
      "parent": "DataHarborPlugin",
      "title": "DataHarborPlugin API",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/data-harbor#constructor",
      "parent": "DataHarborPlugin",
      "title": "constructor()",
      "content": "\n\nType\ninterface DataHarborConfig {\n  // Specify the maximum bytes of offline log in memory.\n  // Default 10MB.\n  maximum?: number; // Only supported in browser\n\n  // Specify which types of data to cache\n  caredData?: Record<DataType, boolean>;\n\n  // Specify the offline log filename, with the default being named according to the current time\n  filename?: () => string;\n\n  // Custom the behavior of download\n  onDownload?: (data: CacheMessageItem[]) => void; // Only supported in browser\n\n  // The callback of upload done, which can be used to extend\n  // additional functionalities, such as notifying the developer\n  onAfterUpload?: (replayUrl: string, remark: string) => void;\n}\n\ndeclare class DataHarborPlugin implements PageSpyPlugin {\n  constructor(config?: DataHarborConfig);\n}\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/data-harbor#onOfflineLog",
      "parent": "DataHarborPlugin",
      "title": "Operate log manually",
      "content": "Manually download / upload offline logs.\n\nType\ninterface WholeLogActionParams {\n  clearCache?: boolean;\n  remark?: string;\n}\n\ninterface PeriodLogActionParams {\n  startTime: number;\n  endTime: number;\n  remark?: string;\n}\n\n// NOTE!\n// - The browser supports the following 4 methods;\n// - The mini-program currently only supports the upload() method;\ndeclare class DataHarborPlugin {\n  // Full logs\n  upload(params?: WholeLogActionParams): Promise<string>;\n  download(params?: WholeLogActionParams): Promise<void>;\n\n  // time-period of logs\n  uploadPeriods(params: PeriodLogActionParams): Promise<string>;\n  downloadPeriods(params: PeriodLogActionParams): Promise<void>;\n}\n\nIf the automatically rendered UI controls are hidden, or if you wish to automatically trigger operations on offline logs at certain times, this method can be used to achieve that.\nWhen operating on full logs, each time the user operates the log upload/download through the buttons on the modal, it is the complete log from the beginning to the end of the current session. However, when called manually, the recorded log data will be cleared by default and recording will start anew. You can control this by setting clearCache: false in the second parameter.\nOperating on time-period logs will not clear any data.\nAfter the upload is completed, the replay URL will be returned and printed to the console.\n\n\nExample\nwindow.$harbor = new DataHarborPlugin();\n\n// Upload full logs and clear data and re-record\nconst url = await window.$harbor.upload();\n\n// Upload the logs of the most recent three minutes.\nconst now = Date.now();\nconst url = await window.$harbor.uploadPeriods({\n  startTime: now - 3 * 60000,\n  endTime: now,\n  remark: 'Add a remark to the problems that occur in this section of the log.'\n});\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/data-harbor#pause",
      "parent": "DataHarborPlugin",
      "title": "pause()",
      "content": "Pause recording.\n\nType\ndeclare class DataHarborPlugin {\n  pause(): void;\n}\n\nMore flexible control of logging behavior.\nThe data generated by the program after the pause will not be recorded. Call $harbor.resume() to resume.\n\n\nExample\nwindow.$harbor = new DataHarborPlugin();\n\n// pause\nwindow.$harbor.pause();\n\n// resume\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/data-harbor#resume",
      "parent": "DataHarborPlugin",
      "title": "resume()",
      "content": "Resume records.\n\nType\ndeclare class DataHarborPlugin {\n  resume(): void;\n}\n\nMore flexible control of logging behavior.\n\n\nDetails\nData during <Pause - Resume> will not be recorded.\n\n\nExample\nwindow.$harbor = new DataHarborPlugin();\n\n// pause\nwindow.$harbor.pause();\n\n// resume\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/data-harbor#reharbor",
      "parent": "DataHarborPlugin",
      "title": "reharbor()",
      "content": "Clear the recorded data and continue recording. In short, remastered.\n\nType\ndeclare class DataHarborPlugin {\n  reharbor(): void;\n}\n\n\n\nExample\nwindow.$harbor = new DataHarborPlugin();\n\nwindow.$harbor.reharbor();\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/deploy-guide#deployments",
      "parent": "Guide",
      "title": "Deployments",
      "content": "\nDeploy with Node\nDeploy with Docker\nInstall on Baota\n"
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-baota#prerequire",
      "parent": "Deploy with Baota",
      "title": "Prerequisites",
      "content": "Install the Baota Panel by visiting the Baota Panel official website and selecting the appropriate script for installation."
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-baota#install",
      "parent": "Deploy with Baota",
      "title": "Installation",
      "content": "\n\nGo to \"Docker - App Store,\" find PageSpy, and click install.\n\n\nSet the basic information and click \"Confirm.\"\n\n\nThe panel will automatically initialize the app, which takes about 1 minutes. After initialization, the service will be accessible via port 6752.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-baota#next",
      "parent": "Deploy with Baota",
      "title": "Next",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-docker#install",
      "parent": "Deploy with Docker",
      "title": "Install",
      "content": "docker run -d --restart=always -v ./log:/app/log -v ./data:/app/data -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\nAfter completion, open the browser and visit http://localhost:6752 to access the service."
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-docker#video",
      "parent": "Deploy with Docker",
      "title": "Video tutorial",
      "content": "{' '}"
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-docker#next",
      "parent": "Deploy with Docker",
      "title": "Next",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-node#install",
      "parent": "Deploy with Node",
      "title": "Install",
      "content": "After completion, open the browser and visit http://localhost:6752 to access the service."
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-node#video",
      "parent": "Deploy with Node",
      "title": "Vide tutorial",
      "content": "{' '}"
    },
    {
      "language": "en",
      "route": "/docs/deploy-with-node#next",
      "parent": "Deploy with Node",
      "title": "Next",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/faq#module",
      "parent": "FAQ",
      "title": "PageSpy Module Composition",
      "content": "Dependency and interaction diagram between PageSpy modules:"
    },
    {
      "language": "en",
      "route": "/docs/faq#compatibility",
      "parent": "FAQ",
      "title": "Compatibility of PageSpy",
      "content": "\nThe compatibility targets for browser SDK are set to [\"chrome > 75\",\"safari > 12\", \"> 0.1%\", \"not dead\",\"not op_mini all\"]; for other SDKs, refer to their respective repositories.\nDebugging primarily targets developers and maintains an open attitude towards new browser features. Therefore, it is recommended to use the latest browser versions with compatibility targets set to [\"last 2 chrome version\", \"last 2 firefox version\", \"last 2 safari version\"].\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#hide-logo",
      "parent": "FAQ",
      "title": "How to Hide the SDK Rendered Logo?",
      "content": "window.$pageSpy = new PageSpy({\n  // ... other configuration parameters\n  autoRender: false,\n});\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#init-params",
      "parent": "FAQ",
      "title": "Instantiation Parameters and Their Purposes?",
      "content": "See PageSpy API."
    },
    {
      "language": "en",
      "route": "/docs/faq#update-info",
      "parent": "FAQ",
      "title": "How to Update Initialization Parameters? ",
      "content": "PageSpy provides a \"Device ID\" for identifying devices and also offers project / title for developers to customize information during initialization to aid in client identification. If you wish to update these parameters after initialization, follow these steps:window.$pageSpy = new PageSpy(...);\n\n// Calling updateRoomInfo updates project / title\nwindow.$pageSpy.updateRoomInfo({ project: 'xxx', title: 'xxx' });\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#framework",
      "parent": "FAQ",
      "title": "How to Integrate with xxx Framework? ",
      "content": "PageSpy has published integration guides for all popular frameworks on the CodeSandbox platform. You can experience them online:\nReact：CodeSandbox - PageSpy in React\nVue：CodeSandbox - PageSpy in Vue\nSvelte：CodeSandbox - PageSpy in Svelte\nAngular：CodeSandbox - PageSpy in Angular\nNextjs：CodeSandbox - PageSpy in Nextjs\nNuxtjs：CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#test-domain",
      "parent": "FAQ",
      "title": "Is pagespy.jikejishu.com an Officially Provided Domain? Will It Always Be Available? ",
      "content": "https://pagespy.jikejishu.com is a temporary service set up by us to allow everyone to experience and learn PageSpy online. We do not guarantee 24-hour availability, data security, or assume responsibility for any losses. We strongly recommend deploying privately or within an intranet after experiencing."
    },
    {
      "language": "en",
      "route": "/docs/faq#server-port",
      "parent": "FAQ",
      "title": "Why Can Local Port 6752 Be Accessed, But Not When Deployed on a Server? ",
      "content": "Check the server's firewall or security group rules to ensure port 6752 is open."
    },
    {
      "language": "en",
      "route": "/docs/faq#debug-disabled",
      "parent": "FAQ",
      "title": "What Does \"No client in the current connection\" Mean on the Debug Button? ",
      "content": "This usually indicates that the SDK successfully created a room but failed to join it via WebSocket. To troubleshoot:\nCheck the console of the client where the SDK is running for any WebSocket connection failure messages.\nVerify server configuration if console shows \"WebSocket connect failed\" related errors.\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#nginx",
      "parent": "FAQ",
      "title": "How Should nginx Be Configured During Deployment? ",
      "content": "Here's an nginx configuration for https://pagespy.jikejishu.com:server {\n  listen 443 ssl;\n  server_name pagespy.jikejishu.com;\n\n  if ($scheme != https) {\n      rewrite ^(.*)$  https://$host$1 permanent;\n  }\n\n  ssl_certificate /etc/letsencrypt/live/pagespy.jikejishu.com/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/pagespy.jikejishu.com/privkey.pem;\n\n  location / {\n      proxy_pass http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n  }\n}\n\nserver {\n  if ($host = pagespy.jikejishu.com) {\n      return 301 https://$host$request_uri;\n  }\n\n  listen 80;\n  listen [::]:80;\n  server_name pagespy.jikejishu.com;\n  return 404;\n}\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#sub-path",
      "parent": "FAQ",
      "title": "How to Deploy to a Subpath? ",
      "content": "Starting from version 1.5.4, you can deploy the service to a subpath. The installation process remains unchanged, but nginx configuration needs adjustment:server {\n  # ...\n\n  # <sub-path> should be replaced with the subpath you intend to deploy\n  location /<sub-path>/  {\n      # Ensure <sub-path> is consistent with above\n      rewrite ^/<sub-path>/(.*)$ /$1 break;\n      proxy_pass            http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n      proxy_set_header      Host $host;\n      proxy_set_header      X-Real-IP $remote_addr;\n      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # Ensure <sub-path> is consistent with above\n  location /<sub-path> {\n      return 301 $scheme://$host$request_uri/;\n  }\n}\nAfter adjusting the configuration, restart nginx to access via the subpath. During instantiation, manually pass api and clientOrigin to inform the SDK of the deployment address:window.$pageSpy = new PageSpy({\n  // For example api: \"example.com/pagespy\"\n  api: '<host>/<sub-path>',\n\n  // For example clientOrigin: \"https://example.com/pagespy\"\n  clientOrigin: '<scheme>://<host>/<sub-path>',\n});\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#basic-auth",
      "parent": "FAQ",
      "title": "How Can the Debug Terminal Be Protected with Some Authentication Mechanism to Allow Access Only to Authenticated Developers? ",
      "content": "You can protect the server by setting an IP whitelist in nginx or using HTTP Authorization:\n\nNginx IP whitelist configuration example:\nserver {\n  location / {\n    # Allow who can access\n    allow <ip>;\n\n    # Deny all other clients except allow\n    deny all;\n  }\n}\n\n\n\nNginx configuration for HTTP Authorization, requiring username and password for access.\nGenerate username and password file using htpasswd:\nsudo htpasswd -c /etc/nginx/.htpasswd username\n\nNginx configuration:\nserver {\n  location / {\n    auth_basic \"请输入用户名和密码以访问 PageSpy 服务\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n\n  location ~ /(api|page-spy|plugin) {\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n}\n\nRestart nginx.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#extension",
      "parent": "FAQ",
      "title": "Don't want to integrate manually into the project, is there a way to do it without invading the business project code? ",
      "content": "PageSpy has prepared a browser extension for everyone, which provides the following features:\nAutomatically injects the latest version of the SDK.\nAutomatically completes the instantiation operation.\nProvides rules for domain injection configuration.\nClick here to use: HuolalaTech/page-spy-extension"
    },
    {
      "language": "en",
      "route": "/docs/faq#tampermonkey",
      "parent": "FAQ",
      "title": "Can I use a Tampermonkey script?",
      "content": "Refer to the following content:// ==UserScript==\n// @name         Inject PageSpy Script\n// @namespace    http://tampermonkey.net/\n// @version      0.1\n// @description  Inject script on xxx.yyy\n// @author       You\n// @match        <match rules, such as example.com>\n// @grant        none\n// ==/UserScript==\n\n(function () {\n  'use strict';\n\n  var script1 = document.createElement('script');\n  script1.setAttribute('crossorigin', 'anonymous');\n  // Replace the SDK URL with the actual project URL\n  script1.src = 'https://pagespy.jikejishu.com/page-spy/index.min.js';\n\n  var script2 = document.createElement('script');\n  script2.textContent = 'window.$pageSpy = new PageSpy();';\n\n  document.head.prepend(script1);\n  script1.onload = () => {\n    document.head.appendChild(script2);\n  };\n})();\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#http-error",
      "parent": "FAQ",
      "title": "Business project is deployed on HTTPS, PageSpy is deployed on HTTP, what should I do if there is a console error? ",
      "content": "Browsers block loading HTTP resources from HTTPS sites because HTTPS provides encryption and security, while HTTP transmits data in plaintext, posing security risks.It is recommended to upgrade PageSpy to HTTPS service directly to resolve this issue perfectly."
    },
    {
      "language": "en",
      "route": "/docs/faq#prod-debug",
      "parent": "FAQ",
      "title": "How to debug a specific user individually? ",
      "content": "The simplest solution is to have users use the PageSpy browser extension, which is suitable when the client is highly cooperative and it's a PC project. However, this condition is quite stringent.So what if a H5 project in production wants to use PageSpy? It's clearly impractical to enable it for all users.PageSpy's effective process involves just two steps:\nInject SDK via <script> tag in the head.\nInstantiate.\nPageSpy does not affect the project until the second step of instantiation. There are two approaches to debug a specific user:\n\nDynamic HTML Response: If we can obtain a unique identifier for the user when requesting HTML, we can dynamically decide whether to inject <script> and instantiate logic before returning HTML to the user.\n\n\nUser Gesture Activation: This typically requires the user's active cooperation. By default, inject the SDK but do not instantiate it, allowing the user to trigger debugging after a special gesture.\n\nNote: Besides technical implementation, attention to legal compliance and security risks is essential."
    },
    {
      "language": "en",
      "route": "/docs/faq#page-principle",
      "parent": "FAQ",
      "title": "Page Panel Principle ",
      "content": "The Page panel renders document.documentElement.outerHTML of the client to an iframe on the debugging end, allowing direct element inspection via local console."
    },
    {
      "language": "en",
      "route": "/docs/faq#page-interactive",
      "parent": "FAQ",
      "title": "Can the Page panel rendered on the client side interact directly? ",
      "content": "It cannot interact directly. If interaction is needed, try entering code at the bottom of the Console panel and then checking the Page panel for interface feedback."
    },
    {
      "language": "en",
      "route": "/docs/faq#page-style",
      "parent": "FAQ",
      "title": "Page panel style is incorrect? ",
      "content": "The discrepancy in rendering environments between client and debugging end (e.g., client's browser version is Chrome 75, debugging end's is Chrome 120) or network restrictions when debugging end accesses client-referenced resources may cause style discrepancies.Thus, styles are for reference only."
    },
    {
      "language": "en",
      "route": "/docs/faq#page-reset",
      "parent": "FAQ",
      "title": "Can the Page panel completely restore client content 100%? ",
      "content": "The SDK can \"screenshot\" the page and send it to the debugging end. However, due to:\nLarger data volume for images compared to text, increasing network transmission overhead.\nAdding to SDK size and complexity.\nFor \"style errors,\" remote collaboration allows testers to provide precise feedback to developers.\nTherefore, Page panel styles are for reference only."
    },
    {
      "language": "en",
      "route": "/docs/faq#api-config",
      "parent": "FAQ",
      "title": "How to modify API service configuration? ",
      "content": "When you execute page-spy-api via the NPM package deployment method in the command line, a default configuration file config.json will be generated in the running directory. This file supports configuring the running port and multi-instance deployment:\n\nModify configuration:\n{\n  \"port\": \"6752\", // Listening port\n  \"maxLogFileSizeOfMB\": 10240, // Log replay file save size (MB)\n  \"maxLogLifeTimeOfHour\": 720, // Maximum log replay file save time (hour)\n  \"notAllowedDeleteLog\": false, // Whether log replay deletion is allowed\n  \"maxRoomNumber\": 500, // Maximum allowed number of rooms\n  \"corsConfig\": {\n    \"allowOrigins\": [\"https://test.huolala.com\"], // Default configuration allows all domains for cross-origin requests\n    \"allowHeaders\": [\n      \"Origin\",\n      \"Authorization\",\n      \"Content-Length\",\n      \"X-Request-Id\",\n      \"Content-Type\",\n      \"Referer\",\n      \"User-Agent\",\n      \"Host\"\n    ],\n    \"allowMethods\": [\n      \"HEAD\",\n      \"POST\",\n      \"GET\",\n      \"OPTIONS\",\n      \"PUT\",\n      \"DELETE\",\n      \"UPDATE\"\n    ],\n    \"exposeHeaders\": [\"X-Request-Id\"]\n  }\n}\n\n\n\nMulti-instance deployment (requires version 1.5.0 or higher):\nThe rpcAddress configuration is for multi-instance deployment, where ip and port are multiple machine IPs and RPC ports. Multiple instances communicate via RPC, and the program starts RPC services based on machine IPs to avoid message confusion due to duplicate IPs.\n{\n  \"port\": \"6752\",\n  \"rpcAddress\": [\n    {\n      \"ip\": \"192.168.123.1\",\n      \"port\": \"20008\"\n    },\n    {\n      \"ip\": \"192.168.123.2\",\n      \"port\": \"20008\"\n    }\n  ]\n}\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#pnpm",
      "parent": "FAQ",
      "title": "Why does a globally installed package using pnpm cause errors when starting with pm2? ",
      "content": "Globally installed packages with pnpm are wrapped by a shell script used by pnpm. Thus, when executing pm2 start page-spy-api, it finds a shell script, and pm2 cannot interpret and execute it, resulting in an error.Using yarn or npm installation resolves this issue. See related discussion: Unitech/pm2#5416."
    },
    {
      "language": "en",
      "route": "/docs/faq#upgrade",
      "parent": "FAQ",
      "title": "How to upgrade to the latest version after a new release? ",
      "content": "If using Docker deployment:# Update image\ndocker pull ghcr.io/huolalatech/page-spy-web:latest\n\n# Stop running PageSpy container\ndocker stop pageSpy && docker rm -f pageSpy\n\n# Run again\ndocker run -d --restart=always -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\nIf using NPM Package deployment:# Update package (yarn)\nyarn global upgrade @huolala-tech/page-spy-api@latest\n\n# Update package (npm)\nnpm install -g @huolala-tech/page-spy-api@latest\n\n# Restart with pm2\npm2 restart page-spy-api\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#auto-destroy",
      "parent": "FAQ",
      "title": "Under what conditions will a room connection be automatically destroyed? ",
      "content": "\nView configuration: https://github.com/HuolalaTech/page-spy-api/blob/master/room/local_room.go#L297-L323\n\nIf a room is created and no SDK or debugging end enters, it will be destroyed after 1 minute (this scenario does not exist in actual use).\nIf both SDK and debugging end disconnect, it will be destroyed after 1 minute.\nIf there is no data message interaction, it will be destroyed after 5 minutes.\nIf the connection duration exceeds 1 hour, it will be automatically destroyed.\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#alipay-global",
      "parent": "FAQ",
      "title": "Why can't Alipay Mini Program get global objects like my.getCurrentPages() when executing remote code? ",
      "content": "Due to historical reasons, Alipay Mini Program restricts access to global objects. This can be set via the mini program configuration file or Alipay Mini Program IDE:\nIDE: Details -> Compilation Configuration -> Global Object (global/globalThis) Access Policy: Accessible (recommended)\nConfiguration file: https://opendocs.alipay.com/mini/03dbc3?pathHash=e876dc50#globalObjectMode\n"
    },
    {
      "language": "en",
      "route": "/docs/faq#offline-log",
      "parent": "FAQ",
      "title": "Why are uploaded file logs missing? ",
      "content": "\nUploaded file logs are by default saved for up to the latest 10 GB and 30 days, customizable via configuration modification.\nUploaded logs are saved in the log directory under the runtime directory. In Docker runtime, if Docker is destroyed, logs will also be lost. Use directory mapping -v ./log:/app/log -v ./data:/app/data for persistence.\n"
    },
    {
      "language": "en",
      "route": "/docs/harmony#step-1",
      "parent": "Harmony App",
      "title": "Step 1",
      "content": "Install the dependency in the HAP directory to be debugged:# API 9\nohpm install @huolala/page-spy-harmony@^1.0.0\n\n# API 11\nohpm install @huolala/page-spy-harmony@^2\n"
    },
    {
      "language": "en",
      "route": "/docs/harmony#step-2",
      "parent": "Harmony App",
      "title": "Step 2",
      "content": "Import and initialize the SDK at an appropriate place. Here, EntryAbility is used as an example. The initialization parameters provide optional configuration options to customize the SDK's behavior:import { PageSpy } from '@huolala/page-spy-harmony';\nimport axiosInstance from 'path/to/your/axios-instance';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    new PageSpy({\n      context: this.context,\n      api: \"{deployPath}\",\n      enableSSL: true,\n      axios: axiosInstance\n    })\n  }\n}\nThat's the complete process to integrate PageSpy into a Harmony App project.Once integrated, click on the top menu Debugging to use it!"
    },
    {
      "language": "en",
      "route": "/docs/introduction#what-is-page-spy",
      "parent": "Introduction",
      "title": "What is PageSpy?",
      "content": "PageSpy is an open-source debugging platform compatible with various platforms, including Web, Mini Program, React Native, and Harmony OS Apps. It encapsulates native APIs, filtering and transforming the parameters when native methods are invoked, and organizes them into a specific format for the debugging client to consume. The debugging client then provides a devtools UI to display this data."
    },
    {
      "language": "en",
      "route": "/docs/introduction#why-is-page-spy",
      "parent": "Introduction",
      "title": "Why is PageSpy?",
      "content": "\nA picture is worth a thousand words。\n"
    },
    {
      "language": "en",
      "route": "/docs/introduction#when-to-use",
      "parent": "Introduction",
      "title": "When to Use?",
      "content": "PageSpy shines in any scenario where local console debugging is not possible! Let's explore some use cases:\n\nLocal Debugging of H5 and Webview Applications: While some products provide panels for viewing information on H5, small screens in mobile often make operations inconvenient, the display less user-friendly, and information might get truncated.\n\n\nRemote Work and Cross-Region Collaboration: Traditional communication methods like emails, phone calls, and video conferences often suffer from low efficiency, incomplete fault information, and can easily lead to misunderstandings and misjudgments.\n\n\nWhite Screen Issues on User Terminals: Traditional methods for locating issues, such as data monitoring and log analysis, rely on the troubleshooting team understanding the business requirements and technical implementations.\n\nYep, the goal of PageSpy is can help the people which in like above cases."
    },
    {
      "language": "en",
      "route": "/docs/introduction#feature-overview",
      "parent": "Introduction",
      "title": "Feature Overview",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/introduction#online-debugging",
      "parent": "Introduction",
      "title": "Online Debugging",
      "content": "\nConsole Panel: Displays logs from console.<log | info | warn | error | debug>, and allows sending code to be executed on the client side.\n\nNetwork Panel: Shows information about network requests made by the client.\n\nElement Panel: Displays the current client interface and allows viewing the HTML node tree.\n\nStorage Panel: Allows viewing local cache data of the client.\n\nSystem Panel: Displays the client's system information and checks for compatibility.\nAdditionally, you will receive real-time notifications when new data is available or existing data changes."
    },
    {
      "language": "en",
      "route": "/docs/introduction#offline-debugging",
      "parent": "Introduction",
      "title": "Offline Debugging",
      "content": "The replay progress is under your control. As the replayer plays, you can view the client's operation trajectory and the corresponding data."
    },
    {
      "language": "en",
      "route": "/docs/miniprogram#step-1",
      "parent": "Miniprogram",
      "title": "Step 1",
      "content": "Install the dependencies in the project. We provide SDKs for several mini-program platforms. Please install according to your needs:"
    },
    {
      "language": "en",
      "route": "/docs/miniprogram#step-2",
      "parent": "Miniprogram",
      "title": "Step 2",
      "content": "Add the PageSpy service domain name to the whitelist of http and websocket requests in the mini-program. Note that except for the development environment, the mini-program requires the use of https and wss protocols:https://<your-pagespy-host>\nwss://<your-pagespy-host>\n"
    },
    {
      "language": "en",
      "route": "/docs/miniprogram#step-3",
      "parent": "Miniprogram",
      "title": "Step 3",
      "content": "Import the SDK in the entry file and instantiate it. The initialization parameters provide optional configuration to customize the behavior of the SDK:import PageSpy from '@huolala-tech/page-spy-wechat';\n\nconst $pageSpy = new PageSpy({\n  api: \"{deployPath}\",\n})\n"
    },
    {
      "language": "en",
      "route": "/docs/miniprogram#debugging",
      "parent": "Miniprogram",
      "title": "Debugging panel",
      "content": "Call the showPanel() method on the created PageSpy instance to pop up a debugging menu for assistance with debugging:<img src={mpPanelImg} style={{ maxWidth: 320 }} />That's the complete process to integrate PageSpy into a mini-program project."
    },
    {
      "language": "en",
      "route": "/docs/offline-log#why",
      "parent": "Offline Log",
      "title": "Why",
      "content": "Previously, PageSpy's online debugging solved many tricky problems, but there was a prerequisite for using PageSpy: \"The client and the debugger must be online simultaneously.\" This prerequisite limited the use cases for PageSpy, for example:\nTwo people (e.g. developer and tester) are required simultaneously to debug a problem.\nThe connection is lost if the client moves to the background during debugging.\nIt also imposed constraints on PageSpy itself, such as:\nConsideration for the size of collected data and the network transmission load.\nTo address these issues and provide greater flexibility, PageSpy introduced the log replay feature in version 1.7.3!"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#where",
      "parent": "Offline Log",
      "title": "Where do the logs come from?",
      "content": "After PageSpy's SDK supported plugin registration, the development team quickly advanced the DataHarborPlugin development.\nData Harbor, the harbor of data.\nConcept: The data generated by PageSpy is continuously sent to the \"data harbor\". After organizing, packaging, and compressing the data, the \"data port\" stores the data in \"containers\" (memory or local temp file), awaiting further instructions.\nIt internally listens for the \"public-data\" event (see what is the \"public-data\" event?) to enable offline data caching. It also provides features to handle log data from the SDK-rendered component. When an issue is found on the client, testers can directly upload / download the data. This innovation breaks the previous requirement of having \"the client and the debugger online simultaneously.\""
    },
    {
      "language": "en",
      "route": "/docs/offline-log#how-to-use",
      "parent": "Offline Log",
      "title": "How to Use",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/offline-log#browser",
      "parent": "Offline Log",
      "title": "Used in browser",
      "content": "\nIf you only need the offline log replay functionality of PageSpy, we recommend using O-Spy for a simpler integration.\n"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#step-1",
      "parent": "Offline Log",
      "title": "Step 1: Client-side SDK and plugin integration",
      "content": "<html>\n  <head>\n    <!-- 1. Load PageSpy -->\n    <script src=\"https://<your-pagespy-host>/page-spy/index.min.js\"></script>\n\n    <!-- 2. Load DataHarbor plugin to cache offline data and download or upload log data -->\n    <script src=\"https://<your-pagespy-host>/plugin/data-harbor/index.min.js\"></script>\n\n    <!-- 3. Optionally, load the RRWeb plugin to record user interaction traces into offline logs -->\n    <script src=\"https://<your-pagespy-host>/plugin/rrweb/index.min.js\"></script>\n\n    <script>\n      // 4. Register plugins, see config details at: https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-data-harbor\n      PageSpy.registerPlugin(new DataHarborPlugin(config));\n      PageSpy.registerPlugin(new RRWebPlugin());\n\n      // 5. Instantiate PageSpy\n      window.$pageSpy = new PageSpy({\n        // To avoid establishing a real-time connection between the SDK and the debugger, enable offline mode\n        // offline: true\n      });\n    </script>\n  </head>\n</html>\nAfter successful integration, a modal with upload and download buttons should appear when clicking on the client-rendered component."
    },
    {
      "language": "en",
      "route": "/docs/offline-log#step-2",
      "parent": "Offline Log",
      "title": "Step 2: Replay the logs",
      "content": "Go to the debugger, click the top menu \"Debugging - Log Replay\" to enter the replay list page. Select the JSON data uploaded / downloaded in the previous step to start replaying!"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#plugins",
      "parent": "Offline Log",
      "title": "Using with Other Plugins",
      "content": "DataHarborPlugin mainly collects and handles data. Additionally, PageSpy provides:\nRRWebPlugin: Uses rrweb to record DOM mutations. In the \"Log Replay\" panel on the left side of the debugger, devepler can see the user interaction traces.\n"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#use-ospy",
      "parent": "Offline Log",
      "title": "Using O-Spy",
      "content": "The O-Spy SDK is plug and play, no deployment required. It packages PageSpy, DataHarborPlugin, and RRWebPlugin. It includes the best practice configurations for using PageSpy in offline mode and supports custom themes.It is framework-agnostic, so you can choose any method to integrate it into your project.import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';Once successfully integrated, you will see a draggable \"Issue Feedback\" component appear in the bottom right corner."
    },
    {
      "language": "en",
      "route": "/docs/offline-log#customize-example",
      "parent": "Offline Log",
      "title": "Custom Theme Example",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#mp",
      "parent": "Offline Log",
      "title": "Used in mini-program",
      "content": "The Log Replay feature also works in Mini Program. Please follow the steps below:"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#mp-step-1",
      "parent": "Offline Log",
      "title": "Step 1: Install the DataHarbor plugin for miniprogram ",
      "content": "yarn add @huolala-tech/page-spy-plugin-mp-data-harbor\n"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#mp-step-2",
      "parent": "Offline Log",
      "title": "Step 2: Register the plugin:",
      "content": "import PageSpy from '@huolala-tech/page-spy-wechat';\nimport DataHarborPlugin from '@huolala-tech/page-spy-plugin-mp-data-harbor';\n\n// register the plugin, see config details at：https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-mp-data-harbor\nconst $dataHarborPlugin = new DataHarborPlugin(config)\nPageSpy.registerPlugin($dataHarborPlugin);\n\nconst $pageSpy = new PageSpy({\n  // ...\n})\n\n"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#mp-step-3",
      "parent": "Offline Log",
      "title": "Step 3: Upload Offline Logs",
      "content": "There are two ways to upload offline logs:\nCall the upload() method of the plugin instance directly:\n$dataHarborPlugin.upload().then(() => {\n  console.log('Upload successfully');\n})\n\nWith the DataHarbor plugin registered, there will be a new action button for offline log uploading on PageSpy panel:\n"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#diff",
      "parent": "Offline Log",
      "title": "Differences",
      "content": "\n\nDOM recording is not supported in miniprogram env, thus there is no RRWebPlugin for miniprogram.\n\n\nThe offline log in miniprogram env supports uploading only, no downloading.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/offline-log#faq",
      "parent": "Offline Log",
      "title": "FAQ",
      "content": "\nHow to upload / download logs manually?\nClick to see.\nWhere is offline log data stored?\nAfter DataHarborPlugin receives the data, it first places it in an array in memory. When the data volume in the array reaches a threshold, it writes the data to a temporary file. By default, this threshold is 10MB. You can also configure it yourself:new DataHarborPlugin({\n  maximum: 1 * 1024 * 1024, // Write to a temporary file when the data in memory reaches 1MB\n})\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#api",
      "parent": "Pagespy",
      "title": "PageSpy API",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/pagespy#constructor",
      "parent": "Pagespy",
      "title": "constructor()",
      "content": "Create a PageSpy instance.\n\nType\ndeclare class PageSpy {\n  constructor(config: InitConfig)\n}\n\nThe constructor accepts a config object as an initialization parameter.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-api",
      "parent": "Pagespy",
      "title": "config.api",
      "content": "Server address.\n\nType: string\n\n\nDetails\n\n\nThe SDK automatically determines the server address api and the debug endpoint clientOrigin based on the import path. For example, if you include the SDK with <script src=\"https://example.com/page-spy/index.min.js\">, the SDK will internally set:\n\napi: \"example.com\"\nclientOrigin: \"https://example.com\"\n\nIf your service is deployed elsewhere, you need to manually override this field.\n\n\n  \nThis field is required.\n\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-clientOrigin",
      "parent": "Pagespy",
      "title": "config.clientOrigin ",
      "content": "\nType: string\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-project",
      "parent": "Pagespy",
      "title": "config.project",
      "content": "Serves as a way to aggregate information and allows search in the debug room list.\nType: string\nDefault: 'default'\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-title",
      "parent": "Pagespy",
      "title": "config.title",
      "content": "A user-defined parameter that can help distinguish the current debugging client.The corresponding information is displayed below the \"Device ID\" section on each debug connection panel.\nType: string\nDefault: '--'\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-enableSSL",
      "parent": "Pagespy",
      "title": "config.enableSSL",
      "content": "Manually specify the scheme for the PageSpy service.\n\nType: boolean\n\n\nDetails\nPass a boolean value manually:\n\ntrue: The SDK will access PageSpy services via [\"https://\", \"wss://\"].\nfalse: The SDK will access PageSpy services via [\"http://\", \"ws://\"].\n\n\n\nIf not set, the SDK will automatically determine this value based on the page's URL.\nWhen the SDK cannot correctly determine the scheme, such as when imported through a browser extension like chrome-extension://xxx/sdk/index.min.js, it defaults to [\"http://\", \"ws://\"]. You can manually specify this field in such cases.\n\n\n  \nThese environments generally enforce HTTPS, so the default value is true. For development environments requiring HTTP, you can set it to false.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-disabledPlugins",
      "parent": "Pagespy",
      "title": "config.disabledPlugins",
      "content": "PageSpy comes with built-in plugins ready to use. You can manually specify which plugins to disable.\nType: string[]\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-serializeData",
      "parent": "Pagespy",
      "title": "config.serializeData",
      "content": "Indicates whether the SDK should serialize non-primitive data types when collecting offline logs. Serialization facilitates easier review during replay.\nType: boolean\nDefault: false\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-useSecret",
      "parent": "Pagespy",
      "title": "config.useSecret",
      "content": "Enable or disable authentication.\n\nType: boolean\n\n\nDefault: false\n\n\nDetails:\nWhen enabled, the SDK generates a 6-digit random \"secret key.\" This key must be entered when accessing the debug room.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-messageCapacity",
      "parent": "Pagespy",
      "title": "config.messageCapacity",
      "content": "Maximum number of cached data entries.\n\nType: number\n\n\nDefault: 1000\n\n\nDetails:\nBefore the debug room is entered, the SDK caches data in memory. This allows the debug client to view historical data upon entering the room.\nSince the data size may grow, you can specify the maximum number of data records the SDK caches locally.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-dataProcessor",
      "parent": "Pagespy",
      "title": "config.dataProcessor",
      "content": "Customize data handling, allowing users to modify or ignore data.\n\nType:\ndeclare interface DataProcessor {\n  console?: (data: ConsoleData) => boolean;\n  network?: (data: RequestItem) => boolean;\n  storage?: (data: StorageData) => boolean;\n  database?: (data: DatabaseData) => boolean;\n  page?: (data: PageData) => boolean;\n  system?: (data: SystemData) => boolean;\n}\n\n\n\nDetails\nProcessing functions correspond to built-in plugins. Users can directly modify the data within these functions. After execution, PageSpy processes the modified data. If a function returns false, the data will be ignored, meaning it won't appear in any debug mode.\nFor more details, visit: https://www.pagespy.org/#/docs/changelog#v1_9_2\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-disabledOnProd",
      "parent": "Pagespy",
      "title": "config.disabledOnProd ",
      "content": "Disable PageSpy in production environments for Mini Programs.\n\nType: boolean\n\n\nDefault: true\n\n\nDetails\nPageSpy is primarily intended for development and testing. It is not recommended for production environments, particularly for Mini Programs, where performance is more critical. Therefore, this field defaults to true.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-offline",
      "parent": "Pagespy",
      "title": "config.offline ",
      "content": "Offline mode.\n\nType: boolean\n\n\nDefault: false\n\n\nDetails:\nWith the offline replay functionality introduced in PageSpy@1.7.4, the integrated SDK can collect data and export offline logs without connecting to a debug client.\nSetting this to a truthy value enables \"offline mode,\" where PageSpy does not create rooms or establish WebSocket connections.\nThis is currently supported only in the browser environment.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-autoRender",
      "parent": "Pagespy",
      "title": "config.autoRender ",
      "content": "Indicates whether the SDK should automatically render a \"white circular logo\" control in the bottom-left corner after initialization.\n\nType: boolean\n\n\nDefault: true\n\n\nDetails:\nIf set to false, you can manually render using window.$pageSpy.render().\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-logo",
      "parent": "Pagespy",
      "title": "config.logo ",
      "content": "Custom logo for the control rendering.\nType: string\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-primaryColor",
      "parent": "Pagespy",
      "title": "config.primaryColor ",
      "content": "Set the theme color for modals and toasts.\nType: string\nDefault: #8434e9\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-modal",
      "parent": "Pagespy",
      "title": "config.modal ",
      "content": "Configure the logo and title for the modal.\n\nType:\ndeclare interface ModalConfig {\n  logo?: string;\n  title?: string;\n}\n\n\n\nDefault:\n{\n  logo: \"<PageSpy LOGO>\",\n  title: \"PageSpy\"\n}\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config-gesture",
      "parent": "Pagespy",
      "title": "config.gesture ",
      "content": "PageSpy can be activated via gestures or keyboard arrow keys.\n\nType: Command | null。\nGesture recognition relies on iseedeadpeople, where the Command type is defined as follows.\ndeclare const DIRECTION_CHARACTERS: readonly [\"U\", \"R\", \"D\", \"L\"];\ntype Direction = (typeof DIRECTION_CHARACTERS)[number];\n\ntype Command = readonly Direction[];\n\n\n\nDefault: null (gestures disabled).\n\n\nExample\nnew PageSpy({\n  ...,\n  // PageSpy will only activate after the user completes the \"Up, Up, Down, Down, Left, Right, Left, Right\" input\n  // On mobile, this is done via gestures; on PC, it is triggered by arrow key inputs\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#registerPlugin",
      "parent": "Pagespy",
      "title": "registerPlugin()",
      "content": "Static method, register a plugin.\n\nType\ndeclare class PageSpy {\n  static registerPlugin(plugin: PageSpyPlugin): void;\n}\n\n\n\nDetails\nCall before new PageSpy, the parameter is an instance of a plugin that implements PageSpyPlugin. Each plugin instance should have a name attribute. If a plugin with the same name is registered multiple times, the plugin instance will only be registered once, and a warning message will be printed in the console.\n\n\nExample\nclass DataHarbrPlugin implements PageSpyPlugin {\n  name = 'DataHarborPlugin'\n\n  ... // some code\n}\n\nPageSpy.registerPlugin(new DataHarborPlugin());\n\n// Repeated calls, the plugin will only be registered once\nPageSpy.registerPlugin(new DataHarborPlugin());\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#pluginsWithOrder",
      "parent": "Pagespy",
      "title": "pluginsWithOrder",
      "content": "List of registered plugins sorted by the enforce property of the plugin.\n\nType\ndeclare class PageSpy {\n  static plugins: Record<PluginOrder | 'normal', PageSpyPlugin[]>;\n  static get pluginsWithOrder(): PageSpyPlugin[];\n}\n\n\n\nDetails\nEach plugin should provide the enforce: PluginOrder attribute; if not provided, it defaults to enforce: \"normal\". PageSpy will then maintain the plugin list in the order of pre - normal - post.\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#updateRoomInfo",
      "parent": "Pagespy",
      "title": "updateRoomInfo()",
      "content": "Update connection info after instantiation PageSpy.\n\nType\ntype UpdateConfig = {\n  title?: string;\n  project?: string;\n};\n\ndeclare class PageSpy {\n  updateRoomInfo(obj: UpdateConfig): void;\n}\n\n\n\nDetails\nThe client identification information can be updated later through this method if it is not known when PageSpy is initialized.\n\n\nExample\nwindow.$pageSpy = new PageSpy({\n  title: '--',\n  project: '--',\n});\n\nasync function YourCode() {\n  const { title, project } = await xxx();\n\n  window.$pageSpy.updateRoomInfo({\n    title,\n    project,\n  });\n}\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#abort",
      "parent": "Pagespy",
      "title": "abort()",
      "content": "Abort the current PageSpy instance.\n\nType\ndeclare class PageSpy {\n  abort(): void;\n}\n\n\n\nDetails\nPageSpy will disconnect, remove the relevant DOM from the document, clear the cached data, and call the onReset() method of all registered plugins.\nIn the current context, APIs that are proxied or rewritten, such as window.fetch in the browser, will be restored to their state before PageSpy was instantiated.\n\n\nExample\nwindow.$pageSpy = new PageSpy(...);\n\nwindow.$pageSpy.abort();\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#version",
      "parent": "Pagespy",
      "title": "version",
      "content": "Current used version of PageSpy.\n\nType\ndeclare class PageSpy {\n  version: string;\n}\n\n\n\nExample\nwindow.$pageSpy = new PageSpy(...);\n\nconsole.log(window.$pageSpy.version);\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#config",
      "parent": "Pagespy",
      "title": "config",
      "content": "Configuration information. The configuration varies depending on the platform, such as config.disableOnProd which is specific to the mini-program end.\n\nType\ndeclare class PageSpy {\n  config: Config;\n}\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#socketStore",
      "parent": "Pagespy",
      "title": "socketStore",
      "content": "Encapsulates the WebSocket instance, provides message event listeners, triggers callbacks upon receiving specified messages, and broadcasts messages.\n\nType\ninterface SocketStoreType {\n  addListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  addListener(type: InternalType, fn: InternalEventCallback): void;\n\n  removeListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  removeListener(type: InternalType, fn: InternalEventCallback): void;\n\n  dispatchEvent(\n    type: InteractiveType | InternalType,\n    data: InteractiveEvent,\n  ): void;\n  dispatchEvent(type: InternalType, data: any): void;\n\n  broadcastMessage(message: MessageItem, noCache?: boolean): void;\n}\n\n\n\nDetails\nThe first parameter of addListener() / removeListener() / dispatchEvent() is the message type, which we categorize into \"interactive\" and \"internal\" types.\n\n\"InteractiveType\" message types are used to interact with the debugging client, for example: when the debugging client goes online, sends code to the client for execution, or clicks to expand object details, these will be sent to the SDK as message events, and the SDK will respond accordingly;\n\"InternalType\" message types are currently used for interaction between plugins. For example, after each plugin generates data, it will dispatch an event through socketStore.dispatchEvent('public-data'), and the DataHarborPlugin, also a plugin, can process the data upon listening to this event.\n\nThe broadcastMessage() broadcasts a message. The first parameter is the data sent from different plugins to the debugging end, and the second parameter noCache is used by the plugin to inform socketStore whether the current message being sent should be cached. The purpose of caching the data is so that when the debugging end \"comes online,\" it can see historical messages, but not all data needs to be cached. For instance, when a client send a network request, whether it succeeds or fails, only the final state needs to be cached.\n\n\nExample\n// Please check the repository for the specific implementation of ConsolePlugin\nclass ConsolePlugin implements PageSpyPlugin {\n  onInit({ socketStore }) {\n    socketStore.addListener('debug', ({ source }, reply) => {\n      ...\n    })\n\n    socketStore.broadcastMessage(...)\n  }\n}\n\n\n"
    },
    {
      "language": "en",
      "route": "/docs/pagespy#showPanel",
      "parent": "Pagespy",
      "title": "showPanel() ",
      "content": "Show the debugging panel in miniprogram.\n\nType:\ndeclare class PageSpy {\n  showPanel(): void;\n}\n\n\n\nDetails:\n<img src={mpPanelImg} style={{width: 375}} />\nThis panel supports plugin registration of custom buttons, for example, if the DataHarborPlugin is registered, a button of「Upload Offline Log」will appear in the panel:\n<img src={mpDataHarborImg} style={{width: 375}} />\n\n"
    },
    {
      "language": "en",
      "route": "/docs/plugins#definition",
      "parent": "Plugins",
      "title": "Type Definitions ",
      "content": "import { SocketStoreType } from '@huolala-tech/page-spy-types/lib/base';\nimport { PluginOrder } from '@huolala-tech/page-spy-types';\nimport { InitConfig } from 'types';\n\nexport abstract class PageSpyPlugin {\n  /**\n   * Each plugin must specify a name, which serves as its \"identity\".\n   * Functionality within PageSpy such as registration and disabling depends on this name property.\n   */\n  public abstract name: string;\n\n  /**\n   * Specifies the plugin loading order. Plugin invocation follows:\n   *   1. Plugins with enforce: \"pre\" property;\n   *   2. Plugins without enforce property;\n   *   3. Plugins with enforce: \"post\" property.\n   */\n  public abstract enforce?: PluginOrder;\n\n  // Called when new PageSpy() is invoked\n  public abstract onInit: (params: OnInitParams) => any;\n\n  // Called after PageSpy rendering is completed (if there's a rendering process)\n  public abstract onMounted?: (params: OnMountedParams) => any;\n\n  // When PageSpy is no longer needed, plugins should have reset/recovery functionality\n  public abstract onReset?: () => any;\n}\n\nexport interface OnInitParams {\n  // Configuration information merged with user-provided instantiation parameters\n  config: Required<InitConfig>;\n\n  // Wrapper around the socket instance; plugin developers can interact with the debug terminal/API through this property\n  socketStore: SocketStoreType;\n}\n\nexport interface OnMountedParams {\n  // Root node of PageSpy rendering\n  root?: HTMLDivElement;\n\n  // Root node of the dialog rendered by PageSpy\n  content?: HTMLDivElement;\n\n  // Wrapper around the socket instance; plugin developers can interact with the debug terminal/API through this property\n  socketStore: SocketStoreType;\n}\n"
    },
    {
      "language": "en",
      "route": "/docs/plugins#convention",
      "parent": "Plugins",
      "title": "Behavioral Conventions ",
      "content": "If a plugin collects (or want to publicly expose) certain platform \"data\", in addition to broadcasting data via socketStore, it is conventionally required to dispatch an \"public-data\" internal event on the socketStore instance. This allows plugins with statistical or persistence requirements to uniformly collect data from this event. Plugins that think certain data should not be \"public\" are not required to dispatch the \"public-data\" event."
    },
    {
      "language": "en",
      "route": "/docs/plugins#demo",
      "parent": "Plugins",
      "title": "Example Implementation of Plugins ",
      "content": "Reference implementations can be found in DataHarborPlugin and RRWebPlugin."
    },
    {
      "language": "en",
      "route": "/docs/plugins#usage",
      "parent": "Plugins",
      "title": "Usage of Plugins ",
      "content": "<!-- Include SDK -->\n<script src=\"https://<your-pagespy-host>/page-spy/index.min.js\"></script>\n<!-- Include Plugin -->\n<script src=\"https://<your-pagespy-host>/plugin/xxx/index.min.js\"></script>\n\n<!-- Register Plugin -->\n<script>\n  PageSpy.registerPlugin(new XXXPlugin());\n  window.$pageSpy = new PageSpy();\n</script>\n"
    },
    {
      "language": "en",
      "route": "/docs/react-native#step-1",
      "parent": "React Native",
      "title": "Step 1",
      "content": "Install the dependency in your project:yarn add @huolala-tech/page-spy-react-native@latest\n"
    },
    {
      "language": "en",
      "route": "/docs/react-native#step-2",
      "parent": "React Native",
      "title": "Step 2",
      "content": "Import and instantiate the SDK in the entry file. The initialization parameters provide optional configuration options to customize the SDK's behavior:import PageSpy from '@huolala-tech/page-spy-react-native';\n\nnew PageSpy({\n  api: \"{deployPath}\",\n})\nIf you are using @react-native-async-storage/async-storage, we provide a separate plugin:import { PageSpy } from '@huolala-tech/page-spy-react-native';\nimport RNAsyncStoragePlugin from '@huolala-tech/page-spy-plugin-rn-async-storage';\n\nPageSpy.registerPlugin(new RNAsyncStoragePlugin())\nnew PageSpy({\n  api: \"{deployPath}\",\n})\nThat's the complete process to integrate PageSpy into a react native project.Once integrated, click on the top menu Debugging to use it!"
    },
    {
      "language": "en",
      "route": "/docs/rrweb#api",
      "parent": "RRWebPlugin",
      "title": "RRWebPlugin API",
      "content": ""
    },
    {
      "language": "en",
      "route": "/docs/rrweb#constructor",
      "parent": "RRWebPlugin",
      "title": "constructor()",
      "content": "\n\nType\nimport type { recordOptions } from 'rrweb/typings/types';\nimport type { eventWithTime } from '@rrweb/types';\n\ninterface Options extends recordOptions<eventWithTime> {\n  // Reserved configuration, not available for now\n  allowOnline?: true;\n}\ndeclare class RRWebPlugin implements PageSpyPlugin {\n    constructor(options?: Options);\n}\n\n\n"
    },
    {
      "language": "en",
      "route": "/o-spy/docs/faq#difference",
      "parent": "FAQ",
      "title": "Relation of the O-Spy and PageSpy? ",
      "content": "O-Spy is built on top of the capabilities of PageSpy and its plugin ecosystem. Specifically, it packages the following three dependencies:\n@huolala-tech/page-spy-browser;\n@huolala-tech/page-spy-plugin-rrweb;\n@huolala-tech/page-spy-plugin-data-harbor;\nThe key differences between O-Spy and PageSpy are as follows:\n\n\n\nO-Spy\nPageSpy\n\n\n\n\nRequires deployment\nNo\nYes\n\n\nOnline real-time debugging\n❌\n✅\n\n\nOffline replay debugging\n✅\n✅\n\n\nData upload\n🟡 Handled manually\n✅\n\n\nData download\n✅\n✅\n\n\n"
    },
    {
      "language": "en",
      "route": "/o-spy/docs/faq#where-data-stored",
      "parent": "FAQ",
      "title": "Where does the data recorded by O-Spy store? ",
      "content": "All data is stored locally on the user's device, and will not be uploaded to any third-party server.The storage strategy: O-Spy stores data in an array in memory. When the volume of data in the array reaches a critical value, the data will be written to a temporary file. The critical value is 10M by default (click here to view the source code). When the page is refreshed, all data will be destroyed."
    },
    {
      "language": "en",
      "route": "/o-spy/docs/introduction#what-is-ospy",
      "parent": "Introduction",
      "title": "What is O-Spy? ",
      "content": "O-Spy (pronounced /əʊ spaɪ/, similar to \"Oh-Spy\") is a debugging tool for offline recording program runtime data in web projects. The recorded data can be replayed using the O-Spy platform. Click to see the demo.The workflow is shown in the image below:"
    },
    {
      "language": "en",
      "route": "/o-spy/docs/introduction#quick-start",
      "parent": "Introduction",
      "title": "Quick Start",
      "content": ""
    },
    {
      "language": "en",
      "route": "/o-spy/docs/introduction#step-1",
      "parent": "Introduction",
      "title": "Step 1: Import O-Spy ",
      "content": "O-Spy is framework-agnostic, and you can integrate it into your project in any way you prefer.import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';Once successfully imported, you will see a draggable \"O-Spy\" widget at the bottom right of the screen. Try opening it :)import { CallOSpy } from '../md-components/CallOSPy';"
    },
    {
      "language": "en",
      "route": "/o-spy/docs/introduction#step-2",
      "parent": "Introduction",
      "title": "Step 2: Export Data ",
      "content": "This page already integrates O-Spy. Imagine it as your web page and let’s generate some data. Feel free to click the button below:import { MakeData } from '../md-components/MakeData'Then click the floating O-Spy button to open the popup and click \"Export Log\" to download a JSON file."
    },
    {
      "language": "en",
      "route": "/o-spy/docs/introduction#step-3",
      "parent": "Introduction",
      "title": "Step 3: Replay ",
      "content": "Go to the replay page, click the \"Select Log\" button at the top left, choose the JSON file we just exported, and start the replay!"
    },
    {
      "language": "en",
      "route": "/o-spy/docs/theme#customize-example",
      "parent": "Customize Theme",
      "title": "Example",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    }
  ],
  "zh": [
    {
      "language": "zh",
      "route": "/docs/api#pagespy",
      "parent": "API",
      "title": "PageSpy",
      "content": "\n约定实例变量名称为 $pageSpy = new PageSpy(...)；\n\nconstructor()\n$pageSpy.updateRoomInfo()\n$pageSpy.abort()\nPageSpy.registerPlugin()\nPageSpy.pluginsWithOrder\n$pageSpy.version\n$pageSpy.config\n$pageSpy.socketStore\n$pageSpy.showPanel() \n"
    },
    {
      "language": "zh",
      "route": "/docs/api#plugins",
      "parent": "API",
      "title": "插件",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/api#harbor",
      "parent": "API",
      "title": "DataHarborPlugin",
      "content": "\n约定实例变量名称为 $harbor = new DataHarborPlugin(...)；\n\nconstructor()\n手动操作日志\n$harbor.pause()\n$harbor.resume()\n$harbor.reharbor()\n"
    },
    {
      "language": "zh",
      "route": "/docs/api#rrweb",
      "parent": "API",
      "title": "RRWebPlugin",
      "content": "\n约定实例变量名称为 $rrweb = new RRWebPlugin(...)；\n\nconstructor()\n"
    },
    {
      "language": "zh",
      "route": "/docs/browser#online",
      "parent": "浏览器",
      "title": "在线体验",
      "content": "\n点击查看完整代码: Codesandbox\n"
    },
    {
      "language": "zh",
      "route": "/docs/browser#usage",
      "parent": "浏览器",
      "title": "接入使用",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/browser#step-1",
      "parent": "浏览器",
      "title": "第一步",
      "content": "在客户端的项目中加载 <script>:<!-- PageSpy SDK -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/page-spy/index.min.js\"></script>\n\n<!-- 插件（非必须，但建议使用） -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/data-harbor/index.min.js\"></script>\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/rrweb/index.min.js\"></script>\n"
    },
    {
      "language": "zh",
      "route": "/docs/browser#step-2",
      "parent": "浏览器",
      "title": "第二步",
      "content": "初始化 PageSpy 和插件，它们的初始化参数都提供了可选的 配置项 用于自定义 SDK 的行为：  你也可以通过 [开发插件](./plugins)，定制属于你自己的 PageSpy！\n</div>\n<script>\n  window.$harbor = new DataHarborPlugin();\n  window.$rrweb = new RRWebPlugin();\n\n  [window.$harbor, window.$rrweb].forEach(p => {\n    PageSpy.registerPlugin(p)\n  })\n\n  window.$pageSpy = new PageSpy();\n</script>\n以上就是在浏览器项目中接入 PageSpy 的全部流程，接入完成后点击顶部菜单 开始调试 使用！"
    },
    {
      "language": "zh",
      "route": "/docs/browser#framework",
      "parent": "浏览器",
      "title": "在框架中集成",
      "content": "PageSpy 通过 CodeSandbox 平台发布了与当下流行的所有框架的接入指南，大家可以前往在线体验：\nReact：CodeSandbox - PageSpy in React\nVue：CodeSandbox - PageSpy in Vue\nSvelte：CodeSandbox - PageSpy in Svelte\nAngular：CodeSandbox - PageSpy in Angular\nNextjs：CodeSandbox - PageSpy in Nextjs\nNuxtjs：CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "zh",
      "route": "/docs/browser#extension",
      "parent": "浏览器",
      "title": "使用浏览器插件",
      "content": "PageSpy 提供浏览器插件让你无需集成任何代码，即可在任何网页上使用 PageSpy！是的，你没看错！通过 PageSpy 的浏览器插件你可以调试几乎所有网页！少数网站设置了 CSP 策略可能会导致插件无法生效。"
    },
    {
      "language": "zh",
      "route": "/docs/browser#install-extension",
      "parent": "浏览器",
      "title": "安装",
      "content": "前往 浏览器插件 仓库，按照 README 文档安装即可。"
    },
    {
      "language": "zh",
      "route": "/docs/browser#extension-panel",
      "parent": "浏览器",
      "title": "面板参数",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-2-0",
      "parent": "版本日志",
      "title": "v2.2.0",
      "content": "\n🆕 官网上线 O-Spy，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/315;\n🆕 新增 @huolala-tech/page-spy-plugin-ospy 离线记录插件;\n🟡 @huolala-tech/page-spy-plugin-whole-bundle 已废弃不再新增功能;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-1-3",
      "parent": "版本日志",
      "title": "v2.1.3",
      "content": "\n🐛 回放页面的 Network 面板支持类型筛选;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-1-2",
      "parent": "版本日志",
      "title": "v2.1.2",
      "content": "\n🆕 回放页面的用户轨迹面板支持基础选中操作;\n🆕 支持查看网页的静态资源请求，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/309;\n🐛 浏览器端 SDK 修复操作时间段日志报错的问题，查看详情：https://github.com/HuolalaTech/page-spy/pull/131;\n🐛 浏览器端 SDK 修复异步复制导致失败的问题，查看详情：https://github.com/HuolalaTech/page-spy/pull/130;\n🐛 修复 uni.request 返回值问题，查看详情：https://github.com/HuolalaTech/page-spy-web/issues/306;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-1-1",
      "parent": "版本日志",
      "title": "v2.1.1",
      "content": "\n🆕 浏览器端 SDK 支持手势动态开启，查看 使用说明;\nnew PageSpy({\n  ...,\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-1-0",
      "parent": "版本日志",
      "title": "v2.1.0",
      "content": "\n🆕 重构 WholeBundlePlugin 并更新官网回放实验室页面：https://github.com/HuolalaTech/page-spy/pull/125 、https://github.com/HuolalaTech/page-spy-web/pull/304;\n🆕 优化定位源码的功能：https://github.com/HuolalaTech/page-spy-web/pull/300;\n🆕 小程序新增 System 面板：https://github.com/HuolalaTech/page-spy/pull/123 、https://github.com/HuolalaTech/page-spy-web/pull/299;\n🆕 优化小程序离线日志功能的兼容性;\n🆕 悬浮球拖拽后记忆位置：https://github.com/HuolalaTech/page-spy/pull/126;\n🆕 浏览器端 SDK 新增 CSS 特性检测：https://github.com/HuolalaTech/page-spy/pull/128;\n🐛 修复一些问题;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-0-2",
      "parent": "版本日志",
      "title": "v2.0.2",
      "content": "\n🐛 修复 DataHarborPlugin 的默认值导致无法下载;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-0-1",
      "parent": "版本日志",
      "title": "v2.0.1",
      "content": "\n🆕 DataHarborPlugin 支持传入 onAfterUpload 自定义上传后的动作。查看详情：https://github.com/HuolalaTech/page-spy/pull/119;\n🐛 修复一些问题。查看详情：https://github.com/HuolalaTech/page-spy/pull/118 、https://github.com/HuolalaTech/page-spy/pull/120;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v2-0-0",
      "parent": "版本日志",
      "title": "v2.0.0",
      "content": "\n🆕 浏览器端弹窗改版，支持定制主题色、品牌，新增时间段日志选择器、备注字段。查看详情：https://github.com/HuolalaTech/page-spy/pull/113;\n🆕 小程序端新增方法唤起弹窗显示 PageSpy 信息，并支持上传离线日志。查看详情：https://github.com/HuolalaTech/page-spy/pull/112;\n🐛 修复一些问题;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-9-6",
      "parent": "版本日志",
      "title": "v1.9.6",
      "content": "\n🆕 DataHarborPlugin 插件新增原型方法。查看详情：https://github.com/HuolalaTech/page-spy/pull/110;\n\n$harbor.pause()：暂停记录;\n$harbor.resume(): 恢复记录，和 pause() 对应;\n$harbor.reharbor()：清空已记录的数据并重新制作。\n\n\n🆕 回放页面对于「对象不可展开」新增提示;\n🐛 修复 application/x-www-form-urlencoded 展示的 Payload。查看详情：https://github.com/HuolalaTech/page-spy-web/issues/267;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-9-5",
      "parent": "版本日志",
      "title": "v1.9.5",
      "content": "\n🆕 新增 DockerHub 镜像: https://hub.docker.com/r/huolalatech/page-spy-web;\n🆕 新增 宝塔 一键部署说明文档;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-9-4",
      "parent": "版本日志",
      "title": "v1.9.4",
      "content": "\n🐛 修复一些问题;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-9-3",
      "parent": "版本日志",
      "title": "v1.9.3",
      "content": "\n🆕 调试端 Network 面板支持关键字筛选过滤。查看详情：https://github.com/HuolalaTech/page-spy-web/pull/262;\n🆕 调试端日志回放页面的 Console 面板支持跟随滚动，优化消息通知。查看详情：https://github.com/HuolalaTech/page-spy-web/pull/264;\n🐛 SDK 优化 ErrorPlugin 的错误信息;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-9-2",
      "parent": "版本日志",
      "title": "v1.9.2",
      "content": "\n\n🆕 实例化参数新增 dataProcessor 选项用于过滤或者处理数据。查看详情：https://github.com/HuolalaTech/page-spy/pull/106;\n\nwindow.$pageSpy = new PageSpy({\n  ...,\n  dataProcessor: {\n    console: (data) => {\n      // 打印内容中如果有 \"secret\" 字符则忽略（不会发送到调试端）\n      if (data.logs.some(i => typeof i === 'string' && i.includes('secret'))) return false;\n    },\n    network: (data) => {\n      // 忽略数据打点类的请求\n      if (/(sentry|metric|collect)/.test(data.url)) return false\n    },,\n    storage: (data) => {\n      // cookie 中的键如果是下划线开头，让调试端看到的值为 \"*******\"\n      if (data.type === \"cookie\" && data.action === \"get\") {\n        data.data.forEach((i) => {\n          if (i.name.startsWith(\"_\")) {\n            i.value = \"*******\";\n          }\n        });\n      }\n    },\n  },\n});\n\n\n\n\n🆕 调整上传的日志数据，查看详情：https://github.com/HuolalaTech/page-spy/pull/107;\n\n\n🆕 交互调整。\n\n点击日志回放的进度条保持播放状态，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/258;\n表格头支持拖拽，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/257;\n支持识别华为浏览器，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/256;\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-9-1",
      "parent": "版本日志",
      "title": "v1.9.1",
      "content": "\n\n🆕 实例化参数新增 serializeData: boolean 选项，用于指定是否允许 SDK 在收集离线日志时，序列化非基本类型的数据，默认值 false。查看详情：https://github.com/HuolalaTech/page-spy-web/pull/241 / https://github.com/HuolalaTech/page-spy/pull/103;\n开启后，console 打印的数据在日志回放面板上支持展开查看，使用方式：\nwindow.$pageSpy = new PageSpy({\n  ...\n  // 注意，序列化过程可能会产生副作用，为了安全起见，默认 false 不序列化;\n  serializeData: true\n})\n\n\n\n🆕 优化 Network 展示的信息，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/239;\n\n\n🆕 回放面板支持回放 canvas 内容，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/238;\n\n\n🆕 回放时左侧的操作轨迹展示点击动作;进度条上现在只展示点击、报错，其他数据活动通过 Tab 通知。查看详情：https://github.com/HuolalaTech/page-spy-web/pull/244 / https://github.com/HuolalaTech/page-spy-web/pull/247\n\n\n🐛 修复回放日志列表的交互，查看详情：https://github.com/HuolalaTech/page-spy-web/pull/242;\n\n\n🐛 修复一些问题：\n\n服务端跨域配置不生效;\n服务端日志删除速度过慢;\n离线日志现在记录网络请求的完整生命周期;\n格式化 SDK 下载的文件名;\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-9-0",
      "parent": "版本日志",
      "title": "v1.9.0",
      "content": "\n🆕 全新的文档页面;\n🆕 将动态执行代码能力从小程序 SDK 中拆出，封装为独立插件 @huolala-tech/page-spy-plugin-mp-eval，以减少对小程序审核的影响;\n🆕 兼容小程序能力：GET 请求自动将 body 转为 query string: https://github.com/HuolalaTech/page-spy-web/issues/199;\n🐛 修复小程序 getAccountInfoSync 兼容性问题: https://github.com/HuolalaTech/page-spy-web/issues/213;\n🐛 修复小程序 没有透传 updateRoomInfo 类型定义: https://github.com/HuolalaTech/page-spy-web/issues/213;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-10",
      "parent": "版本日志",
      "title": "v1.8.10",
      "content": "本次更新主要针对「错误定位源码」功能做了许多优化。具体内容如下：\n🆕 「日志回放页面」的 error 也支持定位源码;\n🆕 之前仅支持对捕获的错误定位源码，现在 console.xxx(Error) 也可以定位源码，查看详情 https://github.com/HuolalaTech/page-spy-web/pull/212;\n🆕 源码中如果存在 \\t，提供选项让大家选择 1 个制表符 = N 个空格;\n🐛 修复 logo 交互问题，查看详情 https://github.com/HuolalaTech/page-spy-web/issues/211;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-9",
      "parent": "版本日志",
      "title": "v1.8.9",
      "content": "\n🆕 支持调试 React Native 应用，查看详情 https://github.com/HuolalaTech/page-spy/pull/87 / https://github.com/HuolalaTech/page-spy-web/pull/190;\n🆕 支持调试 鸿蒙 App 应用，查看详情 https://github.com/HuolalaTech/page-spy-web/pull/191 / https://github.com/HuolalaTech/page-spy/pull/88;\n🆕 Web 应用支持查看 EventSource 请求响应数据，优化网络面板布局，查看详情 https://github.com/HuolalaTech/page-spy-web/pull/206 / https://github.com/HuolalaTech/page-spy-web/issues/202 / https://github.com/HuolalaTech/page-spy-web/issues/183;\n🆕 优化消息类型，调试端界面响应更快，查看详情 https://github.com/HuolalaTech/page-spy/pull/91 / https://github.com/HuolalaTech/page-spy-web/pull/201;\n🆕 房间列表页面限制最多展示 30 个面板，查看详情 https://github.com/HuolalaTech/page-spy-web/pull/204;\n🐛 修复 $pageSpy.abort() 误清除事件，查看详情 https://github.com/HuolalaTech/page-spy-web/issues/205 / https://github.com/HuolalaTech/page-spy/pull/95;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-8",
      "parent": "版本日志",
      "title": "v1.8.8",
      "content": "\n🆕 重构日志回放页，回放长时间、大体积的离线日志数据时的交互更加丝滑，查看详情 https://github.com/HuolalaTech/page-spy-web/issues/186;\n🆕 适配 UniApp 打包成原生 App，查看详情 https://github.com/HuolalaTech/page-spy/pull/90 / https://github.com/HuolalaTech/page-spy-web/pull/197;\n🐛 修复网络请求头中存在自引用导致 Network 插件异常，查看详情 https://github.com/HuolalaTech/page-spy/pull/89 / https://github.com/HuolalaTech/page-spy-web/issues/193;\n🐛 修复 Page 面板上的 html 标签展示 https://github.com/HuolalaTech/page-spy-web/pull/196;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-7",
      "parent": "版本日志",
      "title": "v1.8.7",
      "content": "\n🆕 SDK 优化发送消息时机，查看详情 https://github.com/HuolalaTech/page-spy/pull/84;\n🐛 修复 SDK 重连异常的问题;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-6",
      "parent": "版本日志",
      "title": "v1.8.6",
      "content": "\n🆕 SDK 断连后会指数重试建立连接（强制创建房间），重试时间的间隔最多不超过 (1.5 ** 4 * 2000)ms，查看详情 https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 SDK 新增 useSecret 参数，默认值 false。设置 true 后 SDK 会为房间生成 6 位数的随机密码，调试端需要获知密码后才可进入调试房间，查看详情 https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 支持动态更新 title / project 参数，通过 window.$pageSpy.updateRoomInfo({ title: 'xxx', project: 'xxx' })，查看详情 https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 浏览器 SDK 渲染的悬浮球拖拽到上、下、左、右侧后会自动收起，查看详情 https://github.com/HuolalaTech/page-spy/pull/80;\n🆕 调试端优化房间列表展示;\n🆕 服务端不再序列化数据，性能大幅提升;\n🐛 修复 docker 重新部署日志卷数据未正确找到的问题;\n🐛 修复其他一些问题，查看详情 https://github.com/HuolalaTech/page-spy-web/issues/172 / https://github.com/HuolalaTech/page-spy/pull/79;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-5",
      "parent": "版本日志",
      "title": "v1.8.5",
      "content": "\n🆕 移除不支持的系统架构;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-4",
      "parent": "版本日志",
      "title": "v1.8.4",
      "content": "\n🆕 SDK 优化缓存策略，避免客户端缓存导致的运行内存过大 https://github.com/HuolalaTech/page-spy-web/issues/169\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-3",
      "parent": "版本日志",
      "title": "v1.8.3",
      "content": "\n🆕 支持调试 Taro 小程序，查看 @huolala-tech/page-spy-taro;\n🆕 支持调试鸿蒙 App，查看 @huolala/page-spy-harmony;\n\n基于 Harmony API 9 开发。\n\n\n🐛 优化 NetworkPlugin 在请求错误时的处理行为;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-2",
      "parent": "版本日志",
      "title": "v1.8.2",
      "content": "\n🆕 修复上个版本的 npm package 在部分系统架构中无法安装的问题;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-1",
      "parent": "版本日志",
      "title": "v1.8.1",
      "content": "\n🆕 在小程序集成文档中添加了 “提醒内容”;\n🆕 日志回放页面：进度条上显示汇总的活动热度;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#v1-8-0",
      "parent": "版本日志",
      "title": "v1.8.0",
      "content": "\n🆕 小程序支持发送代码到客户端远程执行的功能;\n🆕 DataHarborPlugin 支持上传离线日志，调试端新增日志文件列表页面;\n🆕 优化日志回放页面功能：支持拖拽改变布局、倍速播放;\n"
    },
    {
      "language": "zh",
      "route": "/docs/changelog#More---",
      "parent": "版本日志",
      "title": "More...",
      "content": "更早的发布内容请前往 Release 页面查看。"
    },
    {
      "language": "zh",
      "route": "/docs/data-harbor#api",
      "parent": "DataHarborPlugin",
      "title": "DataHarborPlugin API",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/data-harbor#constructor",
      "parent": "DataHarborPlugin",
      "title": "constructor()",
      "content": "\n\n类型\ninterface DataHarborConfig {\n  // 离线日志数据会优先记录在内存中，当体积达到多大时写入临时文件\n  // 默认 10M (10 * 1024 * 1024)\n  maximum?: number; // 仅浏览器端支持\n\n  // 指定缓存哪些类型的数据\n  caredData?: Record<DataType, boolean>;\n\n  // 指定离线日志文件名，默认是根据当前时间命名\n  filename?: () => string;\n\n  // 自定义下载逻辑\n  onDownload?: (data: CacheMessageItem[]) => void; // 仅浏览器端支持\n\n  // 上传成功后的回调，可用于拓展其他功能，例如通知开发者\n  onAfterUpload?: (replayUrl: string, remark: string) => void;\n}\n\ndeclare class DataHarborPlugin implements PageSpyPlugin {\n  constructor(config?: DataHarborConfig);\n}\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/data-harbor#onOfflineLog",
      "parent": "DataHarborPlugin",
      "title": "手动操作日志",
      "content": "手动操作离线日志的下载、上传。\n\n类型\ninterface WholeLogActionParams {\n  clearCache?: boolean;\n  remark?: string;\n}\n\ninterface PeriodLogActionParams {\n  startTime: number;\n  endTime: number;\n  remark?: string;\n}\n\n// 注意！\n// - 浏览器端支持下面 4 种方法；\n// - 小程序端当前仅支持 upload() 方法；\ndeclare class DataHarborPlugin {\n  // 全量日志\n  upload(params?: WholeLogActionParams): Promise<string>;\n  download(params?: WholeLogActionParams): Promise<void>;\n\n  // 时间段日志\n  uploadPeriods(params: PeriodLogActionParams): Promise<string>;\n  downloadPeriods(params: PeriodLogActionParams): Promise<void>;\n}\n\n\n\n详细信息\n如果隐藏了自动渲染的 UI 控件，或者希望在某些时候自动触发队离线日志的操作，可以通过该方法实现。\n操作 全量日志 时，用户每次通过 UI 弹窗上的按钮操作日志上传 / 下载都是当前会话从头到尾的完整日志；但手动调用时默认会清除已记录的日志数据、并重新开始记录。你可以通过第二个参数的 clearCache: false 自行控制。\n操作 时间段日志 不会清除任何数据。\n上传完成后会返回回放的 URL，并打印到控制台。\n\n\n示例\nwindow.$harbor = new DataHarborPlugin();\n\n// 上传全部\nconst url = await window.$harbor.upload();\n\n// 上传最近 3 分钟的日志\nconst now = Date.now();\nconst url = await window.$harbor.uploadPeriods({\n  startTime: now - 3 * 60000,\n  endTime: now,\n  remark: '给这段日志中所出现的问题加个备注'\n});\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/data-harbor#pause",
      "parent": "DataHarborPlugin",
      "title": "pause()",
      "content": "暂停记录。\n\n类型\ndeclare class DataHarborPlugin {\n  pause(): void;\n}\n\n\n\n详细信息\n更加灵活的控制记录日志的行为。\n暂停后程序产生的数据不会被记录，执行 $harbor.resume() 恢复。\n\n\n示例\nwindow.$harbor = new DataHarborPlugin();\n\n// 暂停\nwindow.$harbor.pause();\n\n// 恢复\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/data-harbor#resume",
      "parent": "DataHarborPlugin",
      "title": "resume()",
      "content": "恢复记录。\n\n类型\ndeclare class DataHarborPlugin {\n  resume(): void;\n}\n\n\n\n详细信息\n更加灵活的控制记录日志的行为。\n<暂停 - 恢复> 期间的数据不会被记录。\n\n\n示例\nwindow.$harbor = new DataHarborPlugin();\n\n// 暂停\nwindow.$harbor.pause();\n\n// 恢复\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/data-harbor#reharbor",
      "parent": "DataHarborPlugin",
      "title": "reharbor()",
      "content": "清空已记录的数据，并继续记录。简而言之，重新制作。\n\n类型\ndeclare class DataHarborPlugin {\n  reharbor(): void;\n}\n\n\n\n示例\nwindow.$harbor = new DataHarborPlugin();\n\nwindow.$harbor.reharbor();\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-guide#deployments",
      "parent": "部署说明",
      "title": "多种部署方案",
      "content": "\n使用 Node 部署\n使用 Docker 部署\n在宝塔面板安装\n"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-baota#prerequire",
      "parent": "使用 宝塔 部署",
      "title": "前提",
      "content": "安装宝塔面板，前往 宝塔面板 官网，选择对应的脚本下载安装。"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-baota#install",
      "parent": "使用 宝塔 部署",
      "title": "安装",
      "content": "\n前往「Docker - 应用商店」中找到 PageSpy，点击安装。\n\n设置基本信息，点击 \"确定\"。\n\n面板会自动进行应用初始化，大概需要 1 分钟左右，初始化完成后即可通过 6752 端口访问。\n"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-baota#next",
      "parent": "使用 宝塔 部署",
      "title": "接下来",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-docker#install",
      "parent": "使用 Docker 部署",
      "title": "安装",
      "content": "docker run -d --restart=always -v ./log:/app/log -v ./data:/app/data -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\n执行完成后，打开浏览器访问 http://localhost:6752 即可访问服务。"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-docker#video",
      "parent": "使用 Docker 部署",
      "title": "视频学习",
      "content": "{' '}"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-docker#next",
      "parent": "使用 Docker 部署",
      "title": "接下来",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-node#install",
      "parent": "使用 Node 部署",
      "title": "安装",
      "content": "执行完成后，打开浏览器访问 http://localhost:6752 即可访问服务。"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-node#video",
      "parent": "使用 Node 部署",
      "title": "视频学习",
      "content": "{' '}"
    },
    {
      "language": "zh",
      "route": "/docs/deploy-with-node#next",
      "parent": "使用 Node 部署",
      "title": "接下来",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/faq#module",
      "parent": "常见问题解答",
      "title": "PageSpy 模块组成",
      "content": "PageSpy 模块间的依赖关系和交互示意图："
    },
    {
      "language": "zh",
      "route": "/docs/faq#compatibility",
      "parent": "常见问题解答",
      "title": "PageSpy 的兼容性",
      "content": "\n浏览器 SDK 的兼容性目标设置的是 [\"chrome > 75\",\"safari > 12\", \"> 0.1%\", \"not dead\",\"not op_mini all\"]，其他 SDK 可以前往各自的仓库查看；\n调试端主要是开发者使用，对于浏览器的新特性使用我们保持开放的态度。所以建议使用最新版本的浏览器，设置的兼容性目标是 [\"last 2 chrome version\", \"last 2 firefox version\", \"last 2 safari version\"]。\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#hide-logo",
      "parent": "常见问题解答",
      "title": "如何隐藏 SDK 渲染的图标？",
      "content": "window.$pageSpy = new PageSpy({\n  // ... 其他配置参数\n  autoRender: false,\n});\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#init-params",
      "parent": "常见问题解答",
      "title": "实例化都可以传哪些参数，它们的作用分别是什么？",
      "content": "参考 PageSpy API。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#update-info",
      "parent": "常见问题解答",
      "title": "如何更新初始化参数？",
      "content": "PageSpy 提供了 Device ID 用于识别设备，同时还提供了 project / title 供开发者在初始化时自定义信息，用于辅助识别客户端。但你可能希望在初始化之后更新这些参数信息，操作方式如下：window.$pageSpy = new PageSpy(...);\n\n// 调用 updateRoomInfo 可以更新 project / title\nwindow.$pageSpy.updateRoomInfo({ project: 'xxx', title: 'xxx' });\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#framework",
      "parent": "常见问题解答",
      "title": "如何在 xxx 框架中集成？",
      "content": "PageSpy 借助 CodeSandbox 平台发布了与当下流行的所有框架的接入指南，大家可以前往在线体验：\nReact：CodeSandbox - PageSpy in React\nVue：CodeSandbox - PageSpy in Vue\nSvelte：CodeSandbox - PageSpy in Svelte\nAngular：CodeSandbox - PageSpy in Angular\nNextjs：CodeSandbox - PageSpy in Nextjs\nNuxtjs：CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#test-domain",
      "parent": "常见问题解答",
      "title": "pagespy.jikejishu.com 是官方提供的域名吗？一直可以用吗？",
      "content": "https://pagespy.jikejishu.com 是我们为了让大家能够在线体验、学习 PageSpy 临时搭建的服务，不保证 24 小时可用性、不保证数据安全、造成的损失自负，强烈建议大家在体验后前往私服、内网中自行部署。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#server-port",
      "parent": "常见问题解答",
      "title": "为什么本地 6752 端口可以访问，部署到服务器上就不行了？",
      "content": "检查服务器上的防火墙、或者安全组规则是否开放了 6752 端口。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#debug-disabled",
      "parent": "常见问题解答",
      "title": "调试按钮显示 “当前连接不存在客户端” 是什么意思？",
      "content": "这种情况通常是因为 SDK 正常创建了房间，但是无法通过 websocket 加入房间。按以下步骤排查：\n打开 SDK 所在的客户端的控制台，看是否有报错；\n如果控制台提示 \"WebSocket connect failed\" 相关信息，检查服务器的配置是否正确；\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#nginx",
      "parent": "常见问题解答",
      "title": "部署的时候 nginx 该怎么配置？",
      "content": "这里贴出 https://pagespy.jikejishu.com 的 nginx 配置供大家参考：server {\n  listen 443 ssl;\n  server_name pagespy.jikejishu.com;\n\n  if ($scheme != https) {\n      rewrite ^(.*)$  https://$host$1 permanent;\n  }\n\n  ssl_certificate /etc/letsencrypt/live/pagespy.jikejishu.com/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/pagespy.jikejishu.com/privkey.pem;\n\n  location / {\n      proxy_pass http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n  }\n}\n\nserver {\n  if ($host = pagespy.jikejishu.com) {\n      return 301 https://$host$request_uri;\n  }\n\n  listen 80;\n  listen [::]:80;\n  server_name pagespy.jikejishu.com;\n  return 404;\n}\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#sub-path",
      "parent": "常见问题解答",
      "title": "如何部署到子路径？",
      "content": "在版本 1.5.4 中支持用户将服务部署到子路径，安装过程没有任何变化，需要做调整的是 nginx 配置:server {\n  # ...\n\n  # <sub-path> 填写你准备部署到的子路径\n  location /<sub-path>/  {\n      # 这里的 <sub-path> 和上面的保持一致\n      rewrite ^/<sub-path>/(.*)$ /$1 break;\n      proxy_pass            http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n      proxy_set_header      Host $host;\n      proxy_set_header      X-Real-IP $remote_addr;\n      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # 这里的 <sub-path> 和上面的保持一致\n  location /<sub-path> {\n      return 301 $scheme://$host$request_uri/;\n  }\n}\n在调整配置后，重启 nginx 即可通过子路径访问；需要注意的是，现在实例化时需要手动传参 api 和 clientOrigin 告诉 SDK 部署地址，例如：window.$pageSpy = new PageSpy({\n  // 例如 api: \"example.com/pagespy\"\n  api: '<host>/<sub-path>',\n\n  // 例如 clientOrigin: \"https://example.com/pagespy\"\n  clientOrigin: '<scheme>://<host>/<sub-path>',\n});\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#basic-auth",
      "parent": "常见问题解答",
      "title": "调试端如何加一些安全认证的保护，开发者通过认证才可以访问？",
      "content": "可以在服务器上设置 IP 白名单或者使用 HTTP Authorization 来进行保护。\n\nNginx 设置 IP 白名单配置参考：\nserver {\n  location / {\n    # 允许谁可以访问\n    allow <ip>;\n\n    # 除了 allow 的，拒绝所有其他的客户端访问\n    deny all;\n  }\n}\n\n\n\nNginx 配置 HTTP Authorization，访问时需要提供账号和密码；\n首先通过 htpasswd 生成账密文件：\n# 执行后会要求输入密码、二次确认密码\nhtpasswd -c /etc/nginx/.htpasswd <用户名>;\n\n接着在 nginx 文件中配置 auth_basic 模块；\nserver {\n  location / {\n    auth_basic \"请输入用户名和密码以访问 PageSpy 服务\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n\n  location ~ /(api|page-spy|plugin) {\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n}\n\n最后重启 nginx 服务即可。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#extension",
      "parent": "常见问题解答",
      "title": "不想在项目里手动集成，有没有办法可以不侵入业务项目代码？",
      "content": "PageSpy 为大家准备了浏览器插件，插件提供了以下特性：\n自动注入最新版本的  SDK；\n自动完成实例化操作；\n提供注入的域名配置规则；\n点击前往使用：HuolalaTech/page-spy-extension"
    },
    {
      "language": "zh",
      "route": "/docs/faq#tampermonkey",
      "parent": "常见问题解答",
      "title": "有油猴脚本可以使用吗？",
      "content": "参考以下内容：// ==UserScript==\n// @name         Inject PageSpy Script\n// @namespace    http://tampermonkey.net/\n// @version      0.1\n// @description  Inject script on xxx.yyy\n// @author       You\n// @match        <匹配规则，比如 example.com>\n// @grant        none\n// ==/UserScript==\n\n(function () {\n  'use strict';\n\n  var script1 = document.createElement('script');\n  script1.setAttribute('crossorigin', 'anonymous');\n  // 实际项目中请替换 SDK 的地址连接\n  script1.src = 'https://pagespy.jikejishu.com/page-spy/index.min.js';\n\n  var script2 = document.createElement('script');\n  script2.textContent = 'window.$pageSpy = new PageSpy();';\n\n  document.head.prepend(script1);\n  script1.onload = () => {\n    document.head.appendChild(script2);\n  };\n})();\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#http-error",
      "parent": "常见问题解答",
      "title": "业务项目部署在 HTTPS，PageSpy 部署在 HTTP，控制台报错怎么办？",
      "content": "浏览器会阻止从 HTTPS 站点加载 HTTP 资源，这是因为在 HTTP 和 HTTPS 之间传输数据时，HTTPS 提供了加密和安全性，而 HTTP 则是明文传输，存在安全风险。建议大家直接将 PageSpy 升级到 HTTPS 服务，就可以完美解决。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#prod-debug",
      "parent": "常见问题解答",
      "title": "如何单独对某个用户进行调试？",
      "content": "最简单的方案是让用户使用 PageSpy 的浏览器插件，适用于非常配合的客户且是 PC 端项目的时候，但这个前提条件肉眼可见的非常苛刻；那么如果 H5 项目上生产了想使用 PageSpy 该怎么办？对所有用户都开启这显然不现实。大家可以想想 PageSpy 的生效过程总共就两个步骤：\nhead 标签中通过 <script> 引入 SDK；\n实例化；\nPageSpy 在第二步实例化之前，引入的 <script> 对项目不会产生任何作用。我们想针对某个用户进行调试，关键在第二步：在哪个用户的终端上实例化 PageSpy。对此有两种方案：\n\n动态响应 HTML：如果用户在请求 HTML 时，我们可以拿到用户的唯一标识、并且可以对 HTML 动态注入，那么就可以在向用户返回 HTML 之前决定是否注入 <script> 和实例化的逻辑；\n\n\n让用户使用手势开启：这通常需要用户的主动配合。默认情况下注入 SDK 但不实例化，让用户触发特殊手势后再开启调试；\n\n友情提示：除了技术上的实现之外，需要注意合法合规等安全风险。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#page-principle",
      "parent": "常见问题解答",
      "title": "Page 面板原理",
      "content": "Page 面板是将客户端的 document.documentElement.outerHTML 渲染到调试端的 iframe 中，可以直接通过本地控制台审查元素。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#page-interactive",
      "parent": "常见问题解答",
      "title": "Page 面板渲染的客户端可以直接交互吗？",
      "content": "不可以直接交互。如果需要执行某些交互，可尝试在 Console 面板底部输入代码执行，再返回 Page 面板查看界面反馈。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#page-style",
      "parent": "常见问题解答",
      "title": "Page 面板的样式不正确？",
      "content": "\n客户端和调试端的渲染环境不一致，例如：客户端的浏览器版本是 Chrome 75，调试端的浏览器版本是 Chrome 120；\n调试端访问客户端引用的资源时存在网络限制；\n所以样式仅供参考。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#page-reset",
      "parent": "常见问题解答",
      "title": "Page 面板就不能 100% 还原客户端的内容吗？",
      "content": "SDK 可以对页面进行 “截图” 并发送到调试端，但由于：\n“图片” 比文本的数据体积大，数据交互会增加网络传输开销；\n增加 SDK 的体积和复杂度；\n如果是「样式出错」，远程协同时测试人员可以精准的反馈给开发者；\n出于以上原因，Page 面板的样式仅供参考。"
    },
    {
      "language": "zh",
      "route": "/docs/faq#api-config",
      "parent": "常见问题解答",
      "title": "如何修改 API 服务配置？",
      "content": "当你通过 NPM package 的部署方式在命令行中执行 page-spy-api 时，会在运行目录下面默认生成配置文件 config.json，该文件支持配置运行端口和多实例部署：\n\n修改配置\n{\n  \"port\": \"6752\", //监听端口\n  \"maxLogFileSizeOfMB\": 10240, //日志回放文件保存大小（mb）\n  \"maxLogLifeTimeOfHour\": 720, //日志回放文件保存最长时间 （hour）\n  \"notAllowedDeleteLog\": false, //是否允许删除日志回放\n  \"maxRoomNumber\": 500, //最大允许房间数量\n  \"corsConfig\": {\n    \"allowOrigins\": [\"https://test.huolala.com\"], // 默认配置允许所有域名跨域\n    \"allowHeaders\": [\n      \"Origin\",\n      \"Authorization\",\n      \"Content-Length\",\n      \"X-Request-Id\",\n      \"Content-Type\",\n      \"Referer\",\n      \"User-Agent\",\n      \"Host\"\n    ],\n    \"allowMethods\": [\n      \"HEAD\",\n      \"POST\",\n      \"GET\",\n      \"OPTIONS\",\n      \"PUT\",\n      \"DELETE\",\n      \"UPDATE\"\n    ],\n    \"exposeHeaders\": [\"X-Request-Id\"]\n  }\n}\n\n\n\n多实例部署（需要升级到 1.5.0 版本以上才可以使用）\nrpcAddress 配置是多实例部署配置，其中 ip 和 port 是多个机器 ip 以及 rpc 端口，多个实例通过 rpc 来通信，程序会根据机器 ip 来启动 rpc 服务，所以得保证 ip 不会重复，不然可能会出现消息错乱丢失问题。\n{\n  \"port\": \"6752\",\n  \"rpcAddress\": [\n    {\n      \"ip\": \"192.168.123.1\",\n      \"port\": \"20008\"\n    },\n    {\n      \"ip\": \"192.168.123.2\",\n      \"port\": \"20008\"\n    }\n  ]\n}\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#pnpm",
      "parent": "常见问题解答",
      "title": "通过 pnpm 全局安装的包，使用 pm2 启动报错是为什么？",
      "content": "pnpm 全局安装的包会被 pnpm 用一个 shell 脚本包装，也就是说在执行 pm2 start page-spy-api 时，找到的其实是一个 shell 脚本，pm2 无法解释执行，因此报错。使用 yarn 或者 npm 安装即可解决这个问题，相关的讨论：Unitech/pm2#5416"
    },
    {
      "language": "zh",
      "route": "/docs/faq#upgrade",
      "parent": "常见问题解答",
      "title": "新版本发布后，怎么升级到最新版本？",
      "content": "\n\n如果你使用 docker 部署的：\n# 更新镜像\ndocker pull ghcr.io/huolalatech/page-spy-web:latest\n\n# 停止正在运行的 PageSpy 容器\ndocker stop pageSpy && docker rm -f pageSpy\n\n# 重新运行\ndocker run -d --restart=always -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\n\n\n\n如果你使用 NPM Package 部署的：\n# 更新 package（yarn）\nyarn global upgrade @huolala-tech/page-spy-api@latest\n\n# 更新 package（npm）\nnpm install -g @huolala-tech/page-spy-api@latest\n\n# 使用 pm2 重启\npm2 restart page-spy-api\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#auto-destroy",
      "parent": "常见问题解答",
      "title": "房间连接什么情况下会自动销毁？",
      "content": "\n查看配置：https://github.com/HuolalaTech/page-spy-api/blob/master/room/local_room.go#L297-L323\n\n房间创建后，无 SDK 或调试端进入，1 分钟后销毁（实际使用过程中，该场景不存在）；\nSDK 和调试端都已断开连接，1 分钟后销毁；\n一直没有数据消息交互，5 分钟后销毁；\n连接使用持续超过 1 个小时自动被销毁；\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#alipay-global",
      "parent": "常见问题解答",
      "title": "为何支付宝小程序远程执行代码时无法获取到全局对象如 my.getCurrentPages()？",
      "content": "支付宝小程序由于历史原因，对全局对象的访问做了限制。可以通过小程序配置文件或支付宝小程序 IDE 进行设置：\nIDE：详情 -> 编译配置 -> 全局对象（global/globalThis）访问策略：可访问（推荐）\n配置文件：https://opendocs.alipay.com/mini/03dbc3?pathHash=e876dc50#globalObjectMode\n"
    },
    {
      "language": "zh",
      "route": "/docs/faq#offline-log",
      "parent": "常见问题解答",
      "title": "为什么上传的文件日志不见了？",
      "content": "\n上传的文件日志默认最多保存最新的 10 G，以及 30 天，可以通过修改配置来自定义。\n上传日志保存在运行目录的 log 目录下，docker 运行时候，如果 docker 被销毁日志也会丢失，可以用目录映射 -v ./log:/app/log -v ./data:/app/data 来持久化。\n"
    },
    {
      "language": "zh",
      "route": "/docs/harmony#step-1",
      "parent": "鸿蒙 App",
      "title": "第一步",
      "content": "在待调试 HAP 目录下安装依赖：# API 9\nohpm install @huolala/page-spy-harmony@^1.0.0\n\n# API 11\nohpm install @huolala/page-spy-harmony@^2\n"
    },
    {
      "language": "zh",
      "route": "/docs/harmony#step-2",
      "parent": "鸿蒙 App",
      "title": "第二步",
      "content": "在合适的位置引入 SDK 并初始化，这里以 EntryAbility 为例。初始化参数提供了可选的 配置项 用于自定义 SDK 的行为：import { PageSpy } from '@huolala/page-spy-harmony';\nimport axiosInstance from 'path/to/your/axios-instance';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    new PageSpy({\n      context: this.context,\n      api: \"{deployPath}\",\n      enableSSL: true,\n      axios: axiosInstance\n    })\n  }\n}\n以上就是在鸿蒙 App 项目中接入 PageSpy 的全部流程，接入完成后点击顶部菜单 开始调试 使用！"
    },
    {
      "language": "zh",
      "route": "/docs/introduction#what-is-page-spy",
      "parent": "简介",
      "title": "什么是 PageSpy？",
      "content": "PageSpy 是一款兼容 Web / 小程序 / React Native / 鸿蒙 App 等平台项目的开源调试平台。基于对原生 API 的封装，它将调用原生方法时的参数进行过滤、转化，整理成一定格式的消息供调试端消费；调试端收到消息数据后，提供类似本地控制台的功能界面将数据呈现出来。"
    },
    {
      "language": "zh",
      "route": "/docs/introduction#why-is-page-spy",
      "parent": "简介",
      "title": "为什么是 PageSpy?",
      "content": "\n一图胜千言。\n"
    },
    {
      "language": "zh",
      "route": "/docs/introduction#when-to-use",
      "parent": "简介",
      "title": "何时使用？",
      "content": "任何无法在本地使用控制台调试的场景，都是 PageSpy 可以大显身手的时候！\n一起来看下面的几个场景案例：\n本地调试 H5、Webview 应用：以往有些产品提供了可以在 H5 上查看信息的面板，但移动端屏幕太小操作不便、显示不友好，以及信息被截断等问题；\n远程办公、跨地区协同：传统沟通方式如邮件、电话、视频会议等，沟通效率不高、故障信息不全面，容易误解误判；\n用户终端上出现白屏问题：传统定位问题的方式包括数据监控、日志分析等，这些方式依赖排障人员要理解业务需求场景、技术实现；\nPageSpy 的目标，就是为包括以上场景的人员提供帮助。"
    },
    {
      "language": "zh",
      "route": "/docs/introduction#feature-overview",
      "parent": "简介",
      "title": "界面概览",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/introduction#online-debug",
      "parent": "简介",
      "title": "在线调试",
      "content": "\nConsole 面板: 显示 console.<log | info | warn | error | debug> 输出的日志信息，可以发送代码到客户端执行；\n\nNetwork 面板: 显示客户端发出的网络请求信息；\n\nElement 面板: 显示客户端当前界面，查看 HTML 节点树；\n\nStorage 面板: 查看客户端本地的缓存数据；\n\nSystems 面板: 显示客户端的系统信息，查看兼容性。\n除此之外，当有新的数据或者数据发生变化的时候会实时的收到通知。"
    },
    {
      "language": "zh",
      "route": "/docs/introduction#offline-debugging",
      "parent": "简介",
      "title": "离线回放",
      "content": "回放进度由你把控，随着进度条的播放，可以查看到客户端的操作轨迹，以及对应的数据。"
    },
    {
      "language": "zh",
      "route": "/docs/miniprogram#step-1",
      "parent": "小程序",
      "title": "第一步",
      "content": "在项目中安装依赖。我们提供了几种小程序平台的 SDK，请根据需要安装："
    },
    {
      "language": "zh",
      "route": "/docs/miniprogram#step-2",
      "parent": "小程序",
      "title": "第二步",
      "content": "将 PageSpy 服务域名填入小程序的 http、websocket 请求白名单中。注意除了开发环境，小程序强制要求使用 https 和 wss 协议：https://<your-pagespy-host>\nwss://<your-pagespy-host>\n"
    },
    {
      "language": "zh",
      "route": "/docs/miniprogram#step-3",
      "parent": "小程序",
      "title": "第三步",
      "content": "在入口文件中引入 SDK 并实例化，初始化参数提供了可选的 配置项 用于自定义 SDK 的行为：import PageSpy from '@huolala-tech/page-spy-wechat';\n\nconst $pageSpy = new PageSpy({\n  api: \"{deployPath}\",\n})\n"
    },
    {
      "language": "zh",
      "route": "/docs/miniprogram#menus",
      "parent": "小程序",
      "title": "调试菜单",
      "content": "在创建的 PageSpy 实例上调用 showPanel() 方法可以弹出一个调试菜单用于辅助调试：<img src={mpPanelImg} style={{ maxWidth: 320 }} />以上就是在小程序项目中接入 PageSpy 的全部流程，接入完成后点击顶部菜单 开始调试 使用！"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#why",
      "parent": "离线日志回放",
      "title": "为什么",
      "content": "以往，PageSpy 在线调试解决了很多棘手的问题，但使用 PageSpy 有一个前提条件：「客户端和调试端必须同时在线」。这个前置条件不仅局限了 PageSpy 的使用场景，比如：\n针对一个问题要同时投入开发和测试两个人力；\n调试期间客户端退到后台导致连接断开了；\n同时也给 PageSpy 自身带来边边框框，比如：\n要考虑收集的数据体积、网络传输的压力；\n为了解决这些问题、使用时获得更大自由度，PageSpy 在 1.7.3 版本中提供了日志回放的功能！"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#where",
      "parent": "离线日志回放",
      "title": "日志从哪来",
      "content": "在 PageSpy 的 SDK 支持 注册插件 后，开发团队第一时间推进 DataHarborPlugin 插件的研发。\nData Harbor，数据港口。\n心智模型：PageSpy 产生的数据会源源不断的被送到 “数据港口”，在对数据进行整理、打包、压缩后，“数据港口” 将数据存放在 “集装箱”（内存或本地临时文件）中，等待下一步指示。\n它在内部监听 \"public-data\" 事件（什么是 \"public-data\" 事件？），进而实现离线缓存数据的功能，同时在 SDK 渲染的控件中提供上传、下载数据的功能。当客户端发现问题时，测试同学可以直接上传或者下载数据，这一创新打破了以往「客户端和调试端必须同时在线」的前提要求。"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#how-to-use",
      "parent": "离线日志回放",
      "title": "如何使用",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#browser",
      "parent": "离线日志回放",
      "title": "在浏览器中使用",
      "content": "\n如果仅需要 PageSpy 的离线日志回放功能，我们推荐 O-Spy 的使用方式，集成更简单。\n"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#step-1",
      "parent": "离线日志回放",
      "title": "第一步：客户端引入 SDK 和插件",
      "content": "<html>\n  <head>\n    <!-- 1. 加载 PageSpy -->\n    <script src=\"{deployUrl}/page-spy/index.min.js\"></script>\n    <!-- 2. 加载 DataHarbor 插件：缓存离线日志数据，提供下载 / 上传日志功能 -->\n    <script src=\"{deployUrl}/plugin/data-harbor/index.min.js\"></script>\n    <!-- 3. 同时可以加载 RRWeb 插件，将用户操作轨迹记录到离线日志中 -->\n    <script src=\"{deployUrl}/plugin/rrweb/index.min.js\"></script>\n\n    <script>\n      // 4. 注册插件，config 信息查看：https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-data-harbor\n      PageSpy.registerPlugin(new DataHarborPlugin(config));\n      PageSpy.registerPlugin(new RRWebPlugin());\n\n      // 5. 实例化 PageSpy\n      window.$pageSpy = new PageSpy({\n        // 如果不想 SDK 和调试端建立实时连接，可以开启离线模式\n        // offline: true\n      });\n    </script>\n  </head>\n</html>\n引入成功后页面右下方会出现 PageSpy 的悬浮球，点击悬浮球出现的弹窗中应该包含了上传和下载的按钮。"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#step-2",
      "parent": "离线日志回放",
      "title": "第二步：回放日志",
      "content": "进入调试端，点击顶部菜单「开始调试 - 日志回放」进入回放列表页面，选择上一步上传 / 下载的 json 数据即可开始使用回放功能！"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#plugins",
      "parent": "离线日志回放",
      "title": "配合其他插件使用",
      "content": "DataHarborPlugin 本身只收集数据、提供数据处理的功能，PageSpy 另外还提供了：\nRRWebPlugin: 使用 rrweb 记录 DOM 更新，在调试端的「日志回放」面板左侧用户可以看到页面的操作轨迹；\n"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#use-ospy",
      "parent": "离线日志回放",
      "title": "使用 O-Spy",
      "content": "O-Spy 的 SDK 即插即用、无需部署。它打包了 PageSpy / DataHarborPlugin / RRWebPlugin，内置 PageSpy 在离线状态下的最佳实践配置、同时支持自定义主题，使用非常简单。与框架无关，你可以任选一种方式在项目中引入。import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';引入成功后就会看到右下角出现的 \"问题反馈\" 可拖拽的组件。"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#customize-example",
      "parent": "离线日志回放",
      "title": "自定义主题示例",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#mp",
      "parent": "离线日志回放",
      "title": "在小程序中使用",
      "content": "小程序环境也支持离线日志回放，步骤如下："
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#mp-step-1",
      "parent": "离线日志回放",
      "title": "第一步：安装小程序专用插件",
      "content": "yarn add @huolala-tech/page-spy-plugin-mp-data-harbor\n"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#mp-step-2",
      "parent": "离线日志回放",
      "title": "第二步：注册该插件",
      "content": "import PageSpy from '@huolala-tech/page-spy-wechat';\nimport DataHarborPlugin from '@huolala-tech/page-spy-plugin-mp-data-harbor';\n\n// 注册插件，config 信息查看：https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-mp-data-harbor\nconst $dataHarborPlugin = new DataHarborPlugin(config)\nPageSpy.registerPlugin($dataHarborPlugin);\n\nconst $pageSpy = new PageSpy({\n  // ...\n})\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#mp-step-3",
      "parent": "离线日志回放",
      "title": "第三步：上传离线日志",
      "content": "有两种方式可以上传离线日志：\n调用插件实例上的 upload() 方法：\n$dataHarborPlugin.upload().then(() => {\n  console.log('上传成功');\n})\n\n注册小程序 DataHarbor 插件后，PageSpy 的调试菜单中会出现一个 「上传离线日志」按钮，点击即可上传离线日志：\n<img style={{width: 375}} src={mpDataHarborImg} />"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#diff",
      "parent": "离线日志回放",
      "title": "差异",
      "content": "\n\n小程序环境不支持界面录制，也没有配套的 RRWebPlugin。\n\n\n小程序环境离线日志仅支持上传，不支持下载。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/offline-log#faq",
      "parent": "离线日志回放",
      "title": "FAQ",
      "content": "\n如何手动操作上传 / 下载日志？\n点击查看。\n离线日志存储在哪里？\nDataHarborPlugin 收到数据后，会先放入内存的数组中，当数组里存储的数据体积达到临界值时会将数据写入临时文件，这个临界值默认情况下是 10M。你也可以自行配置:new DataHarborPlugin({\n  maximum: 1 * 1024 * 1024, // 内存中的数据记录达到 1M 时写入临时文件\n})\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#PageSpy-API",
      "parent": "Pagespy",
      "title": "PageSpy API",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#constructor",
      "parent": "Pagespy",
      "title": "constructor()",
      "content": "创建一个 PageSpy 实例。\n\n类型\ndeclare class PageSpy {\n  constructor(config: InitConfig)\n}\n\n\n\n详细信息\n构造函数接受一个 config 对象作为初始化参数。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-api",
      "parent": "Pagespy",
      "title": "config.api",
      "content": "服务端地址。\n\n类型：string\n\n\n\nSDK 会从引入的路径自动分析并决定 Server 的地址api和调试端的地址clientOrigin。假设你通过 <script src=\"https://example.com/page-spy/index.min.js\"> 引入 SDK，那么 SDK 会在内部设置：\n\napi: \"example.com\"\nclientOrigin: \"https://example.com\"\n\n如果你的服务部署在别处，就需要在这里手动指定去覆盖。\n\n\n  \n该字段为必填。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-clientOrigin",
      "parent": "Pagespy",
      "title": "config.clientOrigin ",
      "content": "\n类型：string\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-project",
      "parent": "Pagespy",
      "title": "config.project",
      "content": "作为信息的一种聚合，可以在调试端房间列表进行搜索\n\n类型：string\n\n\n默认值：default\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-title",
      "parent": "Pagespy",
      "title": "config.title",
      "content": "用户自定义参数，可以用于区分当前调试的客户端。对应的信息显示在每个调试连接面板的「设备id」下方。\n\n类型：string\n\n\n默认值：--\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-enableSSL",
      "parent": "Pagespy",
      "title": "config.enableSSL",
      "content": "手动指定 PageSpy 服务的 scheme。\n\n类型：boolean\n\n\n详细信息\n传递 boolean 值：\n\ntrue：SDK 将通过 [\"https://\", \"wss://\"] 访问 PageSpy 服务\nfalse：SDK 将通过 [\"http://\", \"ws://\"] 访问 PageSpy 服务\n\n\n\n不设置该值，SDK 会根据页面所在的地址自动分析。\n在 SDK 无法正确分析出 scheme 时，例如 PageSpy 的浏览器插件是通过 chrome-extension://xxx/sdk/index.min.js 引入 SDK，这会被 SDK 解析成无效的 \"chrome-extension://\" 并回退到[\"http://\", \"ws://\"]。此时可以手动设定该字段。\n\n\n  \n这些环境一般强制要求 https，因此默认为 true。如果需支持 http（一般是在开发环境中），可以设置为 false。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-disabledPlugins",
      "parent": "Pagespy",
      "title": "config.disabledPlugins",
      "content": "PageSpy 内置的插件都是开箱即用的，你可以手动指定禁用哪些插件。\n类型：string[]\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-serializeData",
      "parent": "Pagespy",
      "title": "config.serializeData",
      "content": "是否允许 SDK 在收集离线日志时，序列化非基本类型的数据，序列化的目的是方便在回放时查看。\n类型：boolean\n默认值：false\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-useSecret",
      "parent": "Pagespy",
      "title": "config.useSecret",
      "content": "是否启用权限认证功能。\n\n类型：boolean\n\n\n默认值：false\n\n\n详细信息：\n启用后，SDK会生成 6 位数的随机 “密钥”；调试端进入房间时要求输入对应的密钥。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-messageCapacity",
      "parent": "Pagespy",
      "title": "config.messageCapacity",
      "content": "缓存数据的最大数量。\n\n类型：number\n\n\n默认值：1000\n\n\n详细信息：\nSDK 在调试端进入房间之前会在内存中缓存数据，以便于调试端进入房间后可以看到之前的数据。\n但数据体积会越来越大，因此可以指定 SDK 在本地最多缓存多少条数据记录。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-dataProcessor",
      "parent": "Pagespy",
      "title": "config.dataProcessor",
      "content": "数据处理，用户可以通过该属性自定义修改、忽略数据。\n\n类型：\ndeclare interface DataProcessor {\n  console?: (data: ConsoleData) => boolean;\n  network?: (data: RequestItem) => boolean;\n  storage?: (data: StorageData) => boolean;\n  database?: (data: DatabaseData) => boolean;\n  page?: (data: PageData) => boolean;\n  system?: (data: SystemData) => boolean;\n}\n\n\n\n详细信息\n处理函数分别对应各个内置的插件，用户可以在函数中直接修改数据，函数执行完成后 PageSpy 处理修改后的数据。如果函数返回 false，PageSpy 会 忽略掉该条数据：这意味着在两种模式下的调试端都不会看到这条数据。\n查看详情：https://www.pagespy.org/#/docs/changelog#v1_9_2\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-disabledOnProd",
      "parent": "Pagespy",
      "title": "config.disabledOnProd ",
      "content": "在小程序的生产环境禁用 PageSpy。\n\n类型：boolean\n\n\n默认值：true\n\n\n详细信息：\nPageSpy 作为一款调试工具，主要应用于开发测试环节，不建议在生产环境使用，且小程序平台一般对性能更为敏感，因此该字段默认为 true。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-offline",
      "parent": "Pagespy",
      "title": "config.offline ",
      "content": "离线模式。\n\n类型：boolean\n\n\n默认值：false\n\n\n详细信息：\n在 PageSpy@1.7.4 支持离线回放功能后，客户端集成的 SDK 可以不用和调试端建立连接，通过 DataHarborPlugin 收集数据、导出离线日志，成为新的使用方式。\n默认值 false。用户设置为 Truthy 值，会进入 \"离线模式\"，具体表现为 PageSpy 不会创建房间、建立 WebSocket 连接。\n目前仅适用浏览器环境的 SDK。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-autoRender",
      "parent": "Pagespy",
      "title": "config.autoRender ",
      "content": "指示 SDK 初始化完成，是否自动在客户端左下角渲染「圆形白底带 Logo」的控件。\n\n类型：boolean\n\n\n默认值：true\n\n\n详细信息：\n如果设置为 false, 可以调用 window.$pageSpy.render() 手动渲染。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-logo",
      "parent": "Pagespy",
      "title": "config.logo ",
      "content": "自定义控件渲染的 logo\n类型：string\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-primaryColor",
      "parent": "Pagespy",
      "title": "config.primaryColor ",
      "content": "设置主题色，用于 modal 和 toast 中。\n类型：string\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-modal",
      "parent": "Pagespy",
      "title": "config.modal ",
      "content": "设置 modal 里的 logo 和 title。\n\n类型：\ndeclare interface ModalConfig {\n  logo?: string;\n  title?: string;\n}\n\n\n\n默认值：\n{\n  logo: \"\",\n  title: \"PageSpy\"\n}\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config-gesture",
      "parent": "Pagespy",
      "title": "config.gesture ",
      "content": "通过手势操作或键盘方向键启用 PageSpy。\n\n类型：Command | null。\n手势识别依赖于 iseedeadpeople，其 Command 定义如下：\ndeclare const DIRECTION_CHARACTERS: readonly [\"U\", \"R\", \"D\", \"L\"];\ntype Direction = (typeof DIRECTION_CHARACTERS)[number];\n\ntype Command = readonly Direction[];\n\n\n\n默认值：null，禁用手势。\n\n\n示例\nnew PageSpy({\n  ...,\n  // 仅当用户完成 \"上上下下左右左右\" 的手势或方向键输入时，PageSpy 才会启用\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#registerPlugin",
      "parent": "Pagespy",
      "title": "registerPlugin()",
      "content": "静态方法，注册一个插件。\n\n类型\ndeclare class PageSpy {\n  static registerPlugin(plugin: PageSpyPlugin): void;\n}\n\n\n\n详细信息\n在实例化 PageSpy 之前调用，参数是实现了 PageSpyPlugin 的插件实例，每个插件实例都应带有 name 属性。同样名称的插件如果重复注册，插件实例只会被注册一次，同时控制台会打印警告信息。\n\n\n示例\nclass DataHarborPlugin implements PageSpyPlugin {\n  name = 'DataHarborPlugin'\n\n  ... // 插件的实现\n}\n\nPageSpy.registerPlugin(new DataHarborPlugin());\n\n// 重复调用，插件只会被注册一次\n// PageSpy.registerPlugin(new DataHarborPlugin());\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#pluginsWithOrder",
      "parent": "Pagespy",
      "title": "pluginsWithOrder",
      "content": "按插件的 enforce 属性排序的已注册插件列表。\n\n类型\ndeclare class PageSpy {\n  static plugins: Record<PluginOrder | 'normal', PageSpyPlugin[]>;\n  static get pluginsWithOrder(): PageSpyPlugin[];\n}\n\n\n\n详细信息\n每个插件都应提供 enforce: PluginOrder 属性，如果未提供则默认为 enforce: \"normal\"，之后 PageSpy 会按照 pre - normal - post 的顺序维护插件列表。\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#updateRoomInfo",
      "parent": "Pagespy",
      "title": "updateRoomInfo()",
      "content": "实例化之后，更新连接信息。\n\n类型\ntype UpdateConfig = {\n    title?: string;\n    project?: string;\n};\n\ndeclare class PageSpy {\n  updateRoomInfo(obj: UpdateConfig): void;\n}\n\n\n\n详细信息\n客户端的标识信息在 PageSpy 初始化的时候如果还不知道，之后可以通过这个方法更新。\n\n\n示例\nwindow.$pageSpy = new PageSpy({\n  title: '--',\n  project: '--'\n})\n\nasync function YourCode() {\n  // 业务逻辑异步加载客户端标识，比如：当前用户、当前项目\n  const { title, project } = await xxx();\n\n  window.$pageSpy.updateRoomInfo({\n    title,\n    project\n  })\n}\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#abort",
      "parent": "Pagespy",
      "title": "abort()",
      "content": "销毁当前实例。\n\n类型\ndeclare class PageSpy {\n  abort(): void;\n}\n\n\n\n详细信息\nPageSpy 会断开连接、从文档中移除相关 DOM、清空已缓存的数据、调用所有已注册插件的 onReset() 方法。\n当前上下文中被代理或者被重写的 API，如浏览器中的 window.fetch，都会恢复到实例化 PageSpy 之前的状态。\n\n\n示例\nwindow.$pageSpy = new PageSpy(...);\n\nwindow.$pageSpy.abort();\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#version",
      "parent": "Pagespy",
      "title": "version",
      "content": "当前使用的 PageSpy 版本。\n\n类型\ndeclare class PageSpy {\n  version: string;\n}\n\n\n\n示例\nwindow.$pageSpy = new PageSpy(...);\n\nconsole.log(window.$pageSpy.version);\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#config",
      "parent": "Pagespy",
      "title": "config",
      "content": "配置信息。配置因平台不同存在差异，比如小程序端特有的 config.disableOnProd。\n\n类型\ndeclare class PageSpy {\n  config: Config;\n}\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#socketStore",
      "parent": "Pagespy",
      "title": "socketStore",
      "content": "封装了 WebSocket 实例，提供注册消息事件、收到指定消息后触发回调，广播消息。\n\n类型\ninterface SocketStoreType {\n  addListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  addListener(type: InternalType, fn: InternalEventCallback): void;\n\n  removeListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  removeListener(type: InternalType, fn: InternalEventCallback): void;\n\n  dispatchEvent(type: InteractiveType | InternalType, data: InteractiveEvent): void;\n  dispatchEvent(type: InternalType, data: any): void;\n\n  broadcastMessage(message: MessageItem, noCache?: boolean): void;\n}\n\n\n\n详细信息\naddListener() / removeListener() / dispatchEvent() 的第一个参数是消息类型，我们把消息类型分为 “交互式的” 和 “内部的” 两种：\n\n“交互式的” 消息类型用于和调试端交互，例如：调试端上线、发送代码到客户端执行、点击展开对象详情，这些都会作为消息事件发送到 SDK，SDK 按需做出响应；\n“内部的” 消息类型当前用于插件之间交互，例如各个插件产生数据后会通过 socketStore.dispatchEvent('public-data') 派发事件，同为插件的 DataHarborPlugin 监听了这个事件后可以对数据另作处理。\n\nbroadcastMessage() 广播消息。第一个参数是来自各个插件发给调试端的数据，第二个参数 noCache 用于插件告知 socketStore 当前发送的这条消息是否应该被缓存。把数据缓存下来的目的是当调试端 “上线” 后可以看到历史的消息，但并不是所有的数据都需要缓存，例如：客户端发起网络请求，无论成功或失败，只需要缓存最终态的。\n\n\n示例\n// ConsolePlugin 的具体实现请前往仓库查看\nclass ConsolePlugin implements PageSpyPlugin {\n  onInit({ socketStore }) {\n    socketStore.addListener('debug', ({ source }, reply) => {\n      ...\n    })\n\n    socketStore.broadcastMessage(...)\n  }\n}\n\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/pagespy#showPanel",
      "parent": "Pagespy",
      "title": "showPanel() ",
      "content": "在小程序环境中弹出调试面板。\n\n类型\ndeclare class PageSpy {\n  showPanel(): void;\n}\n\n\n\n详细信息\n<img src={mpPanelImg} style={{width: 375}} />\n该面板支持插件注册自定义按钮，例如如果注册了 DataHarborPlugin，该面板中会出现一个「上传离线日志」按钮：\n<img src={mpDataHarborImg} style={{maxWidth: 375}} />\n\n"
    },
    {
      "language": "zh",
      "route": "/docs/plugins#definition",
      "parent": "插件系统",
      "title": "类型定义",
      "content": "export abstract class PageSpyPlugin {\n  /**\n   * 每个插件都要求指定 name，会作为当前插件的 \"身份标识\"。\n   * 在 PageSpy 内部的注册插件、禁用插件的功能都依赖 name 属性\n   */\n  public abstract name: string;\n\n  /**\n   * 指定插件加载顺序，插件调用顺序遵循：\n   *   1. 插件包含 enforce: \"pre\" 属性；\n   *   2. 插件不包含 enforce 属性；\n   *   3. 插件包含 enforce: \"post\" 属性；\n   */\n  public abstract enforce?: PluginOrder;\n\n  // new PageSpy() 时调用\n  public abstract onInit: (params: OnInitParams) => any;\n\n  // 在 PageSpy 渲染完成后调用（如果有渲染过程的话）\n  public abstract onMounted?: (params: OnMountedParams) => any;\n\n  // 当用户不再需要 PageSpy 时，插件应具备 重置/恢复 功能\n  public abstract onReset?: () => any;\n}\n\nexport interface OnInitParams {\n  // 已经合并了用户传入的实例化参数的配置信息\n  config: Required<InitConfig>;\n\n  // 包装了 socket 实例，插件开发者可以通过该属性与调试端 / API 交互\n  socketStore: SocketStoreType;\n}\n\nexport interface OnMountedParams {\n  // PageSpy 渲染的根节点\n  root?: HTMLDivElement;\n\n  // PageSpy 渲染的弹窗的根节点\n  content?: HTMLDivElement;\n\n  // 包装了 socket 实例，插件开发者可以通过该属性与调试端 / API 交互\n  socketStore: SocketStoreType;\n}\n"
    },
    {
      "language": "zh",
      "route": "/docs/plugins#convention",
      "parent": "插件系统",
      "title": "行为约定",
      "content": "如果当前插件会收集（或者希望对外公开）平台的某种行为「数据」，那么除了在 socketStore 广播数据外，我们约定插件在 socketStore 实例上额外派发一个 \"public-data\" 内部事件（Internal Event）。此举的目的是为了满足有统计需求或者持久化需求的插件能够从这个事件中统一收集数据，插件如果觉得某类数据不应该被 “公开”，则无需派发 \"public-data\" 事件。"
    },
    {
      "language": "zh",
      "route": "/docs/plugins#demo",
      "parent": "插件系统",
      "title": "插件实现案例",
      "content": "参考 DataHarborPlugin 和 RRWebPlugin。"
    },
    {
      "language": "zh",
      "route": "/docs/plugins#usage",
      "parent": "插件系统",
      "title": "插件的使用方式",
      "content": "<!-- 引入 SDK -->\n<script src=\"https://<your-pagespy-host>/page-spy/index.min.js\"></script>\n<!-- 引入插件 -->\n<script src=\"https://<your-pagespy-host>/plugin/xxx/index.min.js\"></script>\n\n<!-- 注册插件 -->\n<script>\n  PageSpy.registerPlugin(new XXXPlugin());\n  window.$pageSpy = new PageSpy();\n</script>\n"
    },
    {
      "language": "zh",
      "route": "/docs/react-native#step-1",
      "parent": "React Native",
      "title": "第一步",
      "content": "在项目中安装依赖：yarn add @huolala-tech/page-spy-react-native@latest\n"
    },
    {
      "language": "zh",
      "route": "/docs/react-native#step-2",
      "parent": "React Native",
      "title": "第二步",
      "content": "在入口文件中引入 SDK 并实例化。 初始化参数提供了可选的 配置项 用于自定义 SDK 的行为：import PageSpy from '@huolala-tech/page-spy-react-native';\n\nnew PageSpy({\n  api: \"{deployPath}\",\n})\n如果你使用 @react-native-async-storage/async-storage，我们提供了独立的 插件：import { PageSpy } from '@huolala-tech/page-spy-react-native';\nimport RNAsyncStoragePlugin from '@huolala-tech/page-spy-plugin-rn-async-storage';\n\nPageSpy.registerPlugin(new RNAsyncStoragePlugin())\nnew PageSpy({\n  api: \"{deployPath}\",\n})\n以上就是在 React Native 项目中接入 PageSpy 的全部流程，接入完成后点击顶部菜单 开始调试 使用！"
    },
    {
      "language": "zh",
      "route": "/docs/rrweb#api",
      "parent": "RRWebPlugin",
      "title": "RRWebPlugin API",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/docs/rrweb#constructor",
      "parent": "RRWebPlugin",
      "title": "constructor()",
      "content": "\n\n类型\nimport type { recordOptions } from 'rrweb/typings/types';\nimport type { eventWithTime } from '@rrweb/types';\n\ninterface Options extends recordOptions<eventWithTime> {\n  // 预留配置，暂不可用\n  allowOnline?: true;\n}\ndeclare class RRWebPlugin implements PageSpyPlugin {\n    constructor(options?: Options);\n}\n\n\n"
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/faq#diff-with-page-spy",
      "parent": "常见问题解答",
      "title": "O-Spy 和 PageSpy 是什么关系？",
      "content": "O-Spy 是基于 PageSpy 及其插件生态的能力构建而来，具体而言，它打包了以下三个依赖：\n@huolala-tech/page-spy-browser；\n@huolala-tech/page-spy-plugin-rrweb；\n@huolala-tech/page-spy-plugin-data-harbor；\n两者的区别主要体现在：\n\n\n\nO-Spy\nPageSpy\n\n\n\n\n是否需要部署\n否\n是\n\n\n在线实时调试\n❌\n✅\n\n\n离线回放调试\n✅\n✅\n\n\n上传数据\n🟡 需自行处理\n✅\n\n\n下载数据\n✅\n✅\n\n\n"
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/faq#where-data-stored",
      "parent": "常见问题解答",
      "title": "O-Spy 记录的数据存储在哪里？",
      "content": "所有数据都在用户本地，不会上传到任何第三方服务器。数据存储策略：O-Spy 收到数据后先放入内存的数组中，当数组里存储的数据体积达到临界值时会将数据写入临时文件，这个临界值是 10M（点击查看 源码），刷新页面时所有数据被销毁。"
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/introduction#what-is-ospy",
      "parent": "简介",
      "title": "什么是 O-Spy？",
      "content": "O-Spy（发音 /əʊ spaɪ/，类似 \"Oh-Spy\"）是一个在 Web 项目中「离线记录程序运行数据」的调试工具，记录的数据可通过 O-Spy 平台回放，点击查看演示。工作流程如下图："
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/introduction#quick-start",
      "parent": "简介",
      "title": "快速上手",
      "content": ""
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/introduction#step-1",
      "parent": "简介",
      "title": "第一步：引入 O-Spy",
      "content": "与框架无关，你可以按你喜欢的方式在项目中引入。import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';项目引入成功后就会看到屏幕右下角所示的 \"O-Spy\" 可拖拽的组件，试着点开看看 :)import { CallOSpy } from '../md-components/CallOSPy';"
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/introduction#step-2",
      "parent": "简介",
      "title": "第二步：导出数据",
      "content": "当前页面已经集成了 O-Spy，将它设想成你的项目页面，我们让程序产生一些数据。随意点击下方按钮：import { MakeData } from '../md-components/MakeData'随后点击 O-Spy 悬浮按钮打开弹窗、点击 “导出日志”，这将会下载一个 json 文件。"
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/introduction#step-3",
      "parent": "简介",
      "title": "第三步：回放",
      "content": "前往 回放页面，点击左上角的 “选择日志”、选择我们刚刚导出的 json 文件后即可开始回放！"
    },
    {
      "language": "zh",
      "route": "/o-spy/docs/theme#customize-example",
      "parent": "自定义主题",
      "title": "案例演示",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    }
  ],
  "ja": [
    {
      "language": "ja",
      "route": "/docs/api#pagespy",
      "parent": "API",
      "title": "PageSpy",
      "content": "\nインスタンス変数名を $pageSpy とします。\n\nconstructor()\n$pageSpy.updateRoomInfo()\n$pageSpy.abort()\nPageSpy.registerPlugin()\nPageSpy.pluginsWithOrder\n$pageSpy.version\n$pageSpy.config\n$pageSpy.socketStore\n$pageSpy.showPanel() \n"
    },
    {
      "language": "ja",
      "route": "/docs/api#plugins",
      "parent": "API",
      "title": "プラグイン",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/api#harbor",
      "parent": "API",
      "title": "DataHarborPlugin",
      "content": "\nインスタンス変数名を $harbor とします。\n\nconstructor()\n手動操作ログ\n$harbor.pause()\n$harbor.resume()\n$harbor.reharbor()\n"
    },
    {
      "language": "ja",
      "route": "/docs/api#rrweb",
      "parent": "API",
      "title": "RRWebPlugin",
      "content": "\nインスタンス変数名を $rrweb とします。\n\nconstructor()\n"
    },
    {
      "language": "ja",
      "route": "/docs/browser#online",
      "parent": "ブラウザ",
      "title": "オンライン体験",
      "content": "\n完全なコードを表示するにはクリックしてください: Codesandbox\n"
    },
    {
      "language": "ja",
      "route": "/docs/browser#usage",
      "parent": "ブラウザ",
      "title": "使用方法",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/browser#step-1",
      "parent": "ブラウザ",
      "title": "ステップ1",
      "content": "クライアントプロジェクトに <script> をロードします:<!-- PageSpy SDK -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/page-spy/index.min.js\"></script>\n\n<!-- プラグイン（必須ではありませんが、使用を推奨します） -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/data-harbor/index.min.js\"></script>\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/rrweb/index.min.js\"></script>\n"
    },
    {
      "language": "ja",
      "route": "/docs/browser#step-2",
      "parent": "ブラウザ",
      "title": "ステップ2",
      "content": "PageSpy とプラグインを初期化します。それらの初期化パラメーターは、SDK の動作をカスタマイズするための設定項目を提供します:  独自の PageSpy プラグインを開発することも可能です！ \n</div>\n<script>\n  window.$harbor = new DataHarborPlugin();\n  window.$rrweb = new RRWebPlugin();\n</script>\n\n[window.$harbor, window.$rrweb].forEach(p => {\n  PageSpy.registerPlugin(p)\n})\n\nwindow.$pageSpy = new PageSpy();\n</script>\n以上で、ブラウザプロジェクトで PageSpy を使用するためのすべての手順が完了です。ページの上部メニューをクリックして 開始デバッグ を使用してください！"
    },
    {
      "language": "ja",
      "route": "/docs/browser#framework",
      "parent": "ブラウザ",
      "title": "フレームワークで統合",
      "content": "PageSpy は、現在のところ、すべてのフレームワークの統合ガイドを CodeSandbox プラットフォームで公開しています。以下にアクセスして、オンラインで体験してください:\nReact：CodeSandbox - PageSpy in React\nVue：CodeSandbox - PageSpy in Vue\nSvelte：CodeSandbox - PageSpy in Svelte\nAngular：CodeSandbox - PageSpy in Angular\nNextjs：CodeSandbox - PageSpy in Nextjs\nNuxtjs：CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "ja",
      "route": "/docs/browser#extension",
      "parent": "ブラウザ",
      "title": "ブラウザ拡張機能",
      "content": "PageSpy は、ブラウザ拡張機能を提供して、ページをデバッグするためのコードを統合することなく、任意のページで PageSpy を使用できるようにします。はい、その通りです！PageSpy のブラウザ拡張機能を使用すると、ページをデバッグするためのコードを統合することなく、任意のページで PageSpy を使用できます。"
    },
    {
      "language": "ja",
      "route": "/docs/browser#install-extension",
      "parent": "ブラウザ",
      "title": "インストール",
      "content": "ブラウザ拡張機能 リポジトリにアクセスし、README ドキュメントに従ってインストールしてください。"
    },
    {
      "language": "ja",
      "route": "/docs/browser#extension-panel",
      "parent": "ブラウザ",
      "title": "パネルパラメーター",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-2-0",
      "parent": "Changelog",
      "title": "v2.2.0",
      "content": "\n🆕 公式サイトに O-Spy が公開されました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/315;\n🆕 新しい @huolala-tech/page-spy-plugin-ospy オフライン記録プラグインを追加しました;\n🟡 @huolala-tech/page-spy-plugin-whole-bundle は廃止され、新機能は追加されません;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-1-3",
      "parent": "Changelog",
      "title": "v2.1.3",
      "content": "\n🐛 リプレイページの Network パネルにフィルター機能を追加しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-1-2",
      "parent": "Changelog",
      "title": "v2.1.2",
      "content": "\n🆕 リプレイページのユーザートレースパネルが基本的な選択操作をサポートするようになりました;\n🆕 ウェブページの静的リソースリクエストの表示をサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/309;\n🐛 ブラウザ SDK の操作時間範囲ログがエラーを引き起こす問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/131;\n🐛 非同期コピーが失敗する問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/130;\n🐛 uni.request の戻り値の問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/issues/306;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-1-1",
      "parent": "Changelog",
      "title": "v2.1.1",
      "content": "\n🆕 ブラウザ SDK がジェスチャーで動的に起動することをサポートしました。 使用説明 を参照してください;\nnew PageSpy({\n  ...,\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-1-0",
      "parent": "Changelog",
      "title": "v2.1.0",
      "content": "\n🆕 WholeBundlePlugin をリファクタリングし、公式サイトのリプレイラボページを更新しました：https://github.com/HuolalaTech/page-spy/pull/125 、https://github.com/HuolalaTech/page-spy-web/pull/304;\n🆕 ソースコードの位置特定機能を最適化しました：https://github.com/HuolalaTech/page-spy-web/pull/300;\n🆕 ミニプログラムに System パネルを追加しました：https://github.com/HuolalaTech/page-spy/pull/123 、https://github.com/HuolalaTech/page-spy-web/pull/299;\n🆕 ミニプログラムのオフラインログ機能の互換性を最適化しました;\n🆕 フローティングボールの位置を記憶する機能を追加しました：https://github.com/HuolalaTech/page-spy/pull/126;\n🆕 ブラウザ SDK に CSS 特性検出機能を追加しました：https://github.com/HuolalaTech/page-spy/pull/128;\n🐛 いくつかの問題を修正しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-0-2",
      "parent": "Changelog",
      "title": "v2.0.2",
      "content": "\n🐛 DataHarborPlugin のデフォルト値がダウンロードに失敗する問題を修正しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-0-1",
      "parent": "Changelog",
      "title": "v2.0.1",
      "content": "\n🆕 DataHarborPlugin に onAfterUpload パラメータを追加し、アップロード後の動作をカスタマイズできるようにしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/119;\n🐛 いくつかの問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/118 、https://github.com/HuolalaTech/page-spy/pull/120;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v2-0-0",
      "parent": "Changelog",
      "title": "v2.0.0",
      "content": "\n🆕 ブラウザポップアップの改訂版がリリースされ、テーマカラーやブランドのカスタマイズ、時間範囲ログセレクター、メモフィールドが追加されました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/113;\n🆕 ミニプログラムでポップアップを表示する方法が追加され、オフラインログのアップロードをサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/112;\n🐛 いくつかの問題を修正しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-9-6",
      "parent": "Changelog",
      "title": "v1.9.6",
      "content": "\n🆕 DataHarborPlugin プラグインに新しいプロトタイプメソッドを追加しました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/110;\n\n$harbor.pause()：記録を一時停止します;\n$harbor.resume(): 記録を再開します。pause() と対応しています;\n$harbor.reharbor()：記録されたデータをクリアし、再作成します。\n\n\n🆕 リプレイページで「オブジェクトを展開できない」場合のヒントを追加しました;\n🐛 application/x-www-form-urlencoded のペイロード表示を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/issues/267;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-9-5",
      "parent": "Changelog",
      "title": "v1.9.5",
      "content": "\n🆕 DockerHub イメージを追加しました: https://hub.docker.com/r/huolalatech/page-spy-web;\n🆕 宝塔のワンクリックデプロイメントドキュメントを追加しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-9-4",
      "parent": "Changelog",
      "title": "v1.9.4",
      "content": "\n🐛 いくつかの問題を修正しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-9-3",
      "parent": "Changelog",
      "title": "v1.9.3",
      "content": "\n🆕 デバッグ端の Network パネルにキーワードフィルタリングを追加しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/262;\n🆕 デバッグ端のログリプレイページの Console パネルがスクロールに追従し、メッセージ通知を最適化しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/264;\n🐛 SDK の ErrorPlugin のエラーメッセージを最適化しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-9-2",
      "parent": "Changelog",
      "title": "v1.9.2",
      "content": "\n\n🆕 インスタンス化パラメータに dataProcessor オプションを追加し、データのフィルタリングや処理を行えるようにしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/106;\n\nwindow.$pageSpy = new PageSpy({\n  ...,\n  dataProcessor: {\n    console: (data) => {\n      // 出力内容に \"secret\" 文字が含まれている場合は無視（デバッグ端に送信されません）\n      if (data.logs.some(i => typeof i === 'string' && i.includes('secret'))) return false;\n    },\n    network: (data) => {\n      // データポイントのリクエストを無視\n      if (/(sentry|metric|collect)/.test(data.url)) return false\n    },,\n    storage: (data) => {\n      // cookie のキーがアンダースコアで始まる場合、デバッグ端で見える値を \"*******\" にする\n      if (data.type === \"cookie\" && data.action === \"get\") {\n        data.data.forEach((i) => {\n          if (i.name.startsWith(\"_\")) {\n            i.value = \"*******\";\n          }\n        });\n      }\n    },\n  },\n});\n\n\n\n\n🆕 アップロードされるログデータを調整しました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/107;\n\n\n🆕 インタラクションを調整しました。\n\nログリプレイの進行バーをクリックすると再生状態を保持します。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/258;\nテーブルヘッダーがドラッグ可能になりました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/257;\nHuawei ブラウザの識別をサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/256;\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-9-1",
      "parent": "Changelog",
      "title": "v1.9.1",
      "content": "\n\n🆕 インスタンス化パラメータに serializeData オプションを追加し、非基本型データのシリアル化を許可するようにしました。デフォルト値は false です。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/103 / https://github.com/HuolalaTech/page-spy-web/pull/241;\n有効にすると、console のデータがログリプレイページで展開できるようになります。使用方法：\nwindow.$pageSpy = new PageSpy({\n  ...\n  // 注意：シリアル化過程で副作用が発生する可能性があるため、デフォルトでは false に設定されています;\n  serializeData: true\n})\n\n\n\n🆕 Network パネルの表示情報を最適化しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/239;\n\n\n🆕 リプレイページで canvas の内容を再生できるようになりました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/238;\n\n\n🆕 リプレイページで操作軌跡の表示を最適化しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/244 / https://github.com/HuolalaTech/page-spy-web/pull/247;\n\n\n🐛 いくつかの問題を修正しました;\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-9-0",
      "parent": "Changelog",
      "title": "v1.9.0",
      "content": "\n🆕 新しいドキュメントページがリリースされました;\n🆕 動的実行コードの能力を小さなプログラム SDK から独立したプラグイン @huolala-tech/page-spy-plugin-mp-eval に抽出し、小さなプログラムの審査に対する影響を軽減しました;\n🆕 小さなプログラムの互換性を最適化しました：https://github.com/HuolalaTech/page-spy-web/issues/199;\n🐛 小さなプログラムの getAccountInfoSync 互換性の問題を修正しました: https://github.com/HuolalaTech/page-spy-web/issues/213;\n🐛 小さなプログラムの updateRoomInfo 型定義を透過的に渡す問題を修正しました: https://github.com/HuolalaTech/page-spy-web/issues/213;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-10",
      "parent": "Changelog",
      "title": "v1.8.10",
      "content": "本更新では「エラー位置特定」機能に対して多くの最適化を行いました。具体的な内容は以下の通りです：\n🆕 「ログリプレイページ」のエラーにもソースコードの位置特定機能をサポートしました;\n🆕 以前はエラーのみサポートしていたソースコードの位置特定機能を、console.xxx(Error) にも対応させました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/212;\n🆕 ソースコードの位置特定機能で、\\t が存在する場合に 1 つのタブ = N 個のスペースに変換するオプションを追加しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/212;\n🐛 ロゴのインタラクションの問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/issues/211;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-9",
      "parent": "Changelog",
      "title": "v1.8.9",
      "content": "\n🆕 React Native アプリケーションのデバッグをサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/87 / https://github.com/HuolalaTech/page-spy-web/pull/190;\n🆕 鸿蒙 App のデバッグをサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/88 / https://github.com/HuolalaTech/page-spy-web/pull/191;\n🆕 Web アプリケーションで EventSource リクエストのレスポンスデータを表示できるようになりました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/206 / https://github.com/HuolalaTech/page-spy-web/issues/202 / https://github.com/HuolalaTech/page-spy-web/issues/183;\n🆕 メッセージタイプを最適化し、デバッグ端のインタラクションがより迅速になりました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/91 / https://github.com/HuolalaTech/page-spy-web/pull/201;\n🆕 ルームリストページで最大 30 個のパネルを表示するように制限しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/204;\n🐛 pageSpy.abort() が誤ってイベントをクリアする問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/issues/205 / https://github.com/HuolalaTech/page-spy/pull/95;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-8",
      "parent": "Changelog",
      "title": "v1.8.8",
      "content": "\n🆕 ログリプレイページのオフラインログの再生インタラクションを最適化しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/issues/186;\n🆕 UniApp をネイティブアプリにパッケージングした場合のデバッグをサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/90 / https://github.com/HuolalaTech/page-spy-web/pull/197;\n🐛 ネットワークリクエストヘッダーに自己参照が存在する場合のパネルの表示が不正確になる問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/89 / https://github.com/HuolalaTech/page-spy-web/issues/193;\n🐛 Page パネルの HTML タグの表示が不正確になる問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/pull/196;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-7",
      "parent": "Changelog",
      "title": "v1.8.7",
      "content": "\n🆕 SDK のメッセージ送信タイミングを最適化しました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/84;\n🐛 SDK の再接続が異常になる問題を修正しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-6",
      "parent": "Changelog",
      "title": "v1.8.6",
      "content": "\n🆕 SDK が断続的に接続を失った場合、指数関数的に再接続を試みます（強制的にルームを作成します）。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 SDK に useSecret パラメータを追加し、デフォルト値は false です。設定すると SDK はルームを生成する際に 6 桁のランダムパスワードを使用します。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 動的に title / project パラメータを更新できるようになりました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 ブラウザ SDK のフローティングボールが上、下、左、右に配置された場合、自動的に収まるようになりました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/80;\n🆕 デバッグ端のルームリストページの表示を最適化しました;\n🆕 サーバーのログデータシリアル化を最適化し、パフォーマンスを大幅に向上させました;\n🐛 いくつかの問題を修正しました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/issues/172 / https://github.com/HuolalaTech/page-spy/pull/79;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-5",
      "parent": "Changelog",
      "title": "v1.8.5",
      "content": "\n🆕 サポートされていないシステムアーキテクチャを削除しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-4",
      "parent": "Changelog",
      "title": "v1.8.4",
      "content": "\n🆕 SDK のキャッシュポリシーを最適化し、メモリ使用量を大幅に減らしました。詳細はこちら：https://github.com/HuolalaTech/page-spy-web/issues/169;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-3",
      "parent": "Changelog",
      "title": "v1.8.3",
      "content": "\n🆕 Taro アプリケーションのデバッグをサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/83 / https://github.com/HuolalaTech/page-spy-web/pull/184;\n🆕 鸿蒙 App のデバッグをサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/84 / https://github.com/HuolalaTech/page-spy-web/pull/185;\n🐛 NetworkPlugin のリクエストエラー時の処理動作を最適化しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-2",
      "parent": "Changelog",
      "title": "v1.8.2",
      "content": "\n🆕 前のバージョンの npm パッケージが一部のシステムアーキテクチャでインストールできない問題を修正しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-1",
      "parent": "Changelog",
      "title": "v1.8.1",
      "content": "\n🆕 小さなプログラムの統合ドキュメントに「注意事項」を追加しました;\n🆕 ログリプレイページの進捗バーにアクティビティの集計情報を表示しました;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#v1-8-0",
      "parent": "Changelog",
      "title": "v1.8.0",
      "content": "\n🆕 小さなプログラムでコードを送信して実行する機能をサポートしました;\n🆕 DataHarborPlugin はオフラインログをアップロードする機能をサポートしました。詳細はこちら：https://github.com/HuolalaTech/page-spy/pull/76 / https://github.com/HuolalaTech/page-spy-web/pull/173;\n🆕 ログリプレイページの機能を最適化しました：サイズの変更、倍速再生;\n"
    },
    {
      "language": "ja",
      "route": "/docs/changelog#More---",
      "parent": "Changelog",
      "title": "More...",
      "content": "以前のリリース内容はこちら：https://github.com/HuolalaTech/page-spy-web/releases を参照してください。"
    },
    {
      "language": "ja",
      "route": "/docs/data-harbor#api",
      "parent": "DataHarborPlugin",
      "title": "DataHarborPlugin API",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/data-harbor#constructor",
      "parent": "DataHarborPlugin",
      "title": "constructor()",
      "content": "\n\n型定義\ninterface DataHarborConfig {\n  // オフラインログデータは最初にメモリに記録され、サイズが指定値に達すると一時ファイルに書き込まれます\n  // デフォルト値は 10M (10 * 1024 * 1024)\n  maximum?: number; // ブラウザのみサポート\n\n  // キャッシュするデータタイプを指定\n  caredData?: Record<DataType, boolean>;\n\n  // オフラインログのファイル名を指定、デフォルトは現在時刻に基づいて命名\n  filename?: () => string;\n\n  // ダウンロードロジックをカスタマイズ\n  onDownload?: (data: CacheMessageItem[]) => void; // ブラウザのみサポート\n\n  // アップロード成功後のコールバック、開発者への通知など他の機能を拡張可能\n  onAfterUpload?: (replayUrl: string, remark: string) => void;\n}\n\ndeclare class DataHarborPlugin implements PageSpyPlugin {\n  constructor(config?: DataHarborConfig);\n}\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/data-harbor#onOfflineLog",
      "parent": "DataHarborPlugin",
      "title": "手動でログを操作",
      "content": "オフラインログのダウンロード・アップロードを手動で操作します。\n\n型定義\ninterface WholeLogActionParams {\n  clearCache?: boolean;\n  remark?: string;\n}\n\ninterface PeriodLogActionParams {\n  startTime: number;\n  endTime: number;\n  remark?: string;\n}\n\n// 注意！\n// - ブラウザは以下の4つのメソッドをサポート\n// - ミニプログラムは現在 upload() メソッドのみサポート\ndeclare class DataHarborPlugin {\n  // 全量ログ\n  upload(params?: WholeLogActionParams): Promise<string>;\n  download(params?: WholeLogActionParams): Promise<void>;\n\n  // 期間指定ログ\n  uploadPeriods(params: PeriodLogActionParams): Promise<string>;\n  downloadPeriods(params: PeriodLogActionParams): Promise<void>;\n}\n\n\n\n詳細情報\n自動レンダリングされる UI コントロールを非表示にした場合や、特定のタイミングでオフラインログの操作を自動的にトリガーしたい場合に、このメソッドを使用できます。\n全量ログを操作する場合、UI ポップアップのボタンを通じてログのアップロード/ダウンロードを行うと、現在のセッションの最初から最後までの完全なログが対象となります。ただし、手動で呼び出す場合は、デフォルトで記録済みのログデータがクリアされ、新たに記録が開始されます。第2引数の clearCache: false で制御可能です。\n期間指定ログの操作ではデータはクリアされません。\nアップロード完了後、再生用の URL が返され、コンソールに出力されます。\n\n\n使用例\nwindow.$harbor = new DataHarborPlugin();\n\n// 全量をアップロード\nconst url = await window.$harbor.upload();\n\n// データをクリアせずにアップロード\nconst url = await window.$harbor.upload({ clearCache: false });\n\n// 期間指定でアップロード\nconst url = await window.$harbor.uploadPeriods({\n  startTime: Date.now() - 1000 * 60, // 1分前から\n  endTime: Date.now(),\n});\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/data-harbor#pause",
      "parent": "DataHarborPlugin",
      "title": "pause()",
      "content": "記録を一時停止します。\n\n型定義\ndeclare class DataHarborPlugin {\n  pause(): void;\n}\n\n\n\n詳細情報\nログ記録の動作をより柔軟に制御できます。\n一時停止後はプログラムが生成したデータは記録されません。$harbor.resume() を実行すると再開します。\n\n\n使用例\nwindow.$harbor = new DataHarborPlugin();\n\n// 一時停止\nwindow.$harbor.pause();\n\n// 再開\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/data-harbor#resume",
      "parent": "DataHarborPlugin",
      "title": "resume()",
      "content": "記録を再開します。\n\n型定義\ndeclare class DataHarborPlugin {\n  resume(): void;\n}\n\n\n\n詳細情報\nログ記録の動作をより柔軟に制御できます。\n一時停止から再開までの間のデータは記録されません。\n\n\n使用例\nwindow.$harbor = new DataHarborPlugin();\n\n// 一時停止\nwindow.$harbor.pause();\n\n// 再開\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/data-harbor#reharbor",
      "parent": "DataHarborPlugin",
      "title": "reharbor()",
      "content": "記録済みのデータをクリアし、記録を継続します。つまり、再記録を開始します。\n\n型定義\ndeclare class DataHarborPlugin {\n  reharbor(): void;\n}\n\n\n\n使用例\nwindow.$harbor = new DataHarborPlugin();\n\nwindow.$harbor.reharbor();\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-guide#deployments",
      "parent": "使用説明",
      "title": "複数のデプロイメントソリューション",
      "content": "\nNode.js でデプロイ\nDocker でデプロイ\n宝塔パネルにインストール\n"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-baota#prerequire",
      "parent": "宝塔を使用してデプロイ",
      "title": "前提条件",
      "content": "宝塔パネルをインストールするには、宝塔パネルの公式サイトにアクセスし、対応するスクリプトを選択してインストールしてください。"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-baota#install",
      "parent": "宝塔を使用してデプロイ",
      "title": "インストール",
      "content": "\n「Docker - アプリストア」で PageSpy を見つけ、インストールをクリックします。\n\n基本情報を設定し、「確認」をクリックします。\n\nパネルが自動的にアプリケーションの初期化を行います。約1分かかります。初期化が完了すると、ポート6752でアクセスできるようになります。\n"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-baota#next",
      "parent": "宝塔を使用してデプロイ",
      "title": "次のステップ",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-docker#install",
      "parent": "Docker を使用してデプロイ",
      "title": "インストール",
      "content": "docker run -d --restart=always -v ./log:/app/log -v ./data:/app/data -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\n実行が完了したら、ブラウザで http://localhost:6752 にアクセスしてサービスを利用できます。"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-docker#video",
      "parent": "Docker を使用してデプロイ",
      "title": "ビデオチュートリアル",
      "content": "{' '}"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-docker#next",
      "parent": "Docker を使用してデプロイ",
      "title": "次のステップ",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-node#install",
      "parent": "Node を使用してデプロイ",
      "title": "インストール",
      "content": "実行が完了したら、ブラウザで http://localhost:6752 にアクセスしてサービスを利用できます。"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-node#video",
      "parent": "Node を使用してデプロイ",
      "title": "ビデオチュートリアル",
      "content": "{' '}"
    },
    {
      "language": "ja",
      "route": "/docs/deploy-with-node#next",
      "parent": "Node を使用してデプロイ",
      "title": "次のステップ",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/faq#module",
      "parent": "よくある質問",
      "title": "PageSpyのモジュール構成",
      "content": "PageSpyモジュール間の依存関係と相互作用の概要図："
    },
    {
      "language": "ja",
      "route": "/docs/faq#compatibility",
      "parent": "よくある質問",
      "title": "PageSpyの互換性",
      "content": "\nブラウザSDKの互換性ターゲットは[\"chrome > 75\",\"safari > 12\", \"> 0.1%\", \"not dead\",\"not op_mini all\"]に設定されています。他のSDKについては、それぞれのリポジトリをご確認ください。\nデバッグ側は主に開発者が使用するため、ブラウザの新機能の使用に対してオープンな姿勢を取っています。そのため、最新バージョンのブラウザの使用を推奨しており、互換性ターゲットは[\"last 2 chrome version\", \"last 2 firefox version\", \"last 2 safari version\"]に設定されています。\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#hide-logo",
      "parent": "よくある質問",
      "title": "SDKによってレンダリングされるアイコンを非表示にするには？",
      "content": "window.$pageSpy = new PageSpy({\n  // ... その他の設定パラメータ\n  autoRender: false,\n});\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#init-params",
      "parent": "よくある質問",
      "title": "インスタンス化時にどのようなパラメータを渡せますか？それぞれの役割は何ですか？",
      "content": "PageSpy APIを参照してください。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#update-info",
      "parent": "よくある質問",
      "title": "初期化パラメータを更新するには？",
      "content": "PageSpyはデバイスを識別するためのDevice IDを提供し、さらにproject/titleを提供して、開発者が初期化時にクライアントを識別するためのカスタム情報を設定できます。初期化後にこれらのパラメータ情報を更新したい場合は、以下のように操作します：window.$pageSpy = new PageSpy(...);\n\n// updateRoomInfoを呼び出してproject/titleを更新できます\nwindow.$pageSpy.updateRoomInfo({ project: 'xxx', title: 'xxx' });\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#framework",
      "parent": "よくある質問",
      "title": "xxxフレームワークでの統合方法は？",
      "content": "PageSpyは、CodeSandboxプラットフォームを通じて、現在人気のあるすべてのフレームワークとの統合ガイドを公開しています。オンラインで体験できます：\nReact：CodeSandbox - PageSpy in React\nVue：CodeSandbox - PageSpy in Vue\nSvelte：CodeSandbox - PageSpy in Svelte\nAngular：CodeSandbox - PageSpy in Angular\nNextjs：CodeSandbox - PageSpy in Nextjs\nNuxtjs：CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#test-domain",
      "parent": "よくある質問",
      "title": "pagespy.jikejishu.comは公式提供のドメインですか？常時利用可能ですか？",
      "content": "https://pagespy.jikejishu.comは、PageSpyをオンラインで体験・学習できるように一時的に構築したサービスです。24時間の可用性は保証されず、データの安全性も保証されません。損失は自己責任となります。体験後は、プライベートサーバーやイントラネットに自身でデプロイすることを強く推奨します。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#server-port",
      "parent": "よくある質問",
      "title": "ローカルの6752ポートにはアクセスできるのに、サーバーにデプロイするとアクセスできないのはなぜ？",
      "content": "サーバー上のファイアウォールまたはセキュリティグループのルールで6752ポートが開放されているか確認してください。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#debug-disabled",
      "parent": "よくある質問",
      "title": "デバッグボタンが「現在の接続にはクライアントが存在しません」と表示されるのはなぜですか？",
      "content": "この状況は通常、SDKが正常にルームを作成したものの、WebSocketを介してルームに参加できない場合に発生します。以下の手順で確認してください：\nSDKが存在するクライアントのコンソールを開き、エラーが表示されているか確認します。\nコンソールに「WebSocket connect failed」関連の情報が表示される場合は、サーバーの設定が正しいか確認してください。\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#nginx",
      "parent": "よくある質問",
      "title": "デプロイ時のnginxの設定方法は？",
      "content": "参考として、https://pagespy.jikejishu.comのnginx設定を共有します：server {\n  listen 443 ssl;\n  server_name pagespy.jikejishu.com;\n\n  if ($scheme != https) {\n      rewrite ^(.*)$  https://$host$1 permanent;\n  }\n\n  ssl_certificate /etc/letsencrypt/live/pagespy.jikejishu.com/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/pagespy.jikejishu.com/privkey.pem;\n\n  location / {\n      proxy_pass http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n  }\n}\n\nserver {\n  if ($host = pagespy.jikejishu.com) {\n      return 301 https://$host$request_uri;\n  }\n\n  listen 80;\n  listen [::]:80;\n  server_name pagespy.jikejishu.com;\n  return 404;\n}\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#sub-path",
      "parent": "よくある質問",
      "title": "サブパスへのデプロイ方法は？",
      "content": "バージョン1.5.4からサブパスへのデプロイがサポートされています。インストール手順は変更ありませんが、nginxの設定を調整する必要があります：server {\n  # ...\n\n  # <sub-path>にデプロイしたいサブパスを入力\n  location /<sub-path>/  {\n      # ここの<sub-path>は上記と同じにします\n      rewrite ^/<sub-path>/(.*)$ /$1 break;\n      proxy_pass            http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n      proxy_set_header      Host $host;\n      proxy_set_header      X-Real-IP $remote_addr;\n      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # ここの<sub-path>は上記と同じにします\n  location /<sub-path> {\n      return 301 $scheme://$host$request_uri/;\n  }\n}\n設定を調整後、nginxを再起動するとサブパスでアクセスできるようになります。注意点として、インスタンス化時にapiとclientOriginパラメータを手動で渡してSDKにデプロイ先を伝える必要があります：window.$pageSpy = new PageSpy({\n  // 例：api: \"example.com/pagespy\"\n  api: '<host>/<sub-path>',\n\n  // 例：clientOrigin: \"https://example.com/pagespy\"\n  clientOrigin: '<scheme>://<host>/<sub-path>',\n});\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#basic-auth",
      "parent": "よくある質問",
      "title": "デバッグ側にセキュリティ認証を追加し、開発者が認証後にのみアクセスできるようにするには？",
      "content": "サーバー上でIPホワイトリストを設定するか、HTTP認証を使用して保護することができます。\n\nNginxでIPホワイトリストを設定する例：\nserver {\n  location / {\n    # アクセスを許可するIP\n    allow <ip>;\n\n    # allow以外のすべてのクライアントアクセスを拒否\n    deny all;\n  }\n}\n\n\n\nNginxでHTTP認証を設定し、アクセス時にユーザー名とパスワードを要求する：\nまずhtpasswdでアカウントとパスワードファイルを生成：\n# 実行後、パスワードの入力と確認が求められます\nhtpasswd -c /etc/nginx/.htpasswd <ユーザー名>;\n\n次に、nginxファイルでauth_basicモジュールを設定：\nserver {\n  location / {\n    auth_basic \"PageSpyサービスにアクセスするにはユーザー名とパスワードを入力してください\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n\n  location ~ /(api|page-spy|plugin) {\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n}\n\n最後にnginxサービスを再起動します。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#extension",
      "parent": "よくある質問",
      "title": "プロジェクトに手動で統合したくない場合、ビジネスプロジェクトコードを侵害せずに実装する方法はありますか？",
      "content": "PageSpyはブラウザ拡張機能を提供しており、以下の機能を備えています：\n最新バージョンのSDKを自動注入\nインスタンス化操作を自動実行\n注入するドメインの設定ルールを提供\n使用するにはこちらをクリック：HuolalaTech/page-spy-extension"
    },
    {
      "language": "ja",
      "route": "/docs/faq#tampermonkey",
      "parent": "よくある質問",
      "title": "Tampermonkeyスクリプトは利用できますか？",
      "content": "以下の内容を参考にしてください：// ==UserScript==\n// @name         Inject PageSpy Script\n// @namespace    http://tampermonkey.net/\n// @version      0.1\n// @description  Inject script on xxx.yyy\n// @author       You\n// @match        <マッチングルール、例：example.com>\n// @grant        none\n// ==/UserScript==\n\n(function () {\n  'use strict';\n\n  var script1 = document.createElement('script');\n  script1.setAttribute('crossorigin', 'anonymous');\n  // 実際のプロジェクトではSDKのアドレスリンクを置き換えてください\n  script1.src = 'https://pagespy.jikejishu.com/page-spy/index.min.js';\n\n  var script2 = document.createElement('script');\n  script2.textContent = 'window.$pageSpy = new PageSpy();';\n\n  document.head.prepend(script1);\n  script1.onload = () => {\n    document.head.appendChild(script2);\n  };\n})();\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#http-error",
      "parent": "よくある質問",
      "title": "ビジネスプロジェクトがHTTPS、PageSpyがHTTPの場合、コンソールでエラーが発生するのはなぜですか？",
      "content": "ブラウザはHTTPSサイトからのHTTPリソースの読み込みをブロックします。これは、HTTPとHTTPS間のデータ転送において、HTTPSは暗号化とセキュリティを提供しますが、HTTPは平文転送でセキュリティリスクがあるためです。PageSpyをHTTPSサービスにアップグレードすることで、この問題を完全に解決できます。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#prod-debug",
      "parent": "よくある質問",
      "title": "特定のユーザーのみをデバッグする方法は？",
      "content": "最も簡単な方法は、ユーザーにPageSpyのブラウザ拡張機能を使用してもらうことです。これは協力的なユーザーかつPCプロジェクトの場合に適していますが、この前提条件は明らかに非常に厳しいものです。では、H5プロジェクトで本番環境でPageSpyを使用したい場合はどうすればよいでしょうか？すべてのユーザーに対して有効にするのは明らかに現実的ではありません。PageSpyの有効化プロセスは2つのステップのみであることを考えてみましょう：\nheadタグ内で<script>を使用してSDKを読み込む\nインスタンス化\nPageSpyは2番目のインスタンス化ステップまでは、読み込まれた<script>はプロジェクトに何の影響も与えません。特定のユーザーをデバッグしたい場合、鍵となるのは2番目のステップです：どのユーザーの端末でPageSpyをインスタンス化するか。これには2つの方法があります：\n\nHTMLの動的レスポンス：ユーザーがHTMLをリクエストする際に、ユーザーの一意の識別子を取得でき、HTMLに動的に注入できる場合、ユーザーにHTMLを返す前に<script>とインスタンス化ロジックを注入するかどうかを決定できます。\n\n\nユーザーにジェスチャーで有効化させる：これは通常、ユーザーの積極的な協力が必要です。デフォルトではSDKを注入しますが、インスタンス化せず、ユーザーが特別なジェスチャーをトリガーした後にデバッグを開始します。\n\n注意：技術的な実装以外に、法的コンプライアンスなどのセキュリティリスクにも注意が必要です。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#page-principle",
      "parent": "よくある質問",
      "title": "Pageパネルの原理は？",
      "content": "PageパネルはクライアントサイドのHTML（document.documentElement.outerHTML）をデバッグ側のiframeにレンダリングし、ローカルコンソールで直接要素を検査できるようにします。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#page-interactive",
      "parent": "よくある質問",
      "title": "Pageパネルでレンダリングされたクライアントと直接インタラクションできますか？",
      "content": "直接のインタラクションはできません。特定のインタラクションを実行する必要がある場合は、Consoleパネルの下部でコードを入力して実行し、その後Pageパネルに戻って画面の反応を確認することができます。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#page-style",
      "parent": "よくある質問",
      "title": "Pageパネルのスタイルが正しくないのはなぜですか？",
      "content": "\nクライアントとデバッグ側のレンダリング環境が異なる場合（例：クライアントのブラウザバージョンがChrome 75で、デバッグ側のブラウザバージョンがChrome 120の場合）\nデバッグ側がクライアントが参照するリソースにアクセスする際にネットワーク制限がある場合\nそのため、スタイルは参考程度としてください。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#page-reset",
      "parent": "よくある質問",
      "title": "Pageパネルでクライアントの内容を100%再現することはできないのですか？",
      "content": "SDKはページの「スクリーンショット」を撮ってデバッグ側に送信することができますが、以下の理由により実装していません：\n「画像」はテキストよりもデータ量が大きく、ネットワーク転送のオーバーヘッドが増加します\nSDKのサイズと複雑さが増加します\n「スタイルエラー」の場合、リモートコラボレーション時にテスト担当者が開発者に正確にフィードバックできます\nこれらの理由により、Pageパネルのスタイルは参考程度としています。"
    },
    {
      "language": "ja",
      "route": "/docs/faq#api-config",
      "parent": "よくある質問",
      "title": "APIサービスの設定を変更するには？",
      "content": "NPMパッケージのデプロイ方法でコマンドラインでpage-spy-apiを実行すると、実行ディレクトリにデフォルトで設定ファイルconfig.jsonが生成されます。このファイルで実行ポートとマルチインスタンスデプロイを設定できます：\n\n設定の変更\n{\n  \"port\": \"6752\", //リッスンポート\n  \"maxLogFileSizeOfMB\": 10240, //ログ再生ファイルの保存サイズ（MB）\n  \"maxLogLifeTimeOfHour\": 720, //ログ再生ファイルの最大保存時間（時間）\n  \"notAllowedDeleteLog\": false, //ログ再生の削除を許可するかどうか\n  \"maxRoomNumber\": 500, //最大許可ルーム数\n  \"corsConfig\": {\n    \"allowOrigins\": [\"https://test.huolala.com\"], // デフォルトですべてのドメインのCORSを許可\n    \"allowHeaders\": [\n      \"Origin\",\n      \"Authorization\",\n      \"Content-Length\",\n      \"X-Request-Id\",\n      \"Content-Type\",\n      \"Referer\",\n      \"User-Agent\",\n      \"Host\"\n    ],\n    \"allowMethods\": [\n      \"HEAD\",\n      \"POST\",\n      \"GET\",\n      \"OPTIONS\",\n      \"PUT\",\n      \"DELETE\",\n      \"UPDATE\"\n    ],\n    \"exposeHeaders\": [\"X-Request-Id\"]\n  }\n}\n\n\n\nマルチインスタンスデプロイ（バージョン1.5.0以上が必要）\nrpcAddress設定はマルチインスタンスデプロイ設定で、ipとportは複数のマシンのipとrpcポートです。複数のインスタンスはrpcを通じて通信し、プログラムはマシンのipに基づいてrpcサービスを起動します。そのため、ipが重複しないようにする必要があります。重複すると、メッセージの混乱や損失が発生する可能性があります。\n{\n  \"port\": \"6752\",\n  \"rpcAddress\": [\n    {\n      \"ip\": \"192.168.123.1\",\n      \"port\": \"20008\"\n    },\n    {\n      \"ip\": \"192.168.123.2\",\n      \"port\": \"20008\"\n    }\n  ]\n}\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#pnpm",
      "parent": "よくある質問",
      "title": "pnpmでグローバルにインストールしたパッケージをpm2で起動するとエラーが発生するのはなぜですか？",
      "content": "pnpmでグローバルにインストールされたパッケージは、pnpmによってシェルスクリプトでラップされます。つまり、pm2 start page-spy-apiを実行すると、実際にはシェルスクリプトが見つかり、pm2はそれを解釈実行できないためエラーが発生します。yarnまたはnpmを使用してインストールすることで、この問題を解決できます。関連する議論：Unitech/pm2#5416"
    },
    {
      "language": "ja",
      "route": "/docs/faq#upgrade",
      "parent": "よくある質問",
      "title": "新バージョンがリリースされた後、最新バージョンにアップグレードするには？",
      "content": "\n\ndockerでデプロイした場合：\n# イメージを更新\ndocker pull ghcr.io/huolalatech/page-spy-web:latest\n\n# 実行中のPageSpyコンテナを停止\ndocker stop pageSpy && docker rm -f pageSpy\n\n# 再実行\ndocker run -d --restart=always -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\n\n\n\nNPMパッケージでデプロイした場合：\n# パッケージを更新（yarn）\nyarn global upgrade @huolala-tech/page-spy-api@latest\n\n# パッケージを更新（npm）\nnpm install -g @huolala-tech/page-spy-api@latest\n\n# pm2で再起動\npm2 restart page-spy-api\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#auto-destroy",
      "parent": "よくある質問",
      "title": "ルーム接続はどのような場合に自動的に破棄されますか？",
      "content": "\n設定の確認：https://github.com/HuolalaTech/page-spy-api/blob/master/room/local_room.go#L297-L323\n\nルーム作成後、SDKまたはデバッグ側が入室しない場合、1分後に破棄されます（実際の使用では、このシナリオは存在しません）\nSDKとデバッグ側の両方が接続を切断した場合、1分後に破棄されます\nデータメッセージの交換がない状態が5分間続いた場合に破棄されます\n接続の使用が1時間を超えると自動的に破棄されます\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#alipay-global",
      "parent": "よくある質問",
      "title": "なぜAlipayミニプログラムでリモートコード実行時にmy.getCurrentPages()などのグローバルオブジェクトにアクセスできないのですか？",
      "content": "Alipayミニプログラムは歴史的な理由により、グローバルオブジェクトへのアクセスに制限を設けています。ミニプログラムの設定ファイルまたはAlipayミニプログラムIDEで設定できます：\nIDE：詳細 -> コンパイル設定 -> グローバルオブジェクト（global/globalThis）アクセスポリシー：アクセス可能（推奨）\n設定ファイル：https://opendocs.alipay.com/mini/03dbc3?pathHash=e876dc50#globalObjectMode\n"
    },
    {
      "language": "ja",
      "route": "/docs/faq#offline-log",
      "parent": "よくある質問",
      "title": "アップロードしたファイルログが見つからないのはなぜですか？",
      "content": "\nアップロードされたファイルログは、デフォルトで最新の10GBまで、および30日間保存されます。設定を変更してカスタマイズすることができます。\nアップロードログは実行ディレクトリのlogディレクトリに保存されます。dockerで実行している場合、dockerが破棄されるとログも失われます。-v ./log:/app/log -v ./data:/app/dataでディレクトリをマッピングして永続化することができます。\n"
    },
    {
      "language": "ja",
      "route": "/docs/harmony#step-1",
      "parent": "ハーモニーアプリ",
      "title": "ステップ 1",
      "content": "デバッグ対象のHAPディレクトリで依存関係をインストールします：# API 9\nohpm install @huolala/page-spy-harmony@^1.0.0\n\n# API 11\nohpm install @huolala/page-spy-harmony@^2\n"
    },
    {
      "language": "ja",
      "route": "/docs/harmony#step-2",
      "parent": "ハーモニーアプリ",
      "title": "ステップ 2",
      "content": "適切な場所でSDKをインポートして初期化します。ここではEntryAbilityを例として示します。初期化パラメータには、SDKの動作をカスタマイズするためのオプションの設定項目が用意されています：import { PageSpy } from '@huolala/page-spy-harmony';\nimport axiosInstance from 'path/to/your/axios-instance';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    new PageSpy({\n      context: this.context,\n      api: \"{deployPath}\",\n      enableSSL: true,\n      axios: axiosInstance\n    })\n  }\n}\n以上がHarmonyOSアプリプロジェクトにPageSpyを導入する全手順です。導入完了後、トップメニューのデバッグを開始をクリックして使用開始！"
    },
    {
      "language": "ja",
      "route": "/docs/introduction#what-is-page-spy",
      "parent": "紹介",
      "title": "Page Spyとは？",
      "content": "PageSpyはWeb / ミニプログラム / React Native / HarmonyOS アプリなどのプラットフォームプロジェクトに対応したオープンソースのデバッグプラットフォームです。ネイティブAPIのラッパーに基づき、ネイティブメソッド呼び出し時のパラメータをフィルタリング・変換し、デバッグ側が消費できる特定のフォーマットのメッセージに整理します。デバッグ側はメッセージデータを受信後、ローカルコンソールに似たインターフェースでデータを表示します。"
    },
    {
      "language": "ja",
      "route": "/docs/introduction#why-is-page-spy",
      "parent": "紹介",
      "title": "なぜPage Spyなのか？",
      "content": "\n百聞は一見にしかず。\n"
    },
    {
      "language": "ja",
      "route": "/docs/introduction#when-to-use",
      "parent": "紹介",
      "title": "いつ使用するか？",
      "content": "ローカルでコンソールデバッグができないシーンは、すべてPageSpyが活躍できる場面です！\n以下のようなシーンケースを見てみましょう：\nH5、Webviewアプリケーションのローカルデバッグ：従来、H5上で情報を確認できるパネルを提供する製品もありましたが、モバイル端末の画面が小さく操作が不便、表示が不友好、情報が切り捨てられるなどの問題がありました。\nリモートワーク、地域間協力：メール、電話、ビデオ会議などの従来のコミュニケーション方法では、コミュニケーション効率が低く、障害情報が不完全で、誤解や誤判断が生じやすい。\nユーザー端末での白画面問題：従来の問題特定方法には、データモニタリング、ログ分析などがありますが、これらの方法は、トラブルシューティング担当者がビジネス要件シーンや技術実装を理解する必要があります。\nPageSpyの目標は、上記のようなシーンに関わる人々をサポートすることです。"
    },
    {
      "language": "ja",
      "route": "/docs/introduction#feature-overview",
      "parent": "紹介",
      "title": "インターフェース概要",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/introduction#online-debug",
      "parent": "紹介",
      "title": "オンラインデバッグ",
      "content": "\nConsoleパネル: console.<log | info | warn | error | debug>で出力されたログ情報を表示し、クライアントに実行するコードを送信できます。\n\nNetworkパネル: クライアントから送信されたネットワークリクエスト情報を表示します。\n\nElementパネル: クライアントの現在のインターフェースを表示し、HTMLノードツリーを確認できます。\n\nStorageパネル: クライアントのローカルキャッシュデータを確認します。\n\nSystemsパネル: クライアントのシステム情報を表示し、互換性を確認します。\nさらに、新しいデータが追加されたり、データが変更されたりした場合、リアルタイムで通知を受け取ることができます。"
    },
    {
      "language": "ja",
      "route": "/docs/introduction#offline-debugging",
      "parent": "紹介",
      "title": "オフラインリプレイ",
      "content": "再生の進行状況はあなたがコントロールでき、プログレスバーの再生に合わせて、クライアントの操作軌跡と対応するデータを確認することができます。"
    },
    {
      "language": "ja",
      "route": "/docs/miniprogram#step-1",
      "parent": "ミニプログラム",
      "title": "ステップ 1",
      "content": "プロジェクトに依存関係をインストールします。複数のミニプログラムプラットフォーム向けのSDKを提供しています。必要に応じてインストールしてください："
    },
    {
      "language": "ja",
      "route": "/docs/miniprogram#step-2",
      "parent": "ミニプログラム",
      "title": "ステップ 2",
      "content": "PageSpyサービスのドメインをミニプログラムのhttp、websocketリクエストホワイトリストに追加します。開発環境以外では、ミニプログラムはhttpsとwssプロトコルの使用を強制することに注意してください：https://<your-pagespy-host>\nwss://<your-pagespy-host>\n"
    },
    {
      "language": "ja",
      "route": "/docs/miniprogram#step-3",
      "parent": "ミニプログラム",
      "title": "ステップ 3",
      "content": "エントリーファイルでSDKをインポートしてインスタンス化します。初期化パラメータには、SDKの動作をカスタマイズするためのオプションの設定項目が用意されています：import PageSpy from '@huolala-tech/page-spy-wechat';\n\nconst $pageSpy = new PageSpy({\n  api: \"{deployPath}\",\n})\n"
    },
    {
      "language": "ja",
      "route": "/docs/miniprogram#menus",
      "parent": "ミニプログラム",
      "title": "デバッグメニュー",
      "content": "作成したPageSpyインスタンスでshowPanel()メソッドを呼び出すと、デバッグを補助するためのデバッグメニューがポップアップ表示されます：<img src={mpPanelImg} style={{ maxWidth: 320 }} />以上がミニプログラムプロジェクトにPageSpyを導入する全手順です。導入完了後、トップメニューのデバッグを開始をクリックして使用開始！"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#why",
      "parent": "オフラインログ",
      "title": "なぜ必要か",
      "content": "これまで、PageSpyのオンラインデバッグは多くの厄介な問題を解決してきましたが、PageSpyを使用するには前提条件がありました：「クライアントとデバッグ側が同時にオンラインである必要がある」。この前提条件は、PageSpyの使用シーンを制限するだけでなく、例えば：\n一つの問題に対して開発者とテスターの二人の人員を同時に投入する必要がある；\nデバッグ中にクライアントがバックグラウンドに移行して接続が切断される；\n同時にPageSpy自体にも制限をもたらしました、例えば：\n収集するデータの容量、ネットワーク転送の負荷を考慮する必要がある；\nこれらの問題を解決し、より大きな自由度を得るために、PageSpyは1.7.3バージョンでログ再生機能を提供しました！"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#where",
      "parent": "オフラインログ",
      "title": "ログはどこから来るのか",
      "content": "PageSpyのSDKがプラグインの登録をサポートした後、開発チームは直ちにDataHarborPluginプラグインの開発を推進しました。\nData Harbor、データハーバー。\nメンタルモデル：PageSpyが生成するデータは絶え間なく「データハーバー」に送られ、データの整理、パッケージング、圧縮を行った後、「データハーバー」はデータを「コンテナ」（メモリまたはローカルの一時ファイル）に格納し、次の指示を待ちます。\n内部で\"public-data\"イベント（「public-data」イベントとは？）を監視し、オフラインデータのキャッシュ機能を実現すると同時に、SDKがレンダリングするコントロールにデータのアップロードとダウンロード機能を提供します。クライアントで問題が発見された場合、テスターは直接データをアップロードまたはダウンロードできます。この革新により、これまでの「クライアントとデバッグ側が同時にオンラインである必要がある」という前提条件が打破されました。"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#how-to-use",
      "parent": "オフラインログ",
      "title": "使用方法",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#browser",
      "parent": "オフラインログ",
      "title": "ブラウザでの使用",
      "content": "\nPageSpyのオフラインログ再生機能のみが必要な場合は、より簡単に統合できるO-Spyの使用をお勧めします。\n"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#step-1",
      "parent": "オフラインログ",
      "title": "ステップ1：クライアントにSDKとプラグインを導入",
      "content": "<html>\n  <head>\n    <!-- 1. PageSpyを読み込む -->\n    <script src=\"{deployUrl}/page-spy/index.min.js\"></script>\n    <!-- 2. DataHarborプラグインを読み込む：オフラインログデータをキャッシュし、ダウンロード/アップロード機能を提供 -->\n    <script src=\"{deployUrl}/plugin/data-harbor/index.min.js\"></script>\n    <!-- 3. RRWebプラグインも読み込んで、ユーザーの操作軌跡をオフラインログに記録できます -->\n    <script src=\"{deployUrl}/plugin/rrweb/index.min.js\"></script>\n\n    <script>\n      // 4. プラグインを登録、config情報は以下を参照：https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-data-harbor\n      PageSpy.registerPlugin(new DataHarborPlugin(config));\n      PageSpy.registerPlugin(new RRWebPlugin());\n\n      // 5. PageSpyをインスタンス化\n      window.$pageSpy = new PageSpy({\n        // SDKとデバッグ側がリアルタイム接続を確立したくない場合は、オフラインモードを有効にできます\n        // offline: true\n      });\n    </script>\n  </head>\n</html>\n正常に導入されると、ページの右下にPageSpyのフローティングボールが表示され、フローティングボールをクリックすると表示されるダイアログにアップロードとダウンロードのボタンが含まれているはずです。"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#step-2",
      "parent": "オフラインログ",
      "title": "ステップ2：ログの再生",
      "content": "デバッグ側に入り、トップメニューの「デバッグを開始 - ログ再生」をクリックして再生リストページに入り、前のステップでアップロード/ダウンロードしたjsonデータを選択すれば再生機能を使用できます！"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#plugins",
      "parent": "オフラインログ",
      "title": "他のプラグインとの併用",
      "content": "DataHarborPluginはデータの収集とデータ処理機能のみを提供します。PageSpyは他にも以下のプラグインを提供しています：\nRRWebPlugin: rrwebを使用してDOMの更新を記録し、デバッグ側の「ログ再生」パネルの左側でユーザーの操作軌跡を確認できます。\n"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#use-ospy",
      "parent": "オフラインログ",
      "title": "O-Spyの使用",
      "content": "O-SpyのSDKはプラグアンドプレイで、デプロイが不要です。PageSpy / DataHarborPlugin / RRWebPluginがパッケージされており、オフライン状態でのPageSpyのベストプラクティス設定が組み込まれています。同時にカスタムテーマもサポートしており、非常に簡単に使用できます。フレームワークに依存せず、プロジェクトへの導入方法を自由に選択できます。import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';正常に導入されると、右下に「問題フィードバック」というドラッグ可能なコンポーネントが表示されます。"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#customize-example",
      "parent": "オフラインログ",
      "title": "カスタマイズテーマの例",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#mp",
      "parent": "オフラインログ",
      "title": "ミニプログラムでの使用",
      "content": "ミニプログラム環境でもオフラインログ再生をサポートしています。手順は以下の通りです："
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#mp-step-1",
      "parent": "オフラインログ",
      "title": "ステップ1：ミニプログラム専用プラグインのインストール",
      "content": "yarn add @huolala-tech/page-spy-plugin-mp-data-harbor\n"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#mp-step-2",
      "parent": "オフラインログ",
      "title": "ステップ2：プラグインの登録",
      "content": "import PageSpy from '@huolala-tech/page-spy-wechat';\nimport DataHarborPlugin from '@huolala-tech/page-spy-plugin-mp-data-harbor';\n\n// プラグインを登録、config情報は以下を参照：https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-mp-data-harbor\nconst $dataHarborPlugin = new DataHarborPlugin(config)\nPageSpy.registerPlugin($dataHarborPlugin);\n\nconst $pageSpy = new PageSpy({\n  // ...\n})\n"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#mp-step-3",
      "parent": "オフラインログ",
      "title": "ステップ3：オフラインログのアップロード",
      "content": "オフラインログをアップロードするには2つの方法があります：\nプラグインインスタンスのupload()メソッドを呼び出す：\n$dataHarborPlugin.upload().then(() => {\n  console.log('アップロード成功');\n})\n\nミニプログラムDataHarborプラグインを登録すると、PageSpyのデバッグメニューに「オフラインログをアップロード」ボタンが表示されます。クリックするとオフラインログをアップロードできます：\n<img style={{width: 375}} src={mpDataHarborImg} />"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#diff",
      "parent": "オフラインログ",
      "title": "相違点",
      "content": "\n\nミニプログラム環境では画面録画をサポートしておらず、対応するRRWebPluginもありません。\n\n\nミニプログラム環境のオフラインログはアップロードのみをサポートし、ダウンロードはサポートしていません。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/offline-log#faq",
      "parent": "オフラインログ",
      "title": "FAQ",
      "content": "\nログの手動アップロード/ダウンロードはどのように行いますか？\nこちらをご覧ください。\nオフラインログはどこに保存されますか？\nDataHarborPluginがデータを受信すると、まずメモリの配列に格納されます。配列に格納されているデータの容量が臨界値に達すると、データは一時ファイルに書き込まれます。この臨界値はデフォルトで10MBです。以下のように自分で設定することもできます：new DataHarborPlugin({\n  maximum: 1 * 1024 * 1024, // メモリ内のデータ記録が1MBに達したら一時ファイルに書き込む\n})\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#PageSpy-API",
      "parent": "Pagespy",
      "title": "PageSpy API",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#constructor",
      "parent": "Pagespy",
      "title": "constructor()",
      "content": "PageSpyインスタンスを作成します。\n\n型\ndeclare class PageSpy {\n  constructor(config: InitConfig)\n}\n\n\n\n詳細情報\nコンストラクタは初期化パラメータとしてconfigオブジェクトを受け取ります。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-api",
      "parent": "Pagespy",
      "title": "config.api",
      "content": "サーバーのアドレス。\n\n型：string\n\n\n\nSDKは読み込まれたパスから自動的にサーバーのアドレスapiとデバッグ側のアドレスclientOriginを分析して決定します。例えば、<script src=\"https://example.com/page-spy/index.min.js\">でSDKを読み込んだ場合、SDKは内部で以下のように設定します：\n\napi: \"example.com\"\nclientOrigin: \"https://example.com\"\n\nサービスが別の場所にデプロイされている場合は、ここで手動で指定して上書きする必要があります。\n\n\n  \nこのフィールドは必須です。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-clientOrigin",
      "parent": "Pagespy",
      "title": "config.clientOrigin ",
      "content": "\n型：string\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-project",
      "parent": "Pagespy",
      "title": "config.project",
      "content": "情報の一種の集約として、デバッグ側のルームリストで検索できます。\n型：string\nデフォルト値：default\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-title",
      "parent": "Pagespy",
      "title": "config.title",
      "content": "ユーザーが現在デバッグしているクライアントを区別するためのカスタムパラメータ。対応する情報は各デバッグ接続パネルの「デバイスID」の下に表示されます。\n型：string\nデフォルト値：--\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-enableSSL",
      "parent": "Pagespy",
      "title": "config.enableSSL",
      "content": "PageSpyサービスのスキームを手動で指定します。\n\n型：boolean\n\n\n詳細情報\nboolean値を渡します：\n\ntrue：SDKは [\"https://\", \"wss://\"] を使用してPageSpyサービスにアクセスします\nfalse：SDKは [\"http://\", \"ws://\"] を使用してPageSpyサービスにアクセスします\n\n\n\nこの値を設定しない場合、SDKはページのアドレスから自動的に分析します。\nSDKがスキームを正しく分析できない場合、例えばPageSpyのブラウザ拡張機能が chrome-extension://xxx/sdk/index.min.js からSDKを読み込む場合、これはSDKによって無効な \"chrome-extension://\" として解析され、[\"http://\", \"ws://\"] にフォールバックします。この場合、このフィールドを手動で設定できます。\n\n\n  \nこれらの環境は一般的にhttpsを強制するため、デフォルトはtrueです。http（通常は開発環境で）をサポートする必要がある場合は、falseに設定できます。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-disabledPlugins",
      "parent": "Pagespy",
      "title": "config.disabledPlugins",
      "content": "PageSpyの組み込みプラグインはすべてすぐに使用できますが、手動で特定のプラグインを無効にすることができます。\n型：string[]\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-serializeData",
      "parent": "Pagespy",
      "title": "config.serializeData",
      "content": "SDKがオフラインログを収集する際に、基本型以外のデータをシリアライズすることを許可するかどうか。シリアライズの目的は、再生時にデータを確認しやすくすることです。\n型：boolean\nデフォルト値：false\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-useSecret",
      "parent": "Pagespy",
      "title": "config.useSecret",
      "content": "権限認証機能を有効にするかどうか。\n\n型：boolean\n\n\nデフォルト値：false\n\n\n詳細情報：\n有効にすると、SDKは6桁のランダムな「シークレットキー」を生成します。デバッグ側がルームに入る際に、対応するシークレットキーの入力が必要になります。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-messageCapacity",
      "parent": "Pagespy",
      "title": "config.messageCapacity",
      "content": "キャッシュデータの最大数。\n\n型：number\n\n\nデフォルト値：1000\n\n\n詳細情報：\nSDKはデバッグ側がルームに入る前にメモリにデータをキャッシュし、デバッグ側がルームに入った後に以前のデータを見ることができるようにします。\nただし、データ量は増加し続けるため、SDKがローカルに最大何件のデータレコードをキャッシュするかを指定できます。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-dataProcessor",
      "parent": "Pagespy",
      "title": "config.dataProcessor",
      "content": "データ処理。ユーザーはこのプロパティを通じてデータの修正や無視をカスタマイズできます。\n\n型：\ndeclare interface DataProcessor {\n  console?: (data: ConsoleData) => boolean;\n  network?: (data: RequestItem) => boolean;\n  storage?: (data: StorageData) => boolean;\n  database?: (data: DatabaseData) => boolean;\n  page?: (data: PageData) => boolean;\n  system?: (data: SystemData) => boolean;\n}\n\n\n\n詳細情報\n処理関数はそれぞれ組み込みプラグインに対応しており、ユーザーは関数内で直接データを修正できます。関数の実行が完了すると、PageSpyは修正後のデータを処理します。関数がfalseを返す場合、PageSpyはそのデータを無視します：これは両方のモードのデバッグ側でそのデータが表示されないことを意味します。\n詳細は：https://www.pagespy.org/#/docs/changelog#v1_9_2 をご覧ください。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-disabledOnProd",
      "parent": "Pagespy",
      "title": "config.disabledOnProd ",
      "content": "ミニプログラムの本番環境でPageSpyを無効にします。\n\n型：boolean\n\n\nデフォルト値：true\n\n\n詳細情報：\nPageSpyはデバッグツールとして、主に開発テスト段階で使用され、本番環境での使用は推奨されません。また、ミニプログラムプラットフォームは一般的にパフォーマンスにより敏感であるため、このフィールドはデフォルトでtrueに設定されています。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-offline",
      "parent": "Pagespy",
      "title": "config.offline ",
      "content": "オフラインモード。\n\n型：boolean\n\n\nデフォルト値：false\n\n\n詳細情報：\nPageSpy@1.7.4でオフライン再生機能がサポートされた後、クライアント側に統合されたSDKはデバッグ側との接続を確立する必要がなく、DataHarborPluginを通じてデータを収集し、オフラインログをエクスポートする新しい使用方法が可能になりました。\nデフォルト値はfalseです。ユーザーがTruthy値に設定すると、「オフラインモード」に入り、具体的にはPageSpyがルームを作成せず、WebSocket接続を確立しません。\n現在はブラウザ環境のSDKにのみ適用されます。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-autoRender",
      "parent": "Pagespy",
      "title": "config.autoRender ",
      "content": "SDK初期化完了後、クライアントの左下に「円形の白背景にロゴ」のウィジェットを自動的にレンダリングするかどうかを指示します。\n\n型：boolean\n\n\nデフォルト値：true\n\n\n詳細情報：\nfalseに設定した場合、window.$pageSpy.render()を呼び出して手動でレンダリングできます。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-logo",
      "parent": "Pagespy",
      "title": "config.logo ",
      "content": "ウィジェットにレンダリングするカスタムロゴ\n型：string\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-primaryColor",
      "parent": "Pagespy",
      "title": "config.primaryColor ",
      "content": "モーダルとトーストで使用されるテーマカラーを設定します。\n型：string\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-modal",
      "parent": "Pagespy",
      "title": "config.modal ",
      "content": "モーダル内のロゴとタイトルを設定します。\n\n型：\ndeclare interface ModalConfig {\n  logo?: string;\n  title?: string;\n}\n\n\n\nデフォルト値：\n{\n  logo: \"\",\n  title: \"PageSpy\"\n}\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config-gesture",
      "parent": "Pagespy",
      "title": "config.gesture ",
      "content": "ジェスチャー操作またはキーボードの方向キーでPageSpyを有効にします。\n\n型：Command | null\nジェスチャー認識はiseedeadpeopleに依存しており、そのCommandは以下のように定義されています：\ndeclare const DIRECTION_CHARACTERS: readonly [\"U\", \"R\", \"D\", \"L\"];\ntype Direction = (typeof DIRECTION_CHARACTERS)[number];\n\ntype Command = readonly Direction[];\n\n\n\nデフォルト値：null、ジェスチャーを無効にします。\n\n\n例\nnew PageSpy({\n  ...,\n  // ユーザーが \"上上下下左右左右\" のジェスチャーまたは方向キー入力を完了した場合のみ、PageSpyが有効になります\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#registerPlugin",
      "parent": "Pagespy",
      "title": "registerPlugin()",
      "content": "静的メソッド、プラグインを登録します。\n\n型\ndeclare class PageSpy {\n  static registerPlugin(plugin: PageSpyPlugin): void;\n}\n\n\n\n詳細情報\nPageSpyのインスタンス化の前に呼び出し、パラメータはPageSpyPluginを実装したプラグインインスタンスです。各プラグインインスタンスにはname属性が必要です。同じ名前のプラグインが重複して登録された場合、プラグインインスタンスは一度だけ登録され、コンソールに警告メッセージが表示されます。\n\n\n例\nclass DataHarborPlugin implements PageSpyPlugin {\n  name = 'DataHarborPlugin'\n\n  ... // プラグインの実装\n}\n\nPageSpy.registerPlugin(new DataHarborPlugin());\n\n// 重複して呼び出した場合、プラグインは一度だけ登録されます\n// PageSpy.registerPlugin(new DataHarborPlugin());\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#pluginsWithOrder",
      "parent": "Pagespy",
      "title": "pluginsWithOrder",
      "content": "プラグインのenforce属性に従って並べ替えられた登録済みプラグインのリスト。\n\n型\ndeclare class PageSpy {\n  static plugins: Record<PluginOrder | 'normal', PageSpyPlugin[]>;\n  static get pluginsWithOrder(): PageSpyPlugin[];\n}\n\n\n\n詳細情報\n各プラグインはenforce: PluginOrder属性を提供する必要があります。提供されない場合はデフォルトでenforce: \"normal\"となり、その後PageSpyはpre - normal - postの順序でプラグインリストを管理します。\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#updateRoomInfo",
      "parent": "Pagespy",
      "title": "updateRoomInfo()",
      "content": "インスタンス化後、接続情報を更新します。\n\n型\ntype UpdateConfig = {\n    title?: string;\n    project?: string;\n};\n\ndeclare class PageSpy {\n  updateRoomInfo(obj: UpdateConfig): void;\n}\n\n\n\n詳細情報\nクライアントの識別情報がPageSpy初期化時にまだ不明な場合、後でこのメソッドを使用して更新できます。\n\n\n例\nwindow.$pageSpy = new PageSpy({\n  title: '--',\n  project: '--'\n})\n\nasync function YourCode() {\n  // ビジネスロジックが非同期でクライアント識別子を読み込む、例：現在のユーザー、現在のプロジェクト\n  const { title, project } = await xxx();\n\n  window.$pageSpy.updateRoomInfo({\n    title,\n    project\n  })\n}\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#abort",
      "parent": "Pagespy",
      "title": "abort()",
      "content": "現在のインスタンスを破棄します。\n\n型\ndeclare class PageSpy {\n  abort(): void;\n}\n\n\n\n詳細情報\nPageSpyは接続を切断し、ドキュメントから関連するDOMを削除し、キャッシュされたデータをクリアし、登録されているすべてのプラグインのonReset()メソッドを呼び出します。\n現在のコンテキストでプロキシされたまたは書き換えられたAPI（ブラウザのwindow.fetchなど）は、PageSpyのインスタンス化前の状態に戻ります。\n\n\n例\nwindow.$pageSpy = new PageSpy(...);\n\nwindow.$pageSpy.abort();\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#version",
      "parent": "Pagespy",
      "title": "version",
      "content": "現在使用中のPageSpyのバージョン。\n\n型\ndeclare class PageSpy {\n  version: string;\n}\n\n\n\n例\nwindow.$pageSpy = new PageSpy(...);\n\nconsole.log(window.$pageSpy.version);\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#config",
      "parent": "Pagespy",
      "title": "config",
      "content": "設定情報。設定はプラットフォームによって異なります。例えば、ミニプログラム向けのconfig.disableOnProdなどがあります。\n\n型\ndeclare class PageSpy {\n  config: Config;\n}\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#socketStore",
      "parent": "Pagespy",
      "title": "socketStore",
      "content": "WebSocketインスタンスをラップし、メッセージイベントの登録、指定されたメッセージ受信後のコールバックトリガー、メッセージのブロードキャストを提供します。\n\n型\ninterface SocketStoreType {\n  addListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  addListener(type: InternalType, fn: InternalEventCallback): void;\n\n  removeListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  removeListener(type: InternalType, fn: InternalEventCallback): void;\n\n  dispatchEvent(type: InteractiveType | InternalType, data: InteractiveEvent): void;\n  dispatchEvent(type: InternalType, data: any): void;\n\n  broadcastMessage(message: MessageItem, noCache?: boolean): void;\n}\n\n\n\n詳細情報\naddListener() / removeListener() / dispatchEvent()の第一引数はメッセージタイプで、メッセージタイプは**「対話型」と「内部型」**の2種類に分類されます：\n\n**「対話型」**メッセージタイプはデバッグ側との対話に使用されます。例：デバッグ側のオンライン化、クライアントへのコード実行送信、オブジェクト詳細の展開クリックなど、これらはメッセージイベントとしてSDKに送信され、SDKは必要に応じて応答します。\n**「内部型」**メッセージタイプは現在、プラグイン間の対話に使用されます。例：各プラグインがデータを生成した後、socketStore.dispatchEvent('public-data')でイベントを発行し、同じくプラグインであるDataHarborPluginがこのイベントを監視してデータを別途処理します。\n\nbroadcastMessage()はメッセージをブロードキャストします。第一引数は各プラグインからデバッグ側に送信されるデータで、第二引数のnoCacheはプラグインがsocketStoreに現在送信中のメッセージをキャッシュすべきかどうかを通知するために使用されます。データをキャッシュする目的は、デバッグ側が「オンライン」になった後に履歴メッセージを確認できるようにすることですが、すべてのデータをキャッシュする必要はありません。例：クライアントがネットワークリクエストを開始した場合、成功または失敗にかかわらず、最終状態のみをキャッシュする必要があります。\n\n\n例\n// ConsolePluginの具体的な実装についてはリポジトリをご確認ください\nclass ConsolePlugin implements PageSpyPlugin {\n  onInit({ socketStore }) {\n    socketStore.addListener('debug', ({ source }, reply) => {\n      ...\n    })\n\n    socketStore.broadcastMessage(...)\n  }\n}\n\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/pagespy#showPanel",
      "parent": "Pagespy",
      "title": "showPanel() ",
      "content": "ミニプログラム環境でデバッグパネルを表示します。\n\n型\ndeclare class PageSpy {\n  showPanel(): void;\n}\n\n\n\n詳細情報\n<img src={mpPanelImg} style={{width: 375}} />\nこのパネルはプラグインがカスタムボタンを登録することをサポートしています。例えば、DataHarborPluginを登録すると、このパネルに「オフラインログのアップロード」ボタンが表示されます：\n<img src={mpDataHarborImg} style={{maxWidth: 375}} />\n\n"
    },
    {
      "language": "ja",
      "route": "/docs/plugins#definition",
      "parent": "プラグインシステム",
      "title": "型定義",
      "content": "export abstract class PageSpyPlugin {\n  /**\n   * 各プラグインには name の指定が必要で、これが現在のプラグインの「識別子」となります。\n   * PageSpy内部のプラグインの登録、無効化の機能は、すべてこのname属性に依存しています\n   */\n  public abstract name: string;\n\n  /**\n   * プラグインの読み込み順序を指定します。プラグインの呼び出し順序は以下の通りです：\n   *   1. enforce: \"pre\" 属性を持つプラグイン；\n   *   2. enforce 属性を持たないプラグイン；\n   *   3. enforce: \"post\" 属性を持つプラグイン；\n   */\n  public abstract enforce?: PluginOrder;\n\n  // new PageSpy() 時に呼び出されます\n  public abstract onInit: (params: OnInitParams) => any;\n\n  // PageSpyのレンダリング完了後に呼び出されます（レンダリングプロセスがある場合）\n  public abstract onMounted?: (params: OnMountedParams) => any;\n\n  // ユーザーがPageSpyを必要としなくなった時、プラグインはリセット/復元機能を持つべきです\n  public abstract onReset?: () => any;\n}\n\nexport interface OnInitParams {\n  // ユーザーが渡したインスタンス化パラメータがマージされた設定情報\n  config: Required<InitConfig>;\n\n  // socketインスタンスをラップしたもので、プラグイン開発者はこのプロパティを通じてデバッグ側/APIと対話できます\n  socketStore: SocketStoreType;\n}\n\nexport interface OnMountedParams {\n  // PageSpyがレンダリングするルートノード\n  root?: HTMLDivElement;\n\n  // PageSpyがレンダリングするポップアップのルートノード\n  content?: HTMLDivElement;\n\n  // socketインスタンスをラップしたもので、プラグイン開発者はこのプロパティを通じてデバッグ側/APIと対話できます\n  socketStore: SocketStoreType;\n}\n"
    },
    {
      "language": "ja",
      "route": "/docs/plugins#convention",
      "parent": "プラグインシステム",
      "title": "動作規約",
      "content": "現在のプラグインがプラットフォームの特定の動作「データ」を収集する（または公開したい）場合、socketStoreでデータをブロードキャストする以外に、プラグインがsocketStoreインスタンス上で追加の\"public-data\"内部イベント（Internal Event）を発行することを規約として定めています。この目的は、統計やデータの永続化が必要なプラグインがこのイベントから統一的にデータを収集できるようにするためです。プラグインが特定のデータを「公開」すべきでないと判断した場合は、\"public-data\"イベントを発行する必要はありません。"
    },
    {
      "language": "ja",
      "route": "/docs/plugins#demo",
      "parent": "プラグインシステム",
      "title": "プラグイン実装例",
      "content": "DataHarborPluginとRRWebPluginを参照してください。"
    },
    {
      "language": "ja",
      "route": "/docs/plugins#usage",
      "parent": "プラグインシステム",
      "title": "プラグインの使用方法",
      "content": "<!-- SDKを読み込む -->\n<script src=\"https://<your-pagespy-host>/page-spy/index.min.js\"></script>\n<!-- プラグインを読み込む -->\n<script src=\"https://<your-pagespy-host>/plugin/xxx/index.min.js\"></script>\n\n<!-- プラグインを登録 -->\n<script>\n  PageSpy.registerPlugin(new XXXPlugin());\n  window.$pageSpy = new PageSpy();\n</script>\n"
    },
    {
      "language": "ja",
      "route": "/docs/react-native#step-1",
      "parent": "React Native",
      "title": "ステップ 1",
      "content": "プロジェクトに依存関係をインストールします：yarn add @huolala-tech/page-spy-react-native@latest\n"
    },
    {
      "language": "ja",
      "route": "/docs/react-native#step-2",
      "parent": "React Native",
      "title": "ステップ 2",
      "content": "エントリーファイルでSDKをインポートしてインスタンス化します。初期化パラメータには、SDKの動作をカスタマイズするためのオプションの設定項目が用意されています：import PageSpy from '@huolala-tech/page-spy-react-native';\n\nnew PageSpy({\n  api: \"{deployPath}\",\n})\n@react-native-async-storage/async-storageを使用している場合、独立したプラグインを提供しています：import { PageSpy } from '@huolala-tech/page-spy-react-native';\nimport RNAsyncStoragePlugin from '@huolala-tech/page-spy-plugin-rn-async-storage';\n\nPageSpy.registerPlugin(new RNAsyncStoragePlugin())\nnew PageSpy({\n  api: \"{deployPath}\",\n})\n以上がReact NativeプロジェクトにPageSpyを導入する全手順です。導入完了後、トップメニューのデバッグを開始をクリックして使用開始！"
    },
    {
      "language": "ja",
      "route": "/docs/rrweb#api",
      "parent": "RRWebPlugin",
      "title": "RRWebPlugin API",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/docs/rrweb#constructor",
      "parent": "RRWebPlugin",
      "title": "constructor()",
      "content": "\n\n型\nimport type { recordOptions } from 'rrweb/typings/types';\nimport type { eventWithTime } from '@rrweb/types';\n\ninterface Options extends recordOptions<eventWithTime> {\n  // 予約済み設定、現在は利用できません\n  allowOnline?: true;\n}\ndeclare class RRWebPlugin implements PageSpyPlugin {\n    constructor(options?: Options);\n}\n\n\n"
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/faq#diff-with-page-spy",
      "parent": "よくある質問",
      "title": "O-SpyとPageSpyの関係は？",
      "content": "O-SpyはPageSpyとそのプラグインエコシステムの機能をベースに構築されており、具体的には以下の3つの依存関係をパッケージ化しています：\n@huolala-tech/page-spy-browser\n@huolala-tech/page-spy-plugin-rrweb\n@huolala-tech/page-spy-plugin-data-harbor\n両者の主な違いは以下の通りです：\n\n\n\nO-Spy\nPageSpy\n\n\n\n\nデプロイが必要か\nいいえ\nはい\n\n\nオンラインリアルタイムデバッグ\n❌\n✅\n\n\nオフライン再生デバッグ\n✅\n✅\n\n\nデータのアップロード\n🟡 自身で処理が必要\n✅\n\n\nデータのダウンロード\n✅\n✅\n\n\n"
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/faq#where-data-stored",
      "parent": "よくある質問",
      "title": "O-Spyで記録されたデータはどこに保存されますか？",
      "content": "すべてのデータはユーザーのローカルに保存され、第三者のサーバーにアップロードされることはありません。データの保存戦略：O-Spyがデータを受信すると、まずメモリの配列に格納されます。配列に格納されているデータの容量が臨界値（10MB）に達すると、データは一時ファイルに書き込まれます（ソースコードを参照）。ページを更新すると、すべてのデータは破棄されます。"
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/introduction#what-is-ospy",
      "parent": "紹介",
      "title": "O-Spyとは？",
      "content": "O-Spy（発音 /əʊ spaɪ/、\"Oh-Spy\" のように）は、Webプロジェクトで「プログラム実行データをオフラインで記録する」デバッグツールです。記録されたデータはO-Spyプラットフォームで再生することができます。デモを見る。ワークフローは以下の通りです："
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/introduction#quick-start",
      "parent": "紹介",
      "title": "クイックスタート",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/introduction#step-1",
      "parent": "紹介",
      "title": "ステップ1：O-Spyの導入",
      "content": "フレームワークに依存せず、好きな方法でプロジェクトに導入できます。import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';プロジェクトに導入が成功すると、画面右下に \"O-Spy\" というドラッグ可能なコンポーネントが表示されます。クリックして確認してみましょう :)import { CallOSpy } from '../md-components/CallOSPy';"
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/introduction#step-2",
      "parent": "紹介",
      "title": "ステップ2：データのエクスポート",
      "content": "現在のページにはO-Spyが統合されています。これがあなたのプロジェクトページだと想像してください。プログラムにデータを生成させてみましょう。以下のボタンを自由にクリックしてください：import { MakeData } from '../md-components/MakeData'その後、O-Spyフローティングボタンをクリックしてダイアログを開き、\"ログのエクスポート\"をクリックすると、jsonファイルがダウンロードされます。"
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/introduction#step-3",
      "parent": "紹介",
      "title": "ステップ3：再生",
      "content": ""
    },
    {
      "language": "ja",
      "route": "/o-spy/docs/theme#customize-example",
      "parent": "カスタムテーマ",
      "title": "カスタマイズ例",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    }
  ],
  "ko": [
    {
      "language": "ko",
      "route": "/docs/api#pagespy",
      "parent": "API",
      "title": "PageSpy",
      "content": "\n인스턴스 변수 이름을 $pageSpy = new PageSpy(...)로 정의합니다;\n\nconstructor()\n$pageSpy.updateRoomInfo()\n$pageSpy.abort()\nPageSpy.registerPlugin()\nPageSpy.pluginsWithOrder\n$pageSpy.version\n$pageSpy.config\n$pageSpy.socketStore\n$pageSpy.showPanel() \n"
    },
    {
      "language": "ko",
      "route": "/docs/api#plugins",
      "parent": "API",
      "title": "플러그인",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/api#harbor",
      "parent": "API",
      "title": "DataHarborPlugin",
      "content": "\n인스턴스 변수 이름을 $harbor = new DataHarborPlugin(...)로 정의합니다;\n\nconstructor()\n수동 작업 로그\n$harbor.pause()\n$harbor.resume()\n$harbor.reharbor()\n"
    },
    {
      "language": "ko",
      "route": "/docs/api#rrweb",
      "parent": "API",
      "title": "RRWebPlugin",
      "content": "\n인스턴스 변수 이름을 $rrweb = new RRWebPlugin(...)로 정의합니다;\n\nconstructor()\n"
    },
    {
      "language": "ko",
      "route": "/docs/browser#online",
      "parent": "브라우저",
      "title": "온라인 체험",
      "content": "\n전체 코드를 보려면 클릭하세요: Codesandbox\n"
    },
    {
      "language": "ko",
      "route": "/docs/browser#usage",
      "parent": "브라우저",
      "title": "사용 방법",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/browser#step-1",
      "parent": "브라우저",
      "title": "첫 번째 단계",
      "content": "클라이언트 프로젝트에 <script>를 로드합니다:<!-- PageSpy SDK -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/page-spy/index.min.js\"></script>\n\n<!-- 플러그인 (필수는 아니지만 사용을 권장합니다) -->\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/data-harbor/index.min.js\"></script>\n<script crossorigin=\"anonymous\" src=\"{deployUrl}/plugin/rrweb/index.min.js\"></script>\n"
    },
    {
      "language": "ko",
      "route": "/docs/browser#step-2",
      "parent": "브라우저",
      "title": "두 번째 단계",
      "content": "PageSpy와 플러그인을 초기화합니다. 이들의 초기화 매개변수는 설정 항목을 제공하여 SDK의 동작을 사용자 정의할 수 있습니다:  고유의 PageSpy 플러그인을 개발할 수도 있습니다!\n</div>\n<script>\n  window.$harbor = new DataHarborPlugin();\n  window.$rrweb = new RRWebPlugin();\n\n  [window.$harbor, window.$rrweb].forEach(p => {\n    PageSpy.registerPlugin(p)\n  })\n\n  window.$pageSpy = new PageSpy();\n</script>\n이제 브라우저 프로젝트에서 PageSpy를 사용하기 위한 모든 단계가 완료되었습니다. 페이지 상단 메뉴를 클릭하여 시작 디버깅 사용!"
    },
    {
      "language": "ko",
      "route": "/docs/browser#framework",
      "parent": "브라우저",
      "title": "프레임워크에 통합",
      "content": "PageSpy는 현재 CodeSandbox 플랫폼에서 모든 프레임워크의 통합 가이드를 공개하고 있습니다. 온라인으로 경험해 보세요:\nReact：CodeSandbox - PageSpy in React\nVue：CodeSandbox - PageSpy in Vue\nSvelte：CodeSandbox - PageSpy in Svelte\nAngular：CodeSandbox - PageSpy in Angular\nNextjs：CodeSandbox - PageSpy in Nextjs\nNuxtjs：CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "ko",
      "route": "/docs/browser#extension",
      "parent": "브라우저",
      "title": "브라우저 플러그인",
      "content": "PageSpy는 브라우저 플러그인을 제공하여 통합 코드 없이도 모든 웹 페이지에서 PageSpy를 사용할 수 있도록 합니다.네, 맞습니다! PageSpy 브라우저 플러그인을 사용하면 통합 코드 없이도 모든 웹 페이지에서 PageSpy를 사용할 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/browser#install-extension",
      "parent": "브라우저",
      "title": "설치",
      "content": "브라우저 플러그인 저장소에 액세스하고 README 문서를 따라 설치하세요."
    },
    {
      "language": "ko",
      "route": "/docs/browser#extension-panel",
      "parent": "브라우저",
      "title": "패널 매개변수",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-2-0",
      "parent": "Changelog",
      "title": "v2.2.0",
      "content": "\n🆕 공식 웹사이트에 O-Spy가 출시되었습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/315;\n🆕 새로운 @huolala-tech/page-spy-plugin-ospy 오프라인 기록 플러그인을 추가했습니다;\n🟡 @huolala-tech/page-spy-plugin-whole-bundle 더 이상 새로운 기능이 추가되지 않습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-1-3",
      "parent": "Changelog",
      "title": "v2.1.3",
      "content": "\n🐛 리플레이 페이지의 Network 패널에 필터 기능을 추가했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-1-2",
      "parent": "Changelog",
      "title": "v2.1.2",
      "content": "\n🆕 리플레이 페이지의 사용자 추적 패널이 기본 선택 작업을 지원합니다;\n🆕 웹 페이지의 정적 리소스 요청을 볼 수 있습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/309;\n🐛 브라우저 SDK의 작업 시간 범위 로그가 오류를 일으키는 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/131;\n🐛 비동기 복사가 실패하는 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/130;\n🐛 uni.request 반환 값 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/issues/306;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-1-1",
      "parent": "Changelog",
      "title": "v2.1.1",
      "content": "\n🆕 브라우저 SDK가 제스처 기반 활성화를 지원합니다. 사용 설명서를 참조하세요;\nnew PageSpy({\n  ...,\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-1-0",
      "parent": "Changelog",
      "title": "v2.1.0",
      "content": "\n🆕 WholeBundlePlugin을 리팩토링하고 공식 웹사이트의 리플레이 실험실 페이지를 업데이트했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/125, https://github.com/HuolalaTech/page-spy-web/pull/304;\n🆕 소스 코드 위치 지정 기능을 최적화했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/300;\n🆕 미니 프로그램에 System 패널을 추가했습니다: https://github.com/HuolalaTech/page-spy/pull/123, https://github.com/HuolalaTech/page-spy-web/pull/299;\n🆕 미니 프로그램의 오프라인 로그 기능의 호환성을 최적화했습니다;\n🆕 플로팅 볼의 위치를 기억하는 기능을 추가했습니다: https://github.com/HuolalaTech/page-spy/pull/126;\n🆕 브라우저 SDK에 CSS 특성 감지 기능을 추가했습니다: https://github.com/HuolalaTech/page-spy/pull/128;\n🐛 몇 가지 문제를 수정했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-0-2",
      "parent": "Changelog",
      "title": "v2.0.2",
      "content": "\n🐛 DataHarborPlugin의 기본값이 다운로드 실패를 일으키는 문제를 수정했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-0-1",
      "parent": "Changelog",
      "title": "v2.0.1",
      "content": "\n🆕 DataHarborPlugin에 onAfterUpload 매개변수를 추가하여 업로드 후 동작을 사용자 정의할 수 있습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/119;\n🐛 몇 가지 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/118, https://github.com/HuolalaTech/page-spy/pull/120;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v2-0-0",
      "parent": "Changelog",
      "title": "v2.0.0",
      "content": "\n🆕 브라우저 팝업의 개정판이 출시되어 테마 색상 및 브랜드 사용자 정의, 시간 범위 로그 선택기, 메모 필드가 추가되었습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/113;\n🆕 미니 프로그램에서 팝업을 표시하는 방법이 추가되어 오프라인 로그 업로드를 지원합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/112;\n🐛 몇 가지 문제를 수정했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-9-6",
      "parent": "Changelog",
      "title": "v1.9.6",
      "content": "\n🆕 DataHarborPlugin 플러그인에 새로운 프로토타입 메서드를 추가했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/110;\n\n$harbor.pause()：기록을 일시 중지합니다;\n$harbor.resume(): 기록을 재개합니다. pause()와 대응됩니다;\n$harbor.reharbor()：기록된 데이터를 지우고 다시 만듭니다.\n\n\n🆕 리플레이 페이지에서 \"객체를 확장할 수 없음\"에 대한 힌트를 추가했습니다;\n🐛 application/x-www-form-urlencoded의 페이로드 표시를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/issues/267;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-9-5",
      "parent": "Changelog",
      "title": "v1.9.5",
      "content": "\n🆕 DockerHub 이미지가 추가되었습니다: https://hub.docker.com/r/huolalatech/page-spy-web;\n🆕 Baota의 원클릭 배포 설명 문서가 추가되었습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-9-4",
      "parent": "Changelog",
      "title": "v1.9.4",
      "content": "\n🐛 몇 가지 문제를 수정했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-9-3",
      "parent": "Changelog",
      "title": "v1.9.3",
      "content": "\n🆕 디버그 엔드의 Network 패널에 키워드 필터링을 추가했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/262;\n🆕 디버그 엔드의 로그 리플레이 페이지의 Console 패널이 스크롤을 따라가며 메시지 알림을 최적화했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/264;\n🐛 SDK의 ErrorPlugin의 오류 메시지를 최적화했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-9-2",
      "parent": "Changelog",
      "title": "v1.9.2",
      "content": "\n\n🆕 인스턴스화 매개변수에 dataProcessor 옵션을 추가하여 데이터를 필터링하거나 처리할 수 있습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/106;\n\nwindow.$pageSpy = new PageSpy({\n  ...,\n  dataProcessor: {\n    console: (data) => {\n      // 출력 내용에 \"secret\" 문자가 포함된 경우 무시 (디버그 엔드로 전송되지 않음)\n      if (data.logs.some(i => typeof i === 'string' && i.includes('secret'))) return false;\n    },\n    network: (data) => {\n      // 데이터 포인트 요청을 무시\n      if (/(sentry|metric|collect)/.test(data.url)) return false\n    },,\n    storage: (data) => {\n      // cookie의 키가 밑줄로 시작하는 경우, 디버그 엔드에서 보이는 값을 \"*******\"로 설정\n      if (data.type === \"cookie\" && data.action === \"get\") {\n        data.data.forEach((i) => {\n          if (i.name.startsWith(\"_\")) {\n            i.value = \"*******\";\n          }\n        });\n      }\n    },\n  },\n});\n\n\n\n\n🆕 업로드되는 로그 데이터를 조정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/107;\n\n\n🆕 인터랙션을 조정했습니다.\n\n로그 리플레이의 진행 바를 클릭하면 재생 상태를 유지합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/258;\n테이블 헤더가 드래그 가능하게 되었습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/257;\nHuawei 브라우저 인식을 지원합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/256;\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-9-1",
      "parent": "Changelog",
      "title": "v1.9.1",
      "content": "\n\n🆕 인스턴스화 매개변수에 serializeData: boolean 옵션을 추가하여 SDK가 오프라인 로그를 수집할 때 비기본 유형 데이터를 직렬화할 수 있는지 여부를 지정합니다. 기본값은 false입니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/241 / https://github.com/HuolalaTech/page-spy/pull/103;\n활성화되면, console에 출력된 데이터가 로그 리플레이 패널에서 확장하여 볼 수 있습니다. 사용 방법:\nwindow.$pageSpy = new PageSpy({\n  ...\n  // 주의: 직렬화 과정에서 부작용이 발생할 수 있으므로, 안전을 위해 기본값은 false로 설정되어 있습니다;\n  serializeData: true\n})\n\n\n\n🆕 Network 패널의 표시 정보를 최적화했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/239;\n\n\n🆕 리플레이 패널에서 canvas 내용을 재생할 수 있습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/238;\n\n\n🆕 리플레이 시 왼쪽의 작업 궤적이 클릭 동작을 표시합니다; 진행 바에는 이제 클릭 및 오류만 표시되며, 다른 데이터 활동은 탭 알림을 통해 표시됩니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/244 / https://github.com/HuolalaTech/page-spy-web/pull/247\n\n\n🐛 리플레이 로그 목록의 인터랙션을 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/242;\n\n\n🐛 몇 가지 문제를 수정했습니다:\n\n서버의 크로스 도메인 설정이 작동하지 않음;\n서버 로그 삭제 속도가 느림;\n오프라인 로그가 이제 네트워크 요청의 전체 수명 주기를 기록함;\nSDK 다운로드 파일 이름을 포맷팅함;\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-9-0",
      "parent": "Changelog",
      "title": "v1.9.0",
      "content": "\n🆕 새로운 문서 페이지;\n🆕 동적 실행 코드 기능을 미니 프로그램 SDK에서 분리하여 독립적인 플러그인 @huolala-tech/page-spy-plugin-mp-eval로 패키징하여 미니 프로그램 심사에 대한 영향을 줄였습니다;\n🆕 미니 프로그램 호환성: GET 요청이 자동으로 본문을 쿼리 문자열로 변환합니다: https://github.com/HuolalaTech/page-spy-web/issues/199;\n🐛 미니 프로그램 getAccountInfoSync 호환성 문제를 수정했습니다: https://github.com/HuolalaTech/page-spy-web/issues/213;\n🐛 미니 프로그램 updateRoomInfo 타입 정의가 투명하게 전달되지 않는 문제를 수정했습니다: https://github.com/HuolalaTech/page-spy-web/issues/213;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-10",
      "parent": "Changelog",
      "title": "v1.8.10",
      "content": "이번 업데이트는 \"오류 소스 코드 위치 지정\" 기능에 대한 많은 최적화를 포함합니다. 구체적인 내용은 다음과 같습니다:\n🆕 \"로그 리플레이 페이지\"의 오류도 소스 코드 위치 지정을 지원합니다;\n🆕 이전에는 오류만 지원했던 소스 코드 위치 지정 기능이 이제 console.xxx(Error)에도 적용됩니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/212;\n🆕 소스 코드에 \\t가 있는 경우, 1개의 탭 = N개의 공백으로 변환하는 옵션을 추가했습니다;\n🐛 로고의 인터랙션 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/issues/211;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-9",
      "parent": "Changelog",
      "title": "v1.8.9",
      "content": "\n🆕 React Native 애플리케이션 디버깅을 지원합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/87 / https://github.com/HuolalaTech/page-spy-web/pull/190;\n🆕 鸿蒙 App 애플리케이션 디버깅을 지원합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/191 / https://github.com/HuolalaTech/page-spy/pull/88;\n🆕 웹 애플리케이션에서 EventSource 요청 응답 데이터를 볼 수 있으며, 네트워크 패널 레이아웃을 최적화했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/206 / https://github.com/HuolalaTech/page-spy-web/issues/202 / https://github.com/HuolalaTech/page-spy-web/issues/183;\n🆕 메시지 유형을 최적화하여 디버그 엔드 인터페이스 응답 속도를 높였습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/91 / https://github.com/HuolalaTech/page-spy-web/pull/201;\n🆕 방 목록 페이지에 최대 30개의 패널을 표시하도록 제한했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/204;\n🐛 $pageSpy.abort()가 이벤트를 잘못 지우는 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/issues/205 / https://github.com/HuolalaTech/page-spy/pull/95;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-8",
      "parent": "Changelog",
      "title": "v1.8.8",
      "content": "\n🆕 로그 리플레이 페이지를 리팩토링하여 장시간, 대용량의 오프라인 로그 데이터를 재생할 때의 인터랙션을 더욱 부드럽게 했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/issues/186;\n🆕 UniApp을 네이티브 앱으로 패키징할 때의 디버깅을 지원합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/90 / https://github.com/HuolalaTech/page-spy-web/pull/197;\n🐛 네트워크 요청 헤더에 자기 참조가 있는 경우 Network 플러그인이 비정상적으로 작동하는 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/89 / https://github.com/HuolalaTech/page-spy-web/issues/193;\n🐛 Page 패널의 HTML 태그 표시가 부정확한 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/pull/196;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-7",
      "parent": "Changelog",
      "title": "v1.8.7",
      "content": "\n🆕 SDK의 메시지 전송 타이밍을 최적화했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/84;\n🐛 SDK의 재연결이 비정상적인 문제를 수정했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-6",
      "parent": "Changelog",
      "title": "v1.8.6",
      "content": "\n🆕 SDK가 간헐적으로 연결이 끊어질 경우, 지수적으로 재연결을 시도합니다 (강제로 방을 생성합니다). 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 SDK에 useSecret 매개변수를 추가하여 기본값은 false입니다. 설정하면 SDK는 방을 생성할 때 6자리의 랜덤 비밀번호를 사용합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 title / project 매개변수를 동적으로 업데이트할 수 있습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/78;\n🆕 브라우저 SDK의 플로팅 볼이 상, 하, 좌, 우로 드래그될 경우 자동으로 접힙니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/80;\n🆕 디버그 엔드의 방 목록 페이지 표시를 최적화했습니다;\n🆕 서버의 로그 데이터 직렬화를 최적화하여 성능을 크게 향상시켰습니다;\n🐛 몇 가지 문제를 수정했습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/issues/172 / https://github.com/HuolalaTech/page-spy/pull/79;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-5",
      "parent": "Changelog",
      "title": "v1.8.5",
      "content": "\n🆕 지원되지 않는 시스템 아키텍처를 제거했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-4",
      "parent": "Changelog",
      "title": "v1.8.4",
      "content": "\n🆕 SDK의 캐시 정책을 최적화하여 클라이언트 캐시로 인한 메모리 사용량을 크게 줄였습니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy-web/issues/169;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-3",
      "parent": "Changelog",
      "title": "v1.8.3",
      "content": "\n🆕 Taro 애플리케이션 디버깅을 지원합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/83 / https://github.com/HuolalaTech/page-spy-web/pull/184;\n🆕 鸿蒙 App 디버깅을 지원합니다. 자세한 내용은 다음을 참조하세요: https://github.com/HuolalaTech/page-spy/pull/84 / https://github.com/HuolalaTech/page-spy-web/pull/185;\n🐛 NetworkPlugin의 요청 오류 시 처리 동작을 최적화했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-2",
      "parent": "Changelog",
      "title": "v1.8.2",
      "content": "\n🆕 이전 버전의 npm 패키지가 일부 시스템 아키텍처에서 설치되지 않는 문제를 수정했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-1",
      "parent": "Changelog",
      "title": "v1.8.1",
      "content": "\n🆕 미니 프로그램 통합 문서에 \"주의 사항\"을 추가했습니다;\n🆕 로그 리플레이 페이지: 진행 바에 활동 집계 정보를 표시했습니다;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#v1-8-0",
      "parent": "Changelog",
      "title": "v1.8.0",
      "content": "\n🆕 미니 프로그램에서 코드를 전송하여 실행하는 기능을 지원합니다;\n🆕 DataHarborPlugin은 오프라인 로그 업로드를 지원하며, 디버그 엔드에 로그 파일 목록 페이지가 추가되었습니다;\n🆕 로그 리플레이 페이지 기능을 최적화했습니다: 레이아웃 변경, 배속 재생 지원;\n"
    },
    {
      "language": "ko",
      "route": "/docs/changelog#더-많은-내용",
      "parent": "Changelog",
      "title": "더 많은 내용",
      "content": "최근 업데이트 내용은 Release 페이지에서 확인할 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/data-harbor#api",
      "parent": "DataHarborPlugin",
      "title": "DataHarborPlugin API",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/data-harbor#constructor",
      "parent": "DataHarborPlugin",
      "title": "constructor()",
      "content": "\n\n타입 정의\ninterface DataHarborConfig {\n  // 오프라인 로그 데이터는 먼저 메모리에 기록되며, 크기가 지정된 값에 도달하면 임시 파일에 기록됩니다\n  // 기본값은 10M (10 * 1024 * 1024)\n  maximum?: number; // 브라우저에서만 지원\n\n  // 캐시할 데이터 유형 지정\n  caredData?: Record<DataType, boolean>;\n\n  // 오프라인 로그 파일 이름 지정, 기본값은 현재 시간을 기준으로 명명\n  filename?: () => string;\n\n  // 다운로드 로직 사용자 정의\n  onDownload?: (data: CacheMessageItem[]) => void; // 브라우저에서만 지원\n\n  // 업로드 성공 후 콜백, 개발자에게 알림 등 다른 기능 확장 가능\n  onAfterUpload?: (replayUrl: string, remark: string) => void;\n}\n\ndeclare class DataHarborPlugin implements PageSpyPlugin {\n  constructor(config?: DataHarborConfig);\n}\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/data-harbor#onOfflineLog",
      "parent": "DataHarborPlugin",
      "title": "수동으로 로그 조작",
      "content": "오프라인 로그의 다운로드와 업로드를 수동으로 조작합니다.\n\n타입 정의\ninterface WholeLogActionParams {\n  clearCache?: boolean;\n  remark?: string;\n}\n\ninterface PeriodLogActionParams {\n  startTime: number;\n  endTime: number;\n  remark?: string;\n}\n\n// 주의!\n// - 브라우저는 아래 4가지 메서드를 지원\n// - 미니 프로그램은 현재 upload() 메서드만 지원\ndeclare class DataHarborPlugin {\n  // 전체 로그\n  upload(params?: WholeLogActionParams): Promise<string>;\n  download(params?: WholeLogActionParams): Promise<void>;\n\n  // 기간별 로그\n  uploadPeriods(params: PeriodLogActionParams): Promise<string>;\n  downloadPeriods(params: PeriodLogActionParams): Promise<void>;\n}\n\n\n\n상세 정보\n자동 렌더링되는 UI 컨트롤을 숨기거나 특정 시점에 오프라인 로그 조작을 자동으로 트리거하고 싶을 때 이 메서드를 사용할 수 있습니다.\n전체 로그를 조작할 때, UI 팝업의 버튼을 통해 로그를 업로드/다운로드하면 현재 세션의 처음부터 끝까지의 완전한 로그가 대상이 됩니다. 하지만 수동으로 호출할 경우 기본적으로 기록된 로그 데이터가 지워지고 새로 기록이 시작됩니다. 두 번째 매개변수의 clearCache: false로 제어할 수 있습니다.\n기간별 로그 조작은 데이터를 지우지 않습니다.\n업로드가 완료되면 재생용 URL이 반환되어 콘솔에 출력됩니다.\n\n\n사용 예시\nwindow.$harbor = new DataHarborPlugin();\n\n// 전체 업로드\nconst url = await window.$harbor.upload();\n\n// 데이터를 지우지 않고 업로드\nconst url = await window.$harbor.upload({ clearCache: false });\n\n// 기간별 업로드\nconst url = await window.$harbor.uploadPeriods({\n  startTime: Date.now() - 1000 * 60, // 1분 전부터\n  endTime: Date.now(),\n});\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/data-harbor#pause",
      "parent": "DataHarborPlugin",
      "title": "pause()",
      "content": "기록을 일시 중지합니다.\n\n타입 정의\ndeclare class DataHarborPlugin {\n  pause(): void;\n}\n\n\n\n상세 정보\n로그 기록의 동작을 더 유연하게 제어할 수 있습니다.\n일시 중지 후에는 프로그램이 생성한 데이터가 기록되지 않습니다. $harbor.resume()을 실행하면 재개됩니다.\n\n\n사용 예시\nwindow.$harbor = new DataHarborPlugin();\n\n// 일시 중지\nwindow.$harbor.pause();\n\n// 재개\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/data-harbor#resume",
      "parent": "DataHarborPlugin",
      "title": "resume()",
      "content": "기록을 재개합니다.\n\n타입 정의\ndeclare class DataHarborPlugin {\n  resume(): void;\n}\n\n\n\n상세 정보\n로그 기록의 동작을 더 유연하게 제어할 수 있습니다.\n일시 중지에서 재개까지의 데이터는 기록되지 않습니다.\n\n\n사용 예시\nwindow.$harbor = new DataHarborPlugin();\n\n// 일시 중지\nwindow.$harbor.pause();\n\n// 재개\nwindow.$harbor.resume();\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/data-harbor#reharbor",
      "parent": "DataHarborPlugin",
      "title": "reharbor()",
      "content": "기록된 데이터를 지우고 기록을 계속합니다. 즉, 다시 기록을 시작합니다.\n\n타입 정의\ndeclare class DataHarborPlugin {\n  reharbor(): void;\n}\n\n\n\n사용 예시\nwindow.$harbor = new DataHarborPlugin();\n\nwindow.$harbor.reharbor();\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/deploy-guide#deployments",
      "parent": "사용 설명",
      "title": "다양한 배포 솔루션",
      "content": "\nNode.js로 배포\nDocker로 배포\n바오타 패널에 설치\n"
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-baota#prerequire",
      "parent": "Baota로 배포",
      "title": "사전 요구사항",
      "content": "바오타 패널을 설치하려면 바오타 패널 공식 웹사이트를 방문하여 해당하는 스크립트를 선택하여 설치하세요."
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-baota#install",
      "parent": "Baota로 배포",
      "title": "설치",
      "content": "\n\"Docker - 앱스토어\"에서 PageSpy를 찾아 설치를 클릭합니다.\n\n기본 정보를 설정하고 \"확인\"을 클릭합니다.\n\n패널이 자동으로 애플리케이션 초기화를 수행합니다. 약 1분이 소요됩니다. 초기화가 완료되면 포트 6752로 접근할 수 있습니다.\n"
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-baota#next",
      "parent": "Baota로 배포",
      "title": "다음 단계",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-docker#install",
      "parent": "Docker로 배포",
      "title": "설치",
      "content": "docker run -d --restart=always -v ./log:/app/log -v ./data:/app/data -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\n실행이 완료되면 브라우저에서 http://localhost:6752 에 접속하여 서비스를 이용할 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-docker#video",
      "parent": "Docker로 배포",
      "title": "비디오 튜토리얼",
      "content": "{' '}"
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-docker#next",
      "parent": "Docker로 배포",
      "title": "다음 단계",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-node#install",
      "parent": "Node로 배포",
      "title": "설치",
      "content": "실행이 완료되면 브라우저에서 http://localhost:6752 에 접속하여 서비스를 이용할 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-node#video",
      "parent": "Node로 배포",
      "title": "비디오 튜토리얼",
      "content": "{' '}"
    },
    {
      "language": "ko",
      "route": "/docs/deploy-with-node#next",
      "parent": "Node로 배포",
      "title": "다음 단계",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/faq#module",
      "parent": "자주 묻는 질문",
      "title": "PageSpy 모듈 구성",
      "content": "PageSpy 모듈 간의 의존성 관계와 상호작용 다이어그램:"
    },
    {
      "language": "ko",
      "route": "/docs/faq#compatibility",
      "parent": "자주 묻는 질문",
      "title": "PageSpy의 호환성",
      "content": "\n브라우저 SDK의 호환성 목표는 [\"chrome > 75\",\"safari > 12\", \"> 0.1%\", \"not dead\",\"not op_mini all\"]로 설정되어 있습니다. 다른 SDK는 각각의 저장소에서 확인할 수 있습니다.\n디버그 측은 주로 개발자가 사용하므로 브라우저의 새로운 기능 사용에 대해 개방적인 태도를 유지합니다. 따라서 최신 버전의 브라우저 사용을 권장하며, 호환성 목표는 [\"last 2 chrome version\", \"last 2 firefox version\", \"last 2 safari version\"]로 설정되어 있습니다.\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#hide-logo",
      "parent": "자주 묻는 질문",
      "title": "SDK가 렌더링하는 아이콘을 숨기려면 어떻게 하나요?",
      "content": "window.$pageSpy = new PageSpy({\n  // ... 기타 설정 매개변수\n  autoRender: false,\n});\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#init-params",
      "parent": "자주 묻는 질문",
      "title": "인스턴스화 시 어떤 매개변수를 전달할 수 있으며, 각각의 역할은 무엇인가요?",
      "content": "PageSpy API를 참조하세요."
    },
    {
      "language": "ko",
      "route": "/docs/faq#update-info",
      "parent": "자주 묻는 질문",
      "title": "초기화 매개변수를 어떻게 업데이트하나요?",
      "content": "PageSpy는 기기를 식별하기 위한 Device ID를 제공하며, 동시에 개발자가 초기화 시 클라이언트를 식별하는 데 도움이 되는 project/title을 제공합니다. 하지만 초기화 후에 이러한 매개변수 정보를 업데이트하고 싶을 수 있습니다. 작업 방법은 다음과 같습니다:window.$pageSpy = new PageSpy(...);\n\n// updateRoomInfo를 호출하여 project/title 업데이트\nwindow.$pageSpy.updateRoomInfo({ project: 'xxx', title: 'xxx' });\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#framework",
      "parent": "자주 묻는 질문",
      "title": "xxx 프레임워크에서 어떻게 통합하나요?",
      "content": "PageSpy는 CodeSandbox 플랫폼을 통해 현재 인기 있는 모든 프레임워크와의 통합 가이드를 제공합니다. 온라인으로 체험해 보세요:\nReact: CodeSandbox - PageSpy in React\nVue: CodeSandbox - PageSpy in Vue\nSvelte: CodeSandbox - PageSpy in Svelte\nAngular: CodeSandbox - PageSpy in Angular\nNextjs: CodeSandbox - PageSpy in Nextjs\nNuxtjs: CodeSandbox - PageSpy in Nuxtjs\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#test-domain",
      "parent": "자주 묻는 질문",
      "title": "pagespy.jikejishu.com은 공식 제공 도메인인가요? 계속 사용할 수 있나요?",
      "content": "https://pagespy.jikejishu.com은 PageSpy를 온라인으로 체험하고 학습할 수 있도록 임시로 구축한 서비스입니다. 24시간 가용성을 보장하지 않으며, 데이터 보안을 보장하지 않고, 발생하는 손실은 자기 책임입니다. 체험 후에는 프라이빗 서버나 내부 네트워크에 직접 배포하는 것을 강력히 권장합니다."
    },
    {
      "language": "ko",
      "route": "/docs/faq#server-port",
      "parent": "자주 묻는 질문",
      "title": "로컬에서는 6752 포트에 접근할 수 있는데 서버에 배포하면 안 되는 이유는 무엇인가요?",
      "content": "서버의 방화벽이나 보안 그룹 규칙에서 6752 포트가 개방되어 있는지 확인하세요."
    },
    {
      "language": "ko",
      "route": "/docs/faq#debug-disabled",
      "parent": "자주 묻는 질문",
      "title": "디버그 버튼에 \"현재 연결에 클라이언트가 존재하지 않습니다\"라고 표시되는 이유는 무엇인가요?",
      "content": "이러한 상황은 일반적으로 SDK가 정상적으로 룸을 생성했지만 웹소켓을 통해 룸에 참여할 수 없는 경우에 발생합니다. 다음 단계에 따라 확인하세요:\nSDK가 있는 클라이언트의 콘솔을 열어 오류가 있는지 확인합니다.\n콘솔에 \"WebSocket connect failed\" 관련 메시지가 표시되면 서버 설정이 올바른지 확인합니다.\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#nginx",
      "parent": "자주 묻는 질문",
      "title": "배포할 때 nginx는 어떻게 설정하나요?",
      "content": "참고를 위해 https://pagespy.jikejishu.com의 nginx 설정을 공유합니다:server {\n  listen 443 ssl;\n  server_name pagespy.jikejishu.com;\n\n  if ($scheme != https) {\n      rewrite ^(.*)$  https://$host$1 permanent;\n  }\n\n  ssl_certificate /etc/letsencrypt/live/pagespy.jikejishu.com/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/pagespy.jikejishu.com/privkey.pem;\n\n  location / {\n      proxy_pass http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n  }\n}\n\nserver {\n  if ($host = pagespy.jikejishu.com) {\n      return 301 https://$host$request_uri;\n  }\n\n  listen 80;\n  listen [::]:80;\n  server_name pagespy.jikejishu.com;\n  return 404;\n}\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#sub-path",
      "parent": "자주 묻는 질문",
      "title": "서브 경로에 어떻게 배포하나요?",
      "content": "버전 1.5.4에서는 사용자가 서비스를 서브 경로에 배포할 수 있도록 지원합니다. 설치 과정은 동일하며, nginx 설정만 조정하면 됩니다:server {\n  # ...\n\n  # <sub-path>에 배포하려는 서브 경로를 입력\n  location /<sub-path>/  {\n      # 여기의 <sub-path>는 위와 동일하게 유지\n      rewrite ^/<sub-path>/(.*)$ /$1 break;\n      proxy_pass            http://127.0.0.1:6752;\n      proxy_http_version    1.1;\n      proxy_set_header      Upgrade $http_upgrade;\n      proxy_set_header      Connection \"upgrade\";\n      proxy_set_header      Host $host;\n      proxy_set_header      X-Real-IP $remote_addr;\n      proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n\n  # 여기의 <sub-path>는 위와 동일하게 유지\n  location /<sub-path> {\n      return 301 $scheme://$host$request_uri/;\n  }\n}\n설정을 조정한 후 nginx를 재시작하면 서브 경로로 접근할 수 있습니다. 주의할 점은 이제 인스턴스화 시 api와 clientOrigin 매개변수를 수동으로 전달하여 SDK에 배포 주소를 알려줘야 합니다. 예:window.$pageSpy = new PageSpy({\n  // 예: api: \"example.com/pagespy\"\n  api: '<host>/<sub-path>',\n\n  // 예: clientOrigin: \"https://example.com/pagespy\"\n  clientOrigin: '<scheme>://<host>/<sub-path>',\n});\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#basic-auth",
      "parent": "자주 묻는 질문",
      "title": "디버그 측에 보안 인증 보호를 어떻게 추가하여 개발자가 인증 후에만 접근할 수 있게 하나요?",
      "content": "서버에서 IP 화이트리스트를 설정하거나 HTTP 인증을 사용하여 보호할 수 있습니다.\n\nNginx IP 화이트리스트 설정 예시:\nserver {\n  location / {\n    # 접근 허용할 IP\n    allow <ip>;\n\n    # allow 외의 모든 클라이언트 접근 거부\n    deny all;\n  }\n}\n\n\n\nNginx HTTP 인증 설정, 접근 시 계정과 비밀번호 필요:\n먼저 htpasswd로 계정/비밀번호 파일 생성:\n# 실행 후 비밀번호 입력 및 확인 필요\nhtpasswd -c /etc/nginx/.htpasswd <사용자명>;\n\n그 다음 nginx 파일에서 auth_basic 모듈 설정:\nserver {\n  location / {\n    auth_basic \"PageSpy 서비스에 접근하려면 사용자명과 비밀번호를 입력하세요\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n\n  location ~ /(api|page-spy|plugin) {\n    proxy_pass http://127.0.0.1:6752;\n    proxy_http_version    1.1;\n    proxy_set_header      Upgrade $http_upgrade;\n    proxy_set_header      Connection \"upgrade\";\n  }\n}\n\n마지막으로 nginx 서비스를 재시작합니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#extension",
      "parent": "자주 묻는 질문",
      "title": "프로젝트에 수동으로 통합하고 싶지 않은 경우, 비즈니스 프로젝트 코드를 침해하지 않고 구현할 방법이 있나요?",
      "content": "PageSpy는 브라우저 확장 프로그램을 제공하며, 다음과 같은 기능을 제공합니다:\n최신 버전의 SDK 자동 주입\n인스턴스화 작업 자동 완료\n주입할 도메인 설정 규칙 제공\n사용하려면 여기를 클릭하세요: HuolalaTech/page-spy-extension"
    },
    {
      "language": "ko",
      "route": "/docs/faq#tampermonkey",
      "parent": "자주 묻는 질문",
      "title": "Tampermonkey 스크립트를 사용할 수 있나요?",
      "content": "다음 내용을 참조하세요:// ==UserScript==\n// @name         Inject PageSpy Script\n// @namespace    http://tampermonkey.net/\n// @version      0.1\n// @description  Inject script on xxx.yyy\n// @author       You\n// @match        <매칭 규칙, 예: example.com>\n// @grant        none\n// ==/UserScript==\n\n(function () {\n  'use strict';\n\n  var script1 = document.createElement('script');\n  script1.setAttribute('crossorigin', 'anonymous');\n  // 실제 프로젝트에서는 SDK의 주소 링크를 교체하세요\n  script1.src = 'https://pagespy.jikejishu.com/page-spy/index.min.js';\n\n  var script2 = document.createElement('script');\n  script2.textContent = 'window.$pageSpy = new PageSpy();';\n\n  document.head.prepend(script1);\n  script1.onload = () => {\n    document.head.appendChild(script2);\n  };\n})();\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#http-error",
      "parent": "자주 묻는 질문",
      "title": "비즈니스 프로젝트가 HTTPS에 배포되어 있고 PageSpy가 HTTP에 배포되어 있을 때 콘솔 오류는 어떻게 해결하나요?",
      "content": "브라우저는 HTTPS 사이트에서 HTTP 리소스 로딩을 차단합니다. 이는 HTTP와 HTTPS 간의 데이터 전송에서 HTTPS는 암호화와 보안을 제공하지만 HTTP는 평문 전송으로 보안 위험이 있기 때문입니다.PageSpy를 HTTPS 서비스로 업그레이드하면 이 문제를 완벽하게 해결할 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/faq#prod-debug",
      "parent": "자주 묻는 질문",
      "title": "특정 사용자만 디버그하려면 어떻게 하나요?",
      "content": "가장 간단한 방법은 사용자가 PageSpy 브라우저 확장 프로그램을 사용하는 것입니다. 이는 매우 협조적인 고객이며 PC 프로젝트인 경우에 적합하지만, 이러한 전제 조건은 매우 까다롭습니다.그렇다면 H5 프로젝트를 프로덕션에 배포했을 때 PageSpy를 사용하려면 어떻게 해야 할까요? 모든 사용자에게 활성화하는 것은 현실적이지 않습니다.PageSpy의 활성화 과정은 총 두 단계입니다:\nhead 태그에서 <script>로 SDK 가져오기\n인스턴스화\nPageSpy는 두 번째 인스턴스화 단계 전까지는 가져온 <script>가 프로젝트에 어떤 영향도 주지 않습니다. 특정 사용자를 디버그하려면 두 번째 단계가 핵심입니다: 어떤 사용자의 단말에서 PageSpy를 인스턴스화할 것인가. 이에 대해 두 가지 방안이 있습니다:\n\nHTML 동적 응답: 사용자가 HTML을 요청할 때 사용자의 고유 식별자를 얻을 수 있고 HTML에 동적으로 주입할 수 있다면, 사용자에게 HTML을 반환하기 전에 <script>와 인스턴스화 로직을 주입할지 결정할 수 있습니다.\n\n\n사용자가 제스처로 활성화: 이는 일반적으로 사용자의 적극적인 협조가 필요합니다. 기본적으로 SDK를 주입하지만 인스턴스화하지 않고, 사용자가 특별한 제스처를 트리거한 후에 디버그를 시작합니다.\n\n참고: 기술적인 구현 외에도 법적 준수 등 보안 위험에 주의해야 합니다."
    },
    {
      "language": "ko",
      "route": "/docs/faq#page-principle",
      "parent": "자주 묻는 질문",
      "title": "Page 패널의 원리는 무엇인가요?",
      "content": "Page 패널은 클라이언트의 document.documentElement.outerHTML을 디버그 측의 iframe에 렌더링하여 로컬 콘솔에서 직접 요소를 검사할 수 있게 합니다."
    },
    {
      "language": "ko",
      "route": "/docs/faq#page-interactive",
      "parent": "자주 묻는 질문",
      "title": "Page 패널에 렌더링된 클라이언트와 직접 상호작용할 수 있나요?",
      "content": "직접 상호작용은 불가능합니다. 특정 상호작용을 실행해야 하는 경우, Console 패널 하단에서 코드를 입력하여 실행한 후 Page 패널로 돌아가 인터페이스 반응을 확인할 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/faq#page-style",
      "parent": "자주 묻는 질문",
      "title": "Page 패널의 스타일이 올바르지 않은 이유는 무엇인가요?",
      "content": "\n클라이언트와 디버그 측의 렌더링 환경이 다릅니다. 예: 클라이언트의 브라우저 버전이 Chrome 75이고 디버그 측의 브라우저 버전이 Chrome 120인 경우\n디버그 측에서 클라이언트가 참조하는 리소스에 접근할 때 네트워크 제한이 있습니다\n따라서 스타일은 참고용으로만 사용하세요."
    },
    {
      "language": "ko",
      "route": "/docs/faq#page-reset",
      "parent": "자주 묻는 질문",
      "title": "Page 패널이 클라이언트의 내용을 100% 복원할 수 없는 이유는 무엇인가요?",
      "content": "SDK는 페이지를 \"스크린샷\"하여 디버그 측으로 전송할 수 있지만 다음과 같은 이유로 구현하지 않았습니다:\n\"이미지\"는 텍스트보다 데이터 크기가 크며, 데이터 상호작용이 네트워크 전송 오버헤드를 증가시킵니다\nSDK의 크기와 복잡도가 증가합니다\n\"스타일 오류\"의 경우, 원격 협업 시 테스터가 개발자에게 정확하게 피드백할 수 있습니다\n이러한 이유로 Page 패널의 스타일은 참고용으로만 제공됩니다."
    },
    {
      "language": "ko",
      "route": "/docs/faq#api-config",
      "parent": "자주 묻는 질문",
      "title": "API 서비스 설정을 어떻게 수정하나요?",
      "content": "NPM 패키지 배포 방식으로 명령줄에서 page-spy-api를 실행하면 실행 디렉토리에 기본적으로 config.json 설정 파일이 생성됩니다. 이 파일에서 실행 포트와 다중 인스턴스 배포를 설정할 수 있습니다:\n\n설정 수정\n{\n  \"port\": \"6752\", //리스닝 포트\n  \"maxLogFileSizeOfMB\": 10240, //로그 재생 파일 저장 크기(MB)\n  \"maxLogLifeTimeOfHour\": 720, //로그 재생 파일 최대 보관 시간(시간)\n  \"notAllowedDeleteLog\": false, //로그 재생 삭제 허용 여부\n  \"maxRoomNumber\": 500, //최대 허용 룸 수\n  \"corsConfig\": {\n    \"allowOrigins\": [\"https://test.huolala.com\"], // 기본 설정은 모든 도메인의 CORS 허용\n    \"allowHeaders\": [\n      \"Origin\",\n      \"Authorization\",\n      \"Content-Length\",\n      \"X-Request-Id\",\n      \"Content-Type\",\n      \"Referer\",\n      \"User-Agent\",\n      \"Host\"\n    ],\n    \"allowMethods\": [\n      \"HEAD\",\n      \"POST\",\n      \"GET\",\n      \"OPTIONS\",\n      \"PUT\",\n      \"DELETE\",\n      \"UPDATE\"\n    ],\n    \"exposeHeaders\": [\"X-Request-Id\"]\n  }\n}\n\n\n\n다중 인스턴스 배포(버전 1.5.0 이상 필요)\nrpcAddress 설정은 다중 인스턴스 배포 설정으로, ip와 port는 여러 머신의 ip 및 rpc 포트입니다. 여러 인스턴스는 rpc를 통해 통신하며, 프로그램은 머신 ip를 기반으로 rpc 서비스를 시작합니다. 따라서 ip가 중복되지 않도록 해야 하며, 중복되면 메시지 혼선이나 손실이 발생할 수 있습니다.\n{\n  \"port\": \"6752\",\n  \"rpcAddress\": [\n    {\n      \"ip\": \"192.168.123.1\",\n      \"port\": \"20008\"\n    },\n    {\n      \"ip\": \"192.168.123.2\",\n      \"port\": \"20008\"\n    }\n  ]\n}\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#pnpm",
      "parent": "자주 묻는 질문",
      "title": "pnpm으로 전역 설치한 패키지를 pm2로 시작할 때 오류가 발생하는 이유는 무엇인가요?",
      "content": "pnpm으로 전역 설치한 패키지는 pnpm이 셸 스크립트로 래핑합니다. 즉, pm2 start page-spy-api를 실행할 때 실제로는 셸 스크립트를 찾게 되며, pm2가 이를 해석하여 실행할 수 없어 오류가 발생합니다.yarn 또는 npm을 사용하여 설치하면 이 문제를 해결할 수 있습니다. 관련 논의: Unitech/pm2#5416"
    },
    {
      "language": "ko",
      "route": "/docs/faq#upgrade",
      "parent": "자주 묻는 질문",
      "title": "새 버전이 출시된 후 최신 버전으로 어떻게 업그레이드하나요?",
      "content": "\n\ndocker로 배포한 경우:\n# 이미지 업데이트\ndocker pull ghcr.io/huolalatech/page-spy-web:latest\n\n# 실행 중인 PageSpy 컨테이너 중지\ndocker stop pageSpy && docker rm -f pageSpy\n\n# 재실행\ndocker run -d --restart=always -p 6752:6752 --name=\"pageSpy\" ghcr.io/huolalatech/page-spy-web:latest\n\n\n\nNPM 패키지로 배포한 경우:\n# 패키지 업데이트(yarn)\nyarn global upgrade @huolala-tech/page-spy-api@latest\n\n# 패키지 업데이트(npm)\nnpm install -g @huolala-tech/page-spy-api@latest\n\n# pm2로 재시작\npm2 restart page-spy-api\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#auto-destroy",
      "parent": "자주 묻는 질문",
      "title": "룸 연결은 어떤 상황에서 자동으로 파괴되나요?",
      "content": "\n설정 확인: https://github.com/HuolalaTech/page-spy-api/blob/master/room/local_room.go#L297-L323\n\n룸 생성 후 SDK나 디버그 측이 입장하지 않으면 1분 후 파괴됩니다(실제 사용에서는 이 시나리오가 존재하지 않습니다)\nSDK와 디버그 측이 모두 연결이 끊어지면 1분 후 파괴됩니다\n데이터 메시지 교환이 없는 상태가 5분 지속되면 파괴됩니다\n연결 사용이 1시간을 초과하면 자동으로 파괴됩니다\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#alipay-global",
      "parent": "자주 묻는 질문",
      "title": "Alipay 미니프로그램에서 원격 코드 실행 시 my.getCurrentPages()와 같은 전역 객체에 접근할 수 없는 이유는 무엇인가요?",
      "content": "Alipay 미니프로그램은 역사적인 이유로 전역 객체 접근에 제한을 두었습니다. 미니프로그램 설정 파일이나 Alipay 미니프로그램 IDE에서 설정할 수 있습니다:\nIDE: 상세 -> 컴파일 설정 -> 전역 객체(global/globalThis) 접근 정책: 접근 가능(권장)\n설정 파일: https://opendocs.alipay.com/mini/03dbc3?pathHash=e876dc50#globalObjectMode\n"
    },
    {
      "language": "ko",
      "route": "/docs/faq#offline-log",
      "parent": "자주 묻는 질문",
      "title": "업로드한 파일 로그가 보이지 않는 이유는 무엇인가요?",
      "content": "\n업로드된 파일 로그는 기본적으로 최신 10GB까지, 그리고 30일 동안 보관되며, 설정을 통해 사용자 정의할 수 있습니다.\n업로드 로그는 실행 디렉토리의 log 디렉토리에 저장됩니다. docker로 실행하는 경우 docker가 삭제되면 로그도 함께 삭제됩니다. -v ./log:/app/log -v ./data:/app/data 디렉토리 매핑을 사용하여 영구 저장할 수 있습니다.\n"
    },
    {
      "language": "ko",
      "route": "/docs/harmony#step-1",
      "parent": "하모니 앱",
      "title": "1단계",
      "content": "디버그할 HAP 디렉토리에서 의존성을 설치합니다:# API 9\nohpm install @huolala/page-spy-harmony@^1.0.0\n\n# API 11\nohpm install @huolala/page-spy-harmony@^2\n"
    },
    {
      "language": "ko",
      "route": "/docs/harmony#step-2",
      "parent": "하모니 앱",
      "title": "2단계",
      "content": "적절한 위치에서 SDK를 가져오고 초기화합니다. 여기서는 EntryAbility를 예시로 들겠습니다. 초기화 매개변수는 SDK의 동작을 사용자 정의하기 위한 선택적 설정 옵션을 제공합니다:import { PageSpy } from '@huolala/page-spy-harmony';\nimport axiosInstance from 'path/to/your/axios-instance';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    new PageSpy({\n      context: this.context,\n      api: \"{deployPath}\",\n      enableSSL: true,\n      axios: axiosInstance\n    })\n  }\n}\n이상이 HarmonyOS 앱 프로젝트에 PageSpy를 연동하는 전체 과정입니다. 연동이 완료된 후 상단 메뉴의 디버그 시작을 클릭하여 사용하세요!"
    },
    {
      "language": "ko",
      "route": "/docs/introduction#what-is-page-spy",
      "parent": "소개",
      "title": "Page Spy란 무엇인가요?",
      "content": "PageSpy는 웹 / 미니프로그램 / React Native / HarmonyOS 앱 등의 플랫폼 프로젝트와 호환되는 오픈소스 디버깅 플랫폼입니다. 네이티브 API의 래퍼를 기반으로, 네이티브 메소드 호출 시의 매개변수를 필터링하고 변환하여 디버그 측이 소비할 수 있는 특정 형식의 메시지로 정리합니다. 디버그 측은 메시지 데이터를 수신한 후 로컬 콘솔과 유사한 기능 인터페이스로 데이터를 표시합니다."
    },
    {
      "language": "ko",
      "route": "/docs/introduction#why-is-page-spy",
      "parent": "소개",
      "title": "왜 Page Spy인가요?",
      "content": "\n백문이 불여일견입니다.\n"
    },
    {
      "language": "ko",
      "route": "/docs/introduction#when-to-use",
      "parent": "소개",
      "title": "언제 사용하나요?",
      "content": "로컬에서 콘솔 디버깅을 할 수 없는 모든 상황이 PageSpy가 빛을 발할 수 있는 때입니다!\n다음과 같은 시나리오 사례들을 살펴보겠습니다:\nH5, Webview 애플리케이션의 로컬 디버깅: 기존에는 H5에서 정보를 확인할 수 있는 패널을 제공하는 제품들이 있었지만, 모바일 단말기의 화면이 너무 작아 조작이 불편하고, 표시가 불친절하며, 정보가 잘리는 등의 문제가 있었습니다.\n원격 근무, 지역 간 협업: 이메일, 전화, 화상회의 등 전통적인 소통 방식은 소통 효율이 낮고, 장애 정보가 불완전하며, 오해와 오판이 생기기 쉽습니다.\n사용자 단말기에서 발생하는 화면 멈춤 문제: 전통적인 문제 파악 방식에는 데이터 모니터링, 로그 분석 등이 있지만, 이러한 방식은 문제 해결 담당자가 비즈니스 요구사항 시나리오와 기술 구현을 이해해야 합니다.\nPageSpy의 목표는 위와 같은 상황에 처한 사람들을 돕는 것입니다."
    },
    {
      "language": "ko",
      "route": "/docs/introduction#feature-overview",
      "parent": "소개",
      "title": "인터페이스 개요",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/introduction#online-debug",
      "parent": "소개",
      "title": "온라인 디버깅",
      "content": "\nConsole 패널: console.<log | info | warn | error | debug>로 출력된 로그 정보를 표시하고, 클라이언트에 실행할 코드를 전송할 수 있습니다.\n\nNetwork 패널: 클라이언트에서 발생한 네트워크 요청 정보를 표시합니다.\n\nElement 패널: 클라이언트의 현재 인터페이스를 표시하고, HTML 노드 트리를 확인할 수 있습니다.\n\nStorage 패널: 클라이언트의 로컬 캐시 데이터를 확인합니다.\n\nSystems 패널: 클라이언트의 시스템 정보를 표시하고, 호환성을 확인합니다.\n이 외에도, 새로운 데이터가 추가되거나 데이터가 변경될 때 실시간으로 알림을 받을 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/introduction#offline-debugging",
      "parent": "소개",
      "title": "오프라인 재생",
      "content": "재생 진행 상황은 사용자가 제어할 수 있으며, 프로그레스 바의 재생에 따라 클라이언트의 조작 궤적과 해당하는 데이터를 확인할 수 있습니다."
    },
    {
      "language": "ko",
      "route": "/docs/miniprogram#step-1",
      "parent": "미니프로그램",
      "title": "1단계",
      "content": "프로젝트에 의존성을 설치합니다. 여러 미니프로그램 플랫폼을 위한 SDK를 제공하고 있습니다. 필요에 따라 설치하세요:"
    },
    {
      "language": "ko",
      "route": "/docs/miniprogram#step-2",
      "parent": "미니프로그램",
      "title": "2단계",
      "content": "PageSpy 서비스 도메인을 미니프로그램의 http, websocket 요청 화이트리스트에 추가합니다. 개발 환경을 제외하고 미니프로그램은 https와 wss 프로토콜 사용을 강제한다는 점에 주의하세요:https://<your-pagespy-host>\nwss://<your-pagespy-host>\n"
    },
    {
      "language": "ko",
      "route": "/docs/miniprogram#step-3",
      "parent": "미니프로그램",
      "title": "3단계",
      "content": "진입점 파일에서 SDK를 가져오고 인스턴스화합니다. 초기화 매개변수는 SDK의 동작을 사용자 정의하기 위한 선택적 설정 옵션을 제공합니다:import PageSpy from '@huolala-tech/page-spy-wechat';\n\nconst $pageSpy = new PageSpy({\n  api: \"{deployPath}\",\n})\n"
    },
    {
      "language": "ko",
      "route": "/docs/miniprogram#menus",
      "parent": "미니프로그램",
      "title": "디버그 메뉴",
      "content": "생성된 PageSpy 인스턴스에서 showPanel() 메서드를 호출하면 디버깅을 보조하기 위한 디버그 메뉴가 팝업됩니다:<img src={mpPanelImg} style={{ maxWidth: 320 }} />이상이 미니프로그램 프로젝트에 PageSpy를 연동하는 전체 과정입니다. 연동이 완료된 후 상단 메뉴의 디버그 시작을 클릭하여 사용하세요!"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#why",
      "parent": "오프라인 로그",
      "title": "왜 필요한가",
      "content": "그동안 PageSpy의 온라인 디버깅은 많은 까다로운 문제를 해결했지만, PageSpy를 사용하기 위해서는 전제 조건이 있었습니다: \"클라이언트와 디버그 측이 동시에 온라인 상태여야 한다\". 이 전제 조건은 PageSpy의 사용 시나리오를 제한했습니다. 예를 들면:\n하나의 문제를 해결하기 위해 개발자와 테스터 두 명의 인력이 동시에 투입되어야 함\n디버깅 중에 클라이언트가 백그라운드로 전환되어 연결이 끊어짐\n동시에 PageSpy 자체에도 제약을 가져왔습니다. 예를 들면:\n수집하는 데이터의 용량, 네트워크 전송의 부하를 고려해야 함\n이러한 문제들을 해결하고 더 큰 자유도를 얻기 위해, PageSpy는 1.7.3 버전에서 로그 재생 기능을 제공하게 되었습니다!"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#where",
      "parent": "오프라인 로그",
      "title": "로그는 어디서 오는가",
      "content": "PageSpy의 SDK가 플러그인 등록을 지원하게 된 후, 개발팀은 즉시 DataHarborPlugin 플러그인의 개발을 추진했습니다.\nData Harbor, 데이터 항구.\n멘탈 모델: PageSpy가 생성하는 데이터는 끊임없이 \"데이터 항구\"로 전송되며, 데이터의 정리, 패키징, 압축 후에 \"데이터 항구\"는 데이터를 \"컨테이너\"(메모리 또는 로컬 임시 파일)에 저장하고 다음 지시를 기다립니다.\n내부적으로 \"public-data\" 이벤트(\"public-data\" 이벤트란?)를 모니터링하여 오프라인 데이터 캐시 기능을 구현하고, SDK가 렌더링하는 컨트롤에서 데이터 업로드 및 다운로드 기능을 제공합니다. 클라이언트에서 문제가 발견되면 테스터는 직접 데이터를 업로드하거나 다운로드할 수 있습니다. 이러한 혁신으로 기존의 \"클라이언트와 디버그 측이 동시에 온라인 상태여야 한다\"는 전제 조건이 해소되었습니다."
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#how-to-use",
      "parent": "오프라인 로그",
      "title": "사용 방법",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#browser",
      "parent": "오프라인 로그",
      "title": "브라우저에서 사용",
      "content": "\nPageSpy의 오프라인 로그 재생 기능만 필요한 경우, 더 쉽게 통합할 수 있는 O-Spy의 사용을 추천합니다.\n"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#step-1",
      "parent": "오프라인 로그",
      "title": "1단계: 클라이언트에 SDK와 플러그인 도입",
      "content": "<html>\n  <head>\n    <!-- 1. PageSpy 로드 -->\n    <script src=\"{deployUrl}/page-spy/index.min.js\"></script>\n    <!-- 2. DataHarbor 플러그인 로드: 오프라인 로그 데이터 캐시, 다운로드/업로드 기능 제공 -->\n    <script src=\"{deployUrl}/plugin/data-harbor/index.min.js\"></script>\n    <!-- 3. RRWeb 플러그인도 로드하여 사용자 조작 궤적을 오프라인 로그에 기록 가능 -->\n    <script src=\"{deployUrl}/plugin/rrweb/index.min.js\"></script>\n\n    <script>\n      // 4. 플러그인 등록, config 정보는 다음 참조: https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-data-harbor\n      PageSpy.registerPlugin(new DataHarborPlugin(config));\n      PageSpy.registerPlugin(new RRWebPlugin());\n\n      // 5. PageSpy 인스턴스화\n      window.$pageSpy = new PageSpy({\n        // SDK와 디버그 측이 실시간 연결을 설정하지 않으려면 오프라인 모드를 활성화할 수 있습니다\n        // offline: true\n      });\n    </script>\n  </head>\n</html>\n정상적으로 도입되면 페이지 우측 하단에 PageSpy의 플로팅 볼이 나타나며, 플로팅 볼을 클릭하면 표시되는 대화상자에 업로드와 다운로드 버튼이 포함되어 있어야 합니다."
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#step-2",
      "parent": "오프라인 로그",
      "title": "2단계: 로그 재생",
      "content": "디버그 측에 들어가서 상단 메뉴의 \"디버그 시작 - 로그 재생\"을 클릭하여 재생 목록 페이지로 이동한 후, 이전 단계에서 업로드/다운로드한 json 데이터를 선택하면 재생 기능을 사용할 수 있습니다!"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#plugins",
      "parent": "오프라인 로그",
      "title": "다른 플러그인과 함께 사용",
      "content": "DataHarborPlugin은 데이터 수집과 데이터 처리 기능만을 제공합니다. PageSpy는 추가로 다음과 같은 플러그인을 제공합니다:\nRRWebPlugin: rrweb를 사용하여 DOM 업데이트를 기록하고, 디버그 측의 \"로그 재생\" 패널 좌측에서 사용자의 조작 궤적을 확인할 수 있습니다.\n"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#use-ospy",
      "parent": "오프라인 로그",
      "title": "O-Spy 사용하기",
      "content": "O-Spy의 SDK는 플러그 앤 플레이 방식으로, 별도의 배포가 필요 없습니다. PageSpy / DataHarborPlugin / RRWebPlugin이 패키지로 포함되어 있으며, 오프라인 상태에서의 PageSpy 최적 설정이 내장되어 있습니다. 또한 사용자 정의 테마도 지원하여 매우 간단하게 사용할 수 있습니다.프레임워크와 무관하게 프로젝트에 도입하는 방법을 자유롭게 선택할 수 있습니다.import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';정상적으로 도입되면 우측 하단에 \"문제 피드백\" 드래그 가능한 컴포넌트가 나타납니다."
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#customize-example",
      "parent": "오프라인 로그",
      "title": "사용자 정의 테마 예시",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#mp",
      "parent": "오프라인 로그",
      "title": "미니프로그램에서 사용",
      "content": "미니프로그램 환경에서도 오프라인 로그 재생을 지원합니다. 단계는 다음과 같습니다:"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#mp-step-1",
      "parent": "오프라인 로그",
      "title": "1단계: 미니프로그램 전용 플러그인 설치",
      "content": "yarn add @huolala-tech/page-spy-plugin-mp-data-harbor\n"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#mp-step-2",
      "parent": "오프라인 로그",
      "title": "2단계: 플러그인 등록",
      "content": "import PageSpy from '@huolala-tech/page-spy-wechat';\nimport DataHarborPlugin from '@huolala-tech/page-spy-plugin-mp-data-harbor';\n\n// 플러그인 등록, config 정보는 다음 참조: https://github.com/HuolalaTech/page-spy/blob/main/packages/page-spy-plugin-mp-data-harbor\nconst $dataHarborPlugin = new DataHarborPlugin(config)\nPageSpy.registerPlugin($dataHarborPlugin);\n\nconst $pageSpy = new PageSpy({\n  // ...\n})\n"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#mp-step-3",
      "parent": "오프라인 로그",
      "title": "3단계: 오프라인 로그 업로드",
      "content": "오프라인 로그를 업로드하는 방법에는 두 가지가 있습니다:\n플러그인 인스턴스의 upload() 메서드 호출:\n$dataHarborPlugin.upload().then(() => {\n  console.log('업로드 성공');\n})\n\n미니프로그램 DataHarbor 플러그인을 등록하면 PageSpy의 디버그 메뉴에 \"오프라인 로그 업로드\" 버튼이 나타납니다. 이 버튼을 클릭하면 오프라인 로그를 업로드할 수 있습니다:\n<img style={{width: 375}} src={mpDataHarborImg} />"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#diff",
      "parent": "오프라인 로그",
      "title": "차이점",
      "content": "\n\n미니프로그램 환경에서는 화면 녹화를 지원하지 않으며, 관련된 RRWebPlugin도 없습니다.\n\n\n미니프로그램 환경의 오프라인 로그는 업로드만 지원하고 다운로드는 지원하지 않습니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/offline-log#faq",
      "parent": "오프라인 로그",
      "title": "FAQ",
      "content": "\n로그를 수동으로 업로드/다운로드하는 방법은 무엇인가요?\n여기를 참조하세요.\n오프라인 로그는 어디에 저장되나요?\nDataHarborPlugin이 데이터를 수신하면 먼저 메모리의 배열에 저장됩니다. 배열에 저장된 데이터의 크기가 임계값에 도달하면 데이터는 임시 파일에 기록됩니다. 이 임계값은 기본적으로 10MB입니다. 다음과 같이 직접 설정할 수도 있습니다:new DataHarborPlugin({\n  maximum: 1 * 1024 * 1024, // 메모리의 데이터 기록이 1MB에 도달하면 임시 파일에 기록\n})\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#PageSpy-API",
      "parent": "Pagespy",
      "title": "PageSpy API",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#constructor",
      "parent": "Pagespy",
      "title": "constructor()",
      "content": "PageSpy 인스턴스를 생성합니다.\n\n타입\ndeclare class PageSpy {\n  constructor(config: InitConfig)\n}\n\n\n\n상세 정보\n생성자는 초기화 매개변수로 config 객체를 받습니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-api",
      "parent": "Pagespy",
      "title": "config.api",
      "content": "서버 주소.\n\n타입：string\n\n\n\nSDK는 불러온 경로에서 자동으로 Server의 주소 api와 디버그 측의 주소 clientOrigin를 분석하여 결정합니다. 예를 들어 <script src=\"https://example.com/page-spy/index.min.js\">를 통해 SDK를 불러오면, SDK는 내부적으로 다음과 같이 설정합니다:\n\napi: \"example.com\"\nclientOrigin: \"https://example.com\"\n\n서비스가 다른 곳에 배포되어 있다면, 여기서 수동으로 지정하여 덮어써야 합니다.\n\n\n  \n이 필드는 필수입니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-clientOrigin",
      "parent": "Pagespy",
      "title": "config.clientOrigin ",
      "content": "\n타입：string\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-project",
      "parent": "Pagespy",
      "title": "config.project",
      "content": "정보의 일종의 집합으로, 디버그 측 룸 목록에서 검색할 수 있습니다.\n타입：string\n기본값：default\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-title",
      "parent": "Pagespy",
      "title": "config.title",
      "content": "사용자 정의 매개변수로, 현재 디버그 중인 클라이언트를 구분하는 데 사용할 수 있습니다.해당 정보는 각 디버그 연결 패널의 \"디바이스 ID\"아래에 표시됩니다.\n타입：string\n기본값：--\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-enableSSL",
      "parent": "Pagespy",
      "title": "config.enableSSL",
      "content": "PageSpy 서비스의 scheme을 수동으로 지정합니다.\n\n타입：boolean\n\n\n상세 정보\nboolean 값을 전달합니다:\n\ntrue：SDK는 [\"https://\", \"wss://\"]를 통해 PageSpy 서비스에 접근합니다\nfalse：SDK는 [\"http://\", \"ws://\"]를 통해 PageSpy 서비스에 접근합니다\n\n\n\n이 값을 설정하지 않으면, SDK는 페이지의 주소를 기반으로 자동 분석합니다.\nSDK가 scheme을 올바르게 분석할 수 없는 경우, 예를 들어 PageSpy의 브라우저 플러그인이 chrome-extension://xxx/sdk/index.min.js를 통해 SDK를 불러올 때, 이는 SDK에 의해 유효하지 않은 \"chrome-extension://\"로 해석되어 [\"http://\", \"ws://\"]로 폴백됩니다. 이때 이 필드를 수동으로 설정할 수 있습니다.\n\n\n  \n이러한 환경은 일반적으로 https를 강제로 요구하므로 기본값은 true입니다. http를 지원해야 하는 경우(일반적으로 개발 환경에서), false로 설정할 수 있습니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-disabledPlugins",
      "parent": "Pagespy",
      "title": "config.disabledPlugins",
      "content": "PageSpy의 내장 플러그인은 모두 즉시 사용 가능하며, 수동으로 비활성화할 플러그인을 지정할 수 있습니다.\n타입：string[]\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-serializeData",
      "parent": "Pagespy",
      "title": "config.serializeData",
      "content": "SDK가 오프라인 로그를 수집할 때 기본 타입이 아닌 데이터를 직렬화할지 여부를 결정합니다. 직렬화의 목적은 재생 시 데이터를 쉽게 확인할 수 있도록 하는 것입니다.\n타입：boolean\n기본값：false\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-useSecret",
      "parent": "Pagespy",
      "title": "config.useSecret",
      "content": "권한 인증 기능을 활성화할지 여부.\n\n타입：boolean\n\n\n기본값：false\n\n\n상세 정보：\n활성화하면 SDK는 6자리 랜덤 \"비밀키\"를 생성합니다. 디버그 측이 룸에 입장할 때 해당 비밀키를 입력해야 합니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-messageCapacity",
      "parent": "Pagespy",
      "title": "config.messageCapacity",
      "content": "캐시 데이터의 최대 수량.\n\n타입：number\n\n\n기본값：1000\n\n\n상세 정보：\nSDK는 디버그 측이 룸에 입장하기 전에 메모리에 데이터를 캐시하여, 디버그 측이 룸에 입장한 후 이전 데이터를 볼 수 있도록 합니다.\n하지만 데이터 크기가 계속 커지므로, SDK가 로컬에 최대 몇 개의 데이터 레코드를 캐시할지 지정할 수 있습니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-dataProcessor",
      "parent": "Pagespy",
      "title": "config.dataProcessor",
      "content": "데이터 처리, 사용자는 이 속성을 통해 데이터를 사용자 정의하여 수정하거나 무시할 수 있습니다.\n\n타입：\ndeclare interface DataProcessor {\n  console?: (data: ConsoleData) => boolean;\n  network?: (data: RequestItem) => boolean;\n  storage?: (data: StorageData) => boolean;\n  database?: (data: DatabaseData) => boolean;\n  page?: (data: PageData) => boolean;\n  system?: (data: SystemData) => boolean;\n}\n\n\n\n상세 정보\n처리 함수는 각각의 내장 플러그인에 대응하며, 사용자는 함수 내에서 직접 데이터를 수정할 수 있습니다. 함수 실행이 완료된 후 PageSpy는 수정된 데이터를 처리합니다. 함수가 false를 반환하면 PageSpy는 해당 데이터를 무시합니다: 이는 두 가지 모드의 디버그 측 모두에서 해당 데이터를 볼 수 없다는 것을 의미합니다.\n자세한 내용은 다음을 참조하세요: https://www.pagespy.org/#/docs/changelog#v1_9_2\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-disabledOnProd",
      "parent": "Pagespy",
      "title": "config.disabledOnProd ",
      "content": "미니프로그램의 프로덕션 환경에서 PageSpy를 비활성화합니다.\n\n타입：boolean\n\n\n기본값：true\n\n\n상세 정보：\nPageSpy는 디버깅 도구로서 주로 개발 테스트 단계에서 사용되며, 프로덕션 환경에서의 사용은 권장되지 않습니다. 또한 미니프로그램 플랫폼은 일반적으로 성능에 더 민감하므로 이 필드의 기본값은 true입니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-offline",
      "parent": "Pagespy",
      "title": "config.offline ",
      "content": "오프라인 모드.\n\n타입：boolean\n\n\n기본값：false\n\n\n상세 정보：\nPageSpy@1.7.4에서 오프라인 재생 기능이 지원된 이후, 클라이언트에 통합된 SDK는 디버그 측과 연결을 설정할 필요 없이 DataHarborPlugin을 통해 데이터를 수집하고 오프라인 로그를 내보내는 새로운 사용 방식이 가능해졌습니다.\n기본값은 false입니다. 사용자가 Truthy 값으로 설정하면 \"오프라인 모드\"에 진입하며, 구체적으로 PageSpy는 룸을 생성하지 않고 WebSocket 연결을 설정하지 않습니다.\n현재는 브라우저 환경의 SDK에만 적용됩니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-autoRender",
      "parent": "Pagespy",
      "title": "config.autoRender ",
      "content": "SDK 초기화 완료 후 클라이언트 좌측 하단에 「원형 흰 배경의 로고」 위젯을 자동으로 렌더링할지 여부를 지정합니다.\n\n타입：boolean\n\n\n기본값：true\n\n\n상세 정보：\nfalse로 설정한 경우, window.$pageSpy.render()를 호출하여 수동으로 렌더링할 수 있습니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-logo",
      "parent": "Pagespy",
      "title": "config.logo ",
      "content": "위젯에 렌더링할 사용자 정의 로고\n타입：string\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-primaryColor",
      "parent": "Pagespy",
      "title": "config.primaryColor ",
      "content": "모달과 토스트에서 사용될 테마 색상을 설정합니다.\n타입：string\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-modal",
      "parent": "Pagespy",
      "title": "config.modal ",
      "content": "모달의 로고와 제목을 설정합니다.\n\n타입：\ndeclare interface ModalConfig {\n  logo?: string;\n  title?: string;\n}\n\n\n\n기본값：\n{\n  logo: \"\",\n  title: \"PageSpy\"\n}\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config-gesture",
      "parent": "Pagespy",
      "title": "config.gesture ",
      "content": "제스처 조작이나 키보드 방향키로 PageSpy를 활성화합니다.\n\n타입：Command | null\n제스처 인식은 iseedeadpeople에 의존하며, 그 Command는 다음과 같이 정의됩니다:\ndeclare const DIRECTION_CHARACTERS: readonly [\"U\", \"R\", \"D\", \"L\"];\ntype Direction = (typeof DIRECTION_CHARACTERS)[number];\n\ntype Command = readonly Direction[];\n\n\n\n기본값：null, 제스처를 비활성화합니다.\n\n\n예시\nnew PageSpy({\n  ...,\n  // 사용자가 \"상상하하좌우좌우\" 제스처나 방향키 입력을 완료했을 때만 PageSpy가 활성화됩니다\n  gesture: ['U', 'U', 'D', 'D', 'L', 'R', 'L', 'R'],\n})\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#registerPlugin",
      "parent": "Pagespy",
      "title": "registerPlugin()",
      "content": "정적 메서드, 플러그인을 등록합니다.\n\n타입\ndeclare class PageSpy {\n  static registerPlugin(plugin: PageSpyPlugin): void;\n}\n\n\n\n상세 정보\nPageSpy 인스턴스화 전에 호출하며, 매개변수는 PageSpyPlugin을 구현한 플러그인 인스턴스입니다. 각 플러그인 인스턴스는 name 속성을 가져야 합니다. 동일한 이름의 플러그인이 중복 등록되면 플러그인 인스턴스는 한 번만 등록되며, 콘솔에 경고 메시지가 출력됩니다.\n\n\n예시\nclass DataHarborPlugin implements PageSpyPlugin {\n  name = 'DataHarborPlugin'\n\n  ... // 플러그인 구현\n}\n\nPageSpy.registerPlugin(new DataHarborPlugin());\n\n// 중복 호출, 플러그인은 한 번만 등록됩니다\n// PageSpy.registerPlugin(new DataHarborPlugin());\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#pluginsWithOrder",
      "parent": "Pagespy",
      "title": "pluginsWithOrder",
      "content": "플러그인의 enforce 속성에 따라 정렬된 등록된 플러그인 목록.\n\n타입\ndeclare class PageSpy {\n  static plugins: Record<PluginOrder | 'normal', PageSpyPlugin[]>;\n  static get pluginsWithOrder(): PageSpyPlugin[];\n}\n\n\n\n상세 정보\n각 플러그인은 enforce: PluginOrder 속성을 제공해야 합니다. 제공하지 않으면 기본값은 enforce: \"normal\"이며, 이후 PageSpy는 pre - normal - post 순서로 플러그인 목록을 관리합니다.\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#updateRoomInfo",
      "parent": "Pagespy",
      "title": "updateRoomInfo()",
      "content": "인스턴스화 이후, 연결 정보를 업데이트합니다.\n\n타입\ntype UpdateConfig = {\n    title?: string;\n    project?: string;\n};\n\ndeclare class PageSpy {\n  updateRoomInfo(obj: UpdateConfig): void;\n}\n\n\n\n상세 정보\n클라이언트의 식별 정보가 PageSpy 초기화 시점에 아직 알 수 없는 경우, 나중에 이 메서드를 통해 업데이트할 수 있습니다.\n\n\n예시\nwindow.$pageSpy = new PageSpy({\n  title: '--',\n  project: '--'\n})\n\nasync function YourCode() {\n  // 비즈니스 로직이 비동기적으로 클라이언트 식별자를 로드, 예: 현재 사용자, 현재 프로젝트\n  const { title, project } = await xxx();\n\n  window.$pageSpy.updateRoomInfo({\n    title,\n    project\n  })\n}\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#abort",
      "parent": "Pagespy",
      "title": "abort()",
      "content": "현재 인스턴스를 제거합니다.\n\n타입\ndeclare class PageSpy {\n  abort(): void;\n}\n\n\n\n상세 정보\nPageSpy는 연결을 끊고, 문서에서 관련 DOM을 제거하고, 캐시된 데이터를 비우고, 등록된 모든 플러그인의 onReset() 메서드를 호출합니다.\n현재 컨텍스트에서 프록시되거나 재작성된 API(예: 브라우저의 window.fetch)는 모두 PageSpy 인스턴스화 이전 상태로 복원됩니다.\n\n\n예시\nwindow.$pageSpy = new PageSpy(...);\n\nwindow.$pageSpy.abort();\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#version",
      "parent": "Pagespy",
      "title": "version",
      "content": "현재 사용 중인 PageSpy 버전.\n\n타입\ndeclare class PageSpy {\n  version: string;\n}\n\n\n\n예시\nwindow.$pageSpy = new PageSpy(...);\n\nconsole.log(window.$pageSpy.version);\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#config",
      "parent": "Pagespy",
      "title": "config",
      "content": "설정 정보. 설정은 플랫폼에 따라 차이가 있습니다. 예를 들어 미니프로그램의 config.disableOnProd와 같은 특정 설정이 있습니다.\n\n타입\ndeclare class PageSpy {\n  config: Config;\n}\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#socketStore",
      "parent": "Pagespy",
      "title": "socketStore",
      "content": "WebSocket 인스턴스를 래핑하여 메시지 이벤트 등록, 지정된 메시지 수신 후 콜백 트리거, 메시지 브로드캐스트 기능을 제공합니다.\n\n타입\ninterface SocketStoreType {\n  addListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  addListener(type: InternalType, fn: InternalEventCallback): void;\n\n  removeListener(type: InteractiveType, fn: InteractiveEventCallback): void;\n  removeListener(type: InternalType, fn: InternalEventCallback): void;\n\n  dispatchEvent(type: InteractiveType | InternalType, data: InteractiveEvent): void;\n  dispatchEvent(type: InternalType, data: any): void;\n\n  broadcastMessage(message: MessageItem, noCache?: boolean): void;\n}\n\n\n\n상세 정보\naddListener() / removeListener() / dispatchEvent()의 첫 번째 매개변수는 메시지 유형이며, 메시지 유형은 **\"대화형\"**과 \"내부\" 두 가지로 분류됩니다:\n\n\"대화형\" 메시지 유형은 디버그 측과의 상호 작용에 사용됩니다. 예: 디버그 측 온라인, 클라이언트로 코드 실행 전송, 객체 상세 정보 확장 클릭 등이 메시지 이벤트로 SDK에 전송되며, SDK는 필요에 따라 응답합니다.\n\"내부\" 메시지 유형은 현재 플러그인 간 상호 작용에 사용됩니다. 예: 각 플러그인이 데이터를 생성한 후 socketStore.dispatchEvent('public-data')를 통해 이벤트를 발생시키면, 플러그인인 DataHarborPlugin이 이 이벤트를 감지하여 데이터를 추가로 처리할 수 있습니다.\n\nbroadcastMessage()는 메시지를 브로드캐스트합니다. 첫 번째 매개변수는 각 플러그인에서 디버그 측으로 보내는 데이터이며, 두 번째 매개변수 noCache는 플러그인이 socketStore에 현재 전송 중인 메시지를 캐시해야 하는지 여부를 알리는 데 사용됩니다. 데이터를 캐시하는 목적은 디버그 측이 \"온라인\" 상태가 된 후 이전 메시지를 볼 수 있도록 하는 것이지만, 모든 데이터를 캐시할 필요는 없습니다. 예: 클라이언트가 네트워크 요청을 시작할 때, 성공 또는 실패와 관계없이 최종 상태만 캐시하면 됩니다.\n\n\n예시\n// ConsolePlugin의 구체적인 구현은 리포지토리를 참조하세요\nclass ConsolePlugin implements PageSpyPlugin {\n  onInit({ socketStore }) {\n    socketStore.addListener('debug', ({ source }, reply) => {\n      ...\n    })\n\n    socketStore.broadcastMessage(...)\n  }\n}\n\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/pagespy#showPanel",
      "parent": "Pagespy",
      "title": "showPanel() ",
      "content": "미니프로그램 환경에서 디버그 패널을 표시합니다.\n\n타입\ndeclare class PageSpy {\n  showPanel(): void;\n}\n\n\n\n상세 정보\n<img src={mpPanelImg} style={{width: 375}} />\n이 패널은 플러그인이 사용자 정의 버튼을 등록하는 것을 지원합니다. 예를 들어 DataHarborPlugin을 등록하면 이 패널에 「오프라인 로그 업로드」 버튼이 나타납니다:\n<img src={mpDataHarborImg} style={{maxWidth: 375}} />\n\n"
    },
    {
      "language": "ko",
      "route": "/docs/plugins#definition",
      "parent": "플러그인 시스템",
      "title": "타입 정의",
      "content": "export abstract class PageSpyPlugin {\n  /**\n   * 각 플러그인은 name을 지정해야 하며, 이는 현재 플러그인의 \"식별자\" 역할을 합니다.\n   * PageSpy 내부의 플러그인 등록, 비활성화 기능은 모두 이 name 속성에 의존합니다\n   */\n  public abstract name: string;\n\n  /**\n   * 플러그인 로드 순서를 지정합니다. 플러그인 호출 순서는 다음과 같습니다:\n   *   1. enforce: \"pre\" 속성을 가진 플러그인;\n   *   2. enforce 속성이 없는 플러그인;\n   *   3. enforce: \"post\" 속성을 가진 플러그인;\n   */\n  public abstract enforce?: PluginOrder;\n\n  // new PageSpy() 호출 시 실행됩니다\n  public abstract onInit: (params: OnInitParams) => any;\n\n  // PageSpy 렌더링 완료 후 호출됩니다(렌더링 프로세스가 있는 경우)\n  public abstract onMounted?: (params: OnMountedParams) => any;\n\n  // 사용자가 PageSpy를 더 이상 필요로 하지 않을 때, 플러그인은 리셋/복구 기능을 가져야 합니다\n  public abstract onReset?: () => any;\n}\n\nexport interface OnInitParams {\n  // 사용자가 전달한 인스턴스화 매개변수가 병합된 설정 정보\n  config: Required<InitConfig>;\n\n  // socket 인스턴스를 래핑한 것으로, 플러그인 개발자는 이 속성을 통해 디버그 측/API와 상호작용할 수 있습니다\n  socketStore: SocketStoreType;\n}\n\nexport interface OnMountedParams {\n  // PageSpy가 렌더링하는 루트 노드\n  root?: HTMLDivElement;\n\n  // PageSpy가 렌더링하는 팝업의 루트 노드\n  content?: HTMLDivElement;\n\n  // socket 인스턴스를 래핑한 것으로, 플러그인 개발자는 이 속성을 통해 디버그 측/API와 상호작용할 수 있습니다\n  socketStore: SocketStoreType;\n}\n"
    },
    {
      "language": "ko",
      "route": "/docs/plugins#convention",
      "parent": "플러그인 시스템",
      "title": "동작 규약",
      "content": "현재 플러그인이 플랫폼의 특정 동작 \"데이터\"를 수집(또는 공개하고자)하는 경우, socketStore로 데이터를 브로드캐스트하는 것 외에도, 플러그인이 socketStore 인스턴스에서 추가적인 \"public-data\" 내부 이벤트(Internal Event)를 발행하도록 규약으로 정하고 있습니다. 이는 통계나 데이터 영속화가 필요한 플러그인이 이 이벤트를 통해 통일된 방식으로 데이터를 수집할 수 있도록 하기 위함입니다. 플러그인이 특정 데이터를 \"공개\"하지 않아야 한다고 판단하는 경우에는 \"public-data\" 이벤트를 발행할 필요가 없습니다."
    },
    {
      "language": "ko",
      "route": "/docs/plugins#demo",
      "parent": "플러그인 시스템",
      "title": "플러그인 구현 예제",
      "content": "DataHarborPlugin과 RRWebPlugin을 참조하세요."
    },
    {
      "language": "ko",
      "route": "/docs/plugins#usage",
      "parent": "플러그인 시스템",
      "title": "플러그인 사용 방법",
      "content": "<!-- SDK 불러오기 -->\n<script src=\"https://<your-pagespy-host>/page-spy/index.min.js\"></script>\n<!-- 플러그인 불러오기 -->\n<script src=\"https://<your-pagespy-host>/plugin/xxx/index.min.js\"></script>\n\n<!-- 플러그인 등록 -->\n<script>\n  PageSpy.registerPlugin(new XXXPlugin());\n  window.$pageSpy = new PageSpy();\n</script>\n"
    },
    {
      "language": "ko",
      "route": "/docs/react-native#step-1",
      "parent": "React Native",
      "title": "1단계",
      "content": "프로젝트에 의존성을 설치합니다:yarn add @huolala-tech/page-spy-react-native@latest\n"
    },
    {
      "language": "ko",
      "route": "/docs/react-native#step-2",
      "parent": "React Native",
      "title": "2단계",
      "content": "진입점 파일에서 SDK를 가져오고 인스턴스화합니다. 초기화 매개변수는 SDK의 동작을 사용자 정의하기 위한 선택적 설정 옵션을 제공합니다:import PageSpy from '@huolala-tech/page-spy-react-native';\n\nnew PageSpy({\n  api: \"{deployPath}\",\n})\n@react-native-async-storage/async-storage를 사용하는 경우, 독립된 플러그인을 제공합니다:import { PageSpy } from '@huolala-tech/page-spy-react-native';\nimport RNAsyncStoragePlugin from '@huolala-tech/page-spy-plugin-rn-async-storage';\n\nPageSpy.registerPlugin(new RNAsyncStoragePlugin())\nnew PageSpy({\n  api: \"{deployPath}\",\n})\n이상이 React Native 프로젝트에 PageSpy를 연동하는 전체 과정입니다. 연동이 완료된 후 상단 메뉴의 디버그 시작을 클릭하여 사용하세요!"
    },
    {
      "language": "ko",
      "route": "/docs/rrweb#api",
      "parent": "RRWebPlugin",
      "title": "RRWebPlugin API",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/docs/rrweb#constructor",
      "parent": "RRWebPlugin",
      "title": "constructor()",
      "content": "\n\n타입\nimport type { recordOptions } from 'rrweb/typings/types';\nimport type { eventWithTime } from '@rrweb/types';\n\ninterface Options extends recordOptions<eventWithTime> {\n  // 예약된 설정, 현재 사용할 수 없음\n  allowOnline?: true;\n}\ndeclare class RRWebPlugin implements PageSpyPlugin {\n    constructor(options?: Options);\n}\n\n\n"
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/faq#diff-with-page-spy",
      "parent": "자주 묻는 질문",
      "title": "O-Spy와 PageSpy의 관계는 무엇인가요?",
      "content": "O-Spy는 PageSpy 및 그 플러그인 생태계의 기능을 기반으로 구축되었으며, 구체적으로 다음 세 가지 의존성을 패키지화했습니다:\n@huolala-tech/page-spy-browser\n@huolala-tech/page-spy-plugin-rrweb\n@huolala-tech/page-spy-plugin-data-harbor\n두 도구의 주요 차이점은 다음과 같습니다:\n\n\n\nO-Spy\nPageSpy\n\n\n\n\n배포 필요 여부\n아니오\n예\n\n\n온라인 실시간 디버깅\n❌\n✅\n\n\n오프라인 재생 디버깅\n✅\n✅\n\n\n데이터 업로드\n🟡 직접 처리 필요\n✅\n\n\n데이터 다운로드\n✅\n✅\n\n\n"
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/faq#where-data-stored",
      "parent": "자주 묻는 질문",
      "title": "O-Spy에서 기록된 데이터는 어디에 저장되나요?",
      "content": "모든 데이터는 사용자의 로컬에 저장되며, 어떠한 제3자 서버에도 업로드되지 않습니다.데이터 저장 전략: O-Spy는 데이터를 수신하면 먼저 메모리 배열에 저장합니다. 배열에 저장된 데이터 용량이 임계값에 도달하면 데이터는 임시 파일에 기록됩니다. 이 임계값은 10MB입니다(소스 코드 참조). 페이지를 새로고침하면 모든 데이터가 삭제됩니다."
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/introduction#what-is-ospy",
      "parent": "소개",
      "title": "O-Spy란?",
      "content": "O-Spy(발음 /əʊ spaɪ/, **\"Oh-Spy\"**와 유사)는 웹 프로젝트에서 「프로그램 실행 데이터를 오프라인으로 기록하는」 디버깅 도구입니다. 기록된 데이터는 O-Spy 플랫폼에서 재생할 수 있습니다. 데모 보기작업 흐름은 다음과 같습니다:"
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/introduction#quick-start",
      "parent": "소개",
      "title": "빠른 시작",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/introduction#step-1",
      "parent": "소개",
      "title": "1단계: O-Spy 도입",
      "content": "프레임워크와 무관하게 원하는 방식으로 프로젝트에 도입할 수 있습니다.import { ImportGuide } from '@/pages/OSpy/components/ImportGuide';프로젝트에 성공적으로 도입되면 화면 우측 하단에 \"O-Spy\" 드래그 가능한 컴포넌트가 표시됩니다. 클릭해서 확인해보세요 :)import { CallOSpy } from '../md-components/CallOSPy';"
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/introduction#step-2",
      "parent": "소개",
      "title": "2단계: 데이터 내보내기",
      "content": "현재 페이지에는 O-Spy가 통합되어 있습니다. 이것이 당신의 프로젝트 페이지라고 상상해보세요. 프로그램에서 데이터를 생성해보겠습니다. 아래 버튼을 자유롭게 클릭하세요:import { MakeData } from '../md-components/MakeData'그런 다음 O-Spy 플로팅 버튼을 클릭하여 대화상자를 열고 \"로그 내보내기\"를 클릭하면 json 파일이 다운로드됩니다."
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/introduction#step-3",
      "parent": "소개",
      "title": "3단계: 재생",
      "content": ""
    },
    {
      "language": "ko",
      "route": "/o-spy/docs/theme#customize-example",
      "parent": "사용자 지정 테마",
      "title": "커스터마이징 예시",
      "content": "import { CustomizeExample } from '@/pages/OSpy/components/Customize';"
    }
  ]
}
